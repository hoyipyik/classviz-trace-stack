export const traceData = {
  "java.util.concurrent.ThreadPoolExecutor$Worker.run()": {
    "id": "1",
    "parentId": "0",
    "label": "java.util.concurrent.ThreadPoolExecutor$Worker.run()",
    "className": "java.util.concurrent.ThreadPoolExecutor$Worker",
    "methodName": "run",
    "color": "#FFFFB3",
    "packageName": "java.util.concurrent",
    "sourceCode": "",
    "visibility": "",
    "simpleName": "",
    "qualifiedName": "",
    "kind": "",
    "docComment": "",
    "metaSrc": "",
    "description": "",
    "detailedBehavior": "",
    "flowRepresentation": "",
    "briefSummary": "",
    "returns": "",
    "reason": "",
    "howToUse": "",
    "howItWorks": "",
    "assertions": "",
    "layer": "",
    "time": "19373897",
    "selfTime": "63313",
    "percent": "88.2",
    "isRoot": false,
    "collapsed": true,
    "selected": false,
    "treeStats": {
      "directChildrenCount": 2,
      "totalDescendants": 117,
      "subtreeDepth": 7,
      "level": 1
    },
    "status": {
      "fanOut": false,
      "implementationEntryPoint": true,
      "chainStartPoint": false,
      "recursiveEntryPoint": false,
      "isSummarised": false
    },
    "children": [
      {
        "id": "2",
        "parentId": "1",
        "label": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
        "className": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
        "methodName": "run",
        "color": "#E41A1C",
        "packageName": "nl.tudelft.jpacman.level",
        "sourceCode": "@java.lang.Override\r\npublic void run() {\r\n    nl.tudelft.jpacman.board.Direction nextMove = this.npc.nextMove();\r\n    if (nextMove != null) {\r\n        this.move(this.npc, nextMove);\r\n    }\r\n    long interval = this.npc.getInterval();\r\n    this.service.schedule(this, interval, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
        "visibility": "public",
        "simpleName": "run()",
        "qualifiedName": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
        "kind": "method",
        "docComment": "",
        "metaSrc": "source code",
        "description": "Moves a non-player character (NPC) in the game according to its next move and schedules itself to run again after a specified interval.",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "void",
        "reason": "This method is responsible for updating the position of an NPC in the game and scheduling itself to run again after a certain interval.",
        "howToUse": "Call this method on an instance of `Level$NpcMoveTask` with the appropriate parameters.",
        "howItWorks": "The method first determines the next move for the NPC. If a valid move is found, it moves the NPC in that direction and schedules itself to run again after a specified interval using the game service.",
        "assertions": "",
        "layer": "Logic",
        "time": "19061459",
        "selfTime": "434",
        "percent": "86.7",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 3,
          "totalDescendants": 111,
          "subtreeDepth": 6,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": true,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "3",
            "parentId": "2",
            "label": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
            "className": "nl.tudelft.jpacman.npc.Ghost",
            "methodName": "nextMove",
            "color": "#377EB8",
            "packageName": "nl.tudelft.jpacman.npc",
            "sourceCode": "/**\r\n * Calculates the next move for this unit and returns the direction to move\r\n * in.\r\n * <p>\r\n * Precondition: The NPC occupies a square (hasSquare() holds).\r\n *\r\n * @return The direction to move in, or <code>null</code> if no move could\r\nbe devised.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction nextMove() {\r\n    return this.nextAiMove().orElseGet(this::randomMove);\r\n}",
            "visibility": "public",
            "simpleName": "nextMove()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
            "kind": "method",
            "docComment": "Calculates the next move for this unit and returns the direction to move\r\nin.\r\n<p>\r\nPrecondition: The NPC occupies a square (hasSquare() holds).\r\n\r\n@return The direction to move in, or <code>null</code> if no move could\r\nbe devised.\r\n",
            "metaSrc": "source code",
            "description": "Determines the next move for a ghost in the game.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "An Optional<Direction> representing the next direction the ghost should move, or an empty Optional if no valid move is possible.",
            "reason": "This method calculates the next AI move for a ghost based on its current state and available moves. It uses another method to determine the AI move and falls back to random movement if no valid move is found.",
            "howToUse": "Call this method on an instance of nl.tudelft.jpacman.npc.Ghost to get the next direction the ghost should move.",
            "howItWorks": "The method first attempts to calculate a move using the nextAiMove() method. If no valid move is found, it returns a random move.",
            "assertions": "",
            "layer": "Logic",
            "time": "18978271",
            "selfTime": "1092",
            "percent": "86.4",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 4,
              "totalDescendants": 86,
              "subtreeDepth": 5,
              "level": 3
            },
            "status": {
              "fanOut": true,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "4",
                "parentId": "3",
                "label": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
                "className": "nl.tudelft.jpacman.npc.ghost.Inky",
                "methodName": "nextAiMove",
                "color": "#4DAF4A",
                "packageName": "nl.tudelft.jpacman.npc.ghost",
                "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Inky has the most complicated AI of all. Inky considers two things: Blinky's\r\n * location, and the location two grid spaces ahead of Pac-Man. Inky\r\n * draws a line from Blinky to the spot that is two squares in front of\r\n * Pac-Man and extends that line twice as far. Therefore, if Inky is\r\n * alongside Blinky when they are behind Pac-Man, Inky will usually\r\n * follow Blinky the whole time. But if Inky is in front of Pac-Man when\r\n * Blinky is far behind him, Inky tends to want to move away from Pac-Man\r\n * (in reality, to a point very far ahead of Pac-Man). Inky is affected\r\n * by a similar targeting bug that affects Speedy. When Pac-Man is moving or\r\n * facing up, the spot Inky uses to draw the line is two squares above\r\n * and left of Pac-Man.\r\n * </p>\r\n *\r\n * <p>\r\n * <b>Implementation:</b>\r\n * To actually implement this in jpacman we have the following approximation:\r\n * first determine the square of Blinky (A) and the square 2\r\n * squares away from Pac-Man (B). Then determine the shortest path from A to\r\n * B regardless of terrain and walk that same path from B. This is the\r\n * destination.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit blinky = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.npc.ghost.Blinky.class, this.getSquare());\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if ((blinky == null) || (player == null)) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square playerDestination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> firstHalf = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(blinky.getSquare(), playerDestination, null);\r\n    if (firstHalf == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    nl.tudelft.jpacman.board.Square destination = this.followPath(firstHalf, playerDestination);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
                "visibility": "public",
                "simpleName": "nextAiMove()",
                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
                "kind": "method",
                "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nInky has the most complicated AI of all. Inky considers two things: Blinky's\r\nlocation, and the location two grid spaces ahead of Pac-Man. Inky\r\ndraws a line from Blinky to the spot that is two squares in front of\r\nPac-Man and extends that line twice as far. Therefore, if Inky is\r\nalongside Blinky when they are behind Pac-Man, Inky will usually\r\nfollow Blinky the whole time. But if Inky is in front of Pac-Man when\r\nBlinky is far behind him, Inky tends to want to move away from Pac-Man\r\n(in reality, to a point very far ahead of Pac-Man). Inky is affected\r\nby a similar targeting bug that affects Speedy. When Pac-Man is moving or\r\nfacing up, the spot Inky uses to draw the line is two squares above\r\nand left of Pac-Man.\r\n</p>\r\n\r\n<p>\r\n<b>Implementation:</b>\r\nTo actually implement this in jpacman we have the following approximation:\r\nfirst determine the square of Blinky (A) and the square 2\r\nsquares away from Pac-Man (B). Then determine the shortest path from A to\r\nB regardless of terrain and walk that same path from B. This is the\r\ndestination.\r\n</p>\r\n",
                "metaSrc": "source code",
                "description": "(no description)",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "18662464",
                "selfTime": "153",
                "percent": "84.9",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 5,
                  "totalDescendants": 23,
                  "subtreeDepth": 4,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "5",
                    "parentId": "4",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "shortestPath",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "kind": "static method",
                    "docComment": "Calculates the shortest path. This is done by BFS. This search ensures\r\nthe traveller is allowed to occupy the squares on the way, or returns the\r\nshortest path to the square regardless of terrain if no traveller is\r\nspecified.\r\n\r\n@param from\r\n\t\tThe starting square.\r\n@param to\r\n\t\tThe destination.\r\n@param traveller\r\n\t\tThe traveller attempting to reach the destination. If\r\n\t\ttraveller is set to <code>null</code>, this method will ignore\r\n\t\tterrain and find the shortest path whether it can actually be\r\n\t\treached or not.\r\n@return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n",
                    "metaSrc": "source code",
                    "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                    "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                    "howToUse": "Call this method with the starting square, destination square, and the unit that will traverse the path. It returns a list of directions to follow.",
                    "howItWorks": "The method uses a breadth-first search algorithm to find the shortest path from the start square to the end square, considering the movement capabilities of the given unit.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "18638969",
                    "selfTime": "430276",
                    "percent": "84.8",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 10,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "6",
                        "parentId": "5",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "addNewTargets",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "Adds new targets to the list of targets for a ghost in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                        "howToUse": "Call this method with the current unit, target list, visited set, current node, and square to add new targets to the list.",
                        "howItWorks": "The method iterates through all possible directions from the given square, checks if the adjacent square is accessible and not already visited, and adds it as a new target if both conditions are met.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "2176106",
                        "selfTime": "868764",
                        "percent": "9.9",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "7",
                            "parentId": "6",
                            "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getSquareAt",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                            "visibility": "public",
                            "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "kind": "method",
                            "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the square adjacent to the current square in a given direction.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.board.Square",
                            "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                            "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                            "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "663639",
                            "selfTime": "461784",
                            "percent": "3.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "8",
                            "parentId": "6",
                            "label": "nl.tudelft.jpacman.board.Direction.values()",
                            "className": "nl.tudelft.jpacman.board.Direction",
                            "methodName": "values",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "178801",
                            "selfTime": "120215",
                            "percent": "0.8",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "9",
                            "parentId": "6",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "421",
                            "selfTime": "421",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "10",
                            "parentId": "6",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "248",
                            "selfTime": "248",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "11",
                        "parentId": "5",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getSquare",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                        "visibility": "private",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "kind": "method",
                        "docComment": "\r\n@return The square for this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square associated with a node.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                        "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                        "howToUse": "Call this method on an instance of Navigation.Node to get its associated square.",
                        "howItWorks": "The method returns the private field 'square' of the current instance.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "51939",
                        "selfTime": "51939",
                        "percent": "0.2",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "12",
                        "parentId": "5",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getPath",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                        "visibility": "private",
                        "simpleName": "getPath()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "kind": "method",
                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "143",
                        "selfTime": "8",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 3,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": true,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "13",
                            "parentId": "12",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getPath",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                            "visibility": "private",
                            "simpleName": "getPath()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "kind": "method",
                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "131",
                            "selfTime": "8",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 3,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "14",
                                "parentId": "13",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getPath",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                "visibility": "private",
                                "simpleName": "getPath()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "kind": "method",
                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "121",
                                "selfTime": "6",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 4,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "15",
                                    "parentId": "14",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getPath",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getPath()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "kind": "method",
                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "112",
                                    "selfTime": "6",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "16",
                                        "parentId": "15",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getPath",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getPath()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "kind": "method",
                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "104",
                                        "selfTime": "6",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 2,
                                          "totalDescendants": 4,
                                          "subtreeDepth": 2,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "17",
                                            "parentId": "16",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getPath",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getPath()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "kind": "method",
                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "96",
                                            "selfTime": "6",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 2,
                                              "totalDescendants": 3,
                                              "subtreeDepth": 2,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "18",
                                                "parentId": "17",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getPath",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getPath()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "kind": "method",
                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "87",
                                                "selfTime": "9",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 3,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "19",
                                                    "parentId": "18",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getPath",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getPath()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "kind": "method",
                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "77",
                                                    "selfTime": "4",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 2,
                                                      "totalDescendants": 4,
                                                      "subtreeDepth": 2,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "20",
                                                        "parentId": "19",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getPath",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getPath()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "kind": "method",
                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "69",
                                                        "selfTime": "9",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 2,
                                                          "totalDescendants": 3,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "21",
                                                            "parentId": "20",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getPath",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getPath()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "kind": "method",
                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "58",
                                                            "selfTime": "6",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 1,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "22",
                                                                "parentId": "21",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getPath",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getPath()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "kind": "method",
                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "51",
                                                                "selfTime": "8",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 1,
                                                                  "totalDescendants": 3,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "23",
                                                                    "parentId": "22",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getPath",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getPath()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "kind": "method",
                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "41",
                                                                    "selfTime": "8",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 2,
                                                                      "totalDescendants": 3,
                                                                      "subtreeDepth": 2,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": [
                                                                      {
                                                                        "id": "24",
                                                                        "parentId": "23",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getPath",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getPath()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "kind": "method",
                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "30",
                                                                        "selfTime": "5",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 1,
                                                                          "totalDescendants": 2,
                                                                          "subtreeDepth": 2,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": [
                                                                          {
                                                                            "id": "25",
                                                                            "parentId": "24",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getPath",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getPath()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "kind": "method",
                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "23",
                                                                            "selfTime": "5",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 1,
                                                                              "totalDescendants": 3,
                                                                              "subtreeDepth": 2,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": [
                                                                              {
                                                                                "id": "26",
                                                                                "parentId": "25",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getPath",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getPath()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "kind": "method",
                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "18",
                                                                                "selfTime": "6",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 2,
                                                                                  "totalDescendants": 3,
                                                                                  "subtreeDepth": 2,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": [
                                                                                  {
                                                                                    "id": "27",
                                                                                    "parentId": "26",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getPath",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getPath()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "kind": "method",
                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "10",
                                                                                    "selfTime": "5",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 1,
                                                                                      "totalDescendants": 2,
                                                                                      "subtreeDepth": 2,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": [
                                                                                      {
                                                                                        "id": "28",
                                                                                        "parentId": "27",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getPath",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getPath()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "kind": "method",
                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "4",
                                                                                        "selfTime": "1",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 1,
                                                                                          "totalDescendants": 1,
                                                                                          "subtreeDepth": 2,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": [
                                                                                          {
                                                                                            "id": "29",
                                                                                            "parentId": "28",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getPath",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getPath()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "kind": "method",
                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "1",
                                                                                            "selfTime": "1",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 0,
                                                                                              "totalDescendants": 0,
                                                                                              "subtreeDepth": 1,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": []
                                                                                          }
                                                                                        ]
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  {
                                                                                    "id": "30",
                                                                                    "parentId": "26",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getDirection",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getDirection()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "kind": "method",
                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "2",
                                                                                    "selfTime": "2",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 0,
                                                                                      "totalDescendants": 0,
                                                                                      "subtreeDepth": 1,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": []
                                                                                  }
                                                                                ]
                                                                              }
                                                                            ]
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "id": "31",
                                                                        "parentId": "23",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getDirection",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getDirection()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "kind": "method",
                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "1",
                                                                        "selfTime": "1",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 0,
                                                                          "totalDescendants": 0,
                                                                          "subtreeDepth": 1,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "32",
                                                            "parentId": "20",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getDirection",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getDirection()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "kind": "method",
                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the current direction of a ghost in the game.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1",
                                                            "selfTime": "1",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "id": "33",
                                                        "parentId": "19",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getDirection",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getDirection()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "kind": "method",
                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the current direction of a ghost in the game.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "1",
                                                        "selfTime": "1",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 0,
                                                          "totalDescendants": 0,
                                                          "subtreeDepth": 1,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "34",
                                                "parentId": "17",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getDirection",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getDirection()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the current direction of a ghost in the game.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "2",
                                                "selfTime": "2",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 0,
                                                  "totalDescendants": 0,
                                                  "subtreeDepth": 1,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "id": "35",
                                            "parentId": "16",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getDirection",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getDirection()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "kind": "method",
                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the current direction of a ghost in the game.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A Direction object representing the current direction of the ghost.",
                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "1",
                                            "selfTime": "1",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 0,
                                              "totalDescendants": 0,
                                              "subtreeDepth": 1,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": []
                                          }
                                        ]
                                      },
                                      {
                                        "id": "36",
                                        "parentId": "15",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getDirection",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getDirection()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the current direction of a ghost in the game.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A Direction object representing the current direction of the ghost.",
                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "1",
                                        "selfTime": "1",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "37",
                                    "parentId": "14",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getDirection",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getDirection()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "kind": "method",
                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the current direction of a ghost in the game.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A Direction object representing the current direction of the ghost.",
                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "2",
                                    "selfTime": "2",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "id": "38",
                            "parentId": "12",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getDirection",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                            "visibility": "private",
                            "simpleName": "getDirection()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "kind": "method",
                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the current direction of a ghost in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A Direction object representing the current direction of the ghost.",
                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "39",
                    "parentId": "4",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "findNearest",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "kind": "static method",
                    "docComment": "Finds the nearest unit of the given type and returns its location. This\r\nmethod will perform a breadth first search starting from the given\r\nsquare.\r\n\r\n@param type\r\n\t\tThe type of unit to search for.\r\n@param currentLocation\r\n\t\tThe starting location for the search.\r\n@return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n",
                    "metaSrc": "source code",
                    "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                    "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                    "howToUse": "Call this method with the desired unit type and the current square to find the nearest unit of that type.",
                    "howItWorks": "The method uses a breadth-first search (BFS) algorithm to explore squares in increasing distance from the current location until it finds a unit of the specified type or exhausts all possibilities.",
                    "assertions": [
                      {
                        "code": "assert unit.hasSquare();",
                        "description": "Ensures that if a unit is found, it has a square."
                      }
                    ],
                    "layer": "",
                    "time": "23121",
                    "selfTime": "7189",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 4,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "40",
                        "parentId": "39",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "findUnit",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                        "visibility": "public",
                        "simpleName": "findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "Determines whether a square has an occupant of a certain type.\r\n\r\n@param type\r\n\t\tThe type to search for.\r\n@param square\r\n\t\tThe square to search.\r\n@param <T>\r\n\t\tthe type of unit we searched for.\r\n@return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n",
                        "metaSrc": "source code",
                        "description": "Finds a unit of a specific type in a given square on the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                        "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                        "howToUse": "Call this method with the desired unit class type and the square where you want to search for units.",
                        "howItWorks": "The method iterates through all units occupying the given square and checks if any of them match the specified type. If a match is found, it returns that unit; otherwise, it returns null.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "4517",
                        "selfTime": "1963",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 1,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "41",
                            "parentId": "40",
                            "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getOccupants",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                            "visibility": "public",
                            "simpleName": "getOccupants()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "kind": "method",
                            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the list of units occupying a square in the game board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An immutable list of units occupying the square.",
                            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "1387",
                            "selfTime": "873",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "42",
                        "parentId": "39",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "4093",
                        "selfTime": "2817",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "43",
                        "parentId": "39",
                        "label": "nl.tudelft.jpacman.board.Direction.values()",
                        "className": "nl.tudelft.jpacman.board.Direction",
                        "methodName": "values",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "1215",
                        "selfTime": "630",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "44",
                    "parentId": "4",
                    "label": "nl.tudelft.jpacman.npc.ghost.Inky.followPath()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Inky",
                    "methodName": "followPath",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "private nl.tudelft.jpacman.board.Square followPath(java.util.List<nl.tudelft.jpacman.board.Direction> directions, nl.tudelft.jpacman.board.Square start) {\r\n    nl.tudelft.jpacman.board.Square destination = start;\r\n    for (nl.tudelft.jpacman.board.Direction d : directions) {\r\n        destination = destination.getSquareAt(d);\r\n    }\r\n    return destination;\r\n}",
                    "visibility": "private",
                    "simpleName": "followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Inky.followPath(java.util.List,nl.tudelft.jpacman.board.Square)",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "Retrieves the destination square by following a list of directions from a starting square.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square",
                    "reason": "This method is part of the logic layer as it processes application and domain logic related to moving a ghost in Pacman.",
                    "howToUse": "Call this method with a list of directions and a starting square to get the destination square.",
                    "howItWorks": "The method iterates through each direction in the list, updating the current square to the next adjacent square until all directions are processed. The final square is returned as the destination.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "106",
                    "selfTime": "43",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "45",
                        "parentId": "44",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "28",
                        "selfTime": "21",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "46",
                    "parentId": "4",
                    "label": "nl.tudelft.jpacman.board.Unit.squaresAheadOf()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "squaresAheadOf",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * A utility method for implementing the ghost AI.\r\n *\r\n * @param amountToLookAhead\r\n * \t\tthe amount of squares to follow this units direction in.\r\n * @return The square amountToLookAhead spaces in front of this unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square squaresAheadOf(int amountToLookAhead) {\r\n    nl.tudelft.jpacman.board.Direction targetDirection = this.getDirection();\r\n    nl.tudelft.jpacman.board.Square destination = this.getSquare();\r\n    for (int i = 0; i < amountToLookAhead; i++) {\r\n        destination = destination.getSquareAt(targetDirection);\r\n    }\r\n    return destination;\r\n}",
                    "visibility": "public",
                    "simpleName": "squaresAheadOf(int)",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
                    "kind": "method",
                    "docComment": "A utility method for implementing the ghost AI.\r\n\r\n@param amountToLookAhead\r\n\t\tthe amount of squares to follow this units direction in.\r\n@return The square amountToLookAhead spaces in front of this unit.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that is a specified number of steps ahead in the current direction.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square that is a specified number of steps ahead in the current direction.",
                    "reason": "This method is used to determine the next position a unit will move to based on its current direction and the number of squares it intends to move.",
                    "howToUse": "Call this method with the number of squares you want to look ahead. It returns the square that many steps in the unit's current direction.",
                    "howItWorks": "The method retrieves the current direction and the current square, then iterates through the specified number of times, moving to the next square in the current direction each time.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "53",
                    "selfTime": "37",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 3,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "47",
                        "parentId": "46",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "9",
                        "selfTime": "8",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "48",
                        "parentId": "46",
                        "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getDirection",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                        "visibility": "public",
                        "simpleName": "getDirection()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "kind": "method",
                        "docComment": "Returns the current direction this unit is facing.\r\n\r\n@return The current direction this unit is facing.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the current direction of a unit in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A Direction object representing the current direction of the unit.",
                        "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                        "howToUse": "Call this method on an instance of Unit to get its current movement direction.",
                        "howItWorks": "The method simply returns the value of the 'direction' field of the Unit object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "5",
                        "selfTime": "5",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "49",
                        "parentId": "46",
                        "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getSquare",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "kind": "method",
                        "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square that a unit is currently occupying.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                        "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                        "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                        "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "2",
                        "selfTime": "2",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "50",
                    "parentId": "4",
                    "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "getSquare",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSquare()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "kind": "method",
                    "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that a unit is currently occupying.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                    "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                    "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                    "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "30",
                    "selfTime": "30",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "51",
                "parentId": "3",
                "label": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
                "className": "nl.tudelft.jpacman.npc.ghost.Pinky",
                "methodName": "nextAiMove",
                "color": "#4DAF4A",
                "packageName": "nl.tudelft.jpacman.npc.ghost",
                "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling their home corners, Pinky wants to go\r\n * to the place that is four grid spaces ahead of Pac-Man in the direction\r\n * that Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to\r\n * the location exactly four spaces below Pac-Man. Moving towards this place\r\n * uses the same logic that Blinky uses to find Pac-Man's exact location.\r\n * Pinky is affected by a targeting bug if Pac-Man is facing up - when he\r\n * moves or faces up, Pinky tries moving towards a point up, and left, four\r\n * spaces.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (player == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square destination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
                "visibility": "public",
                "simpleName": "nextAiMove()",
                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
                "kind": "method",
                "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nWhen the ghosts are not patrolling their home corners, Pinky wants to go\r\nto the place that is four grid spaces ahead of Pac-Man in the direction\r\nthat Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to\r\nthe location exactly four spaces below Pac-Man. Moving towards this place\r\nuses the same logic that Blinky uses to find Pac-Man's exact location.\r\nPinky is affected by a targeting bug if Pac-Man is facing up - when he\r\nmoves or faces up, Pinky tries moving towards a point up, and left, four\r\nspaces.\r\n</p>\r\n",
                "metaSrc": "source code",
                "description": "(no description)",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "147250",
                "selfTime": "2140",
                "percent": "0.7",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 4,
                  "totalDescendants": 22,
                  "subtreeDepth": 4,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "52",
                    "parentId": "51",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "shortestPath",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "kind": "static method",
                    "docComment": "Calculates the shortest path. This is done by BFS. This search ensures\r\nthe traveller is allowed to occupy the squares on the way, or returns the\r\nshortest path to the square regardless of terrain if no traveller is\r\nspecified.\r\n\r\n@param from\r\n\t\tThe starting square.\r\n@param to\r\n\t\tThe destination.\r\n@param traveller\r\n\t\tThe traveller attempting to reach the destination. If\r\n\t\ttraveller is set to <code>null</code>, this method will ignore\r\n\t\tterrain and find the shortest path whether it can actually be\r\n\t\treached or not.\r\n@return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n",
                    "metaSrc": "source code",
                    "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                    "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                    "howToUse": "Call this method with the starting square, destination square, and the unit that will traverse the path. It returns a list of directions to follow.",
                    "howItWorks": "The method uses a breadth-first search algorithm to find the shortest path from the start square to the end square, considering the movement capabilities of the given unit.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "80296",
                    "selfTime": "10875",
                    "percent": "0.4",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 11,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "53",
                        "parentId": "52",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "addNewTargets",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "Adds new targets to the list of targets for a ghost in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                        "howToUse": "Call this method with the current unit, target list, visited set, current node, and square to add new targets to the list.",
                        "howItWorks": "The method iterates through all possible directions from the given square, checks if the adjacent square is accessible and not already visited, and adds it as a new target if both conditions are met.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "59853",
                        "selfTime": "24154",
                        "percent": "0.3",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "54",
                            "parentId": "53",
                            "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getSquareAt",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                            "visibility": "public",
                            "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "kind": "method",
                            "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the square adjacent to the current square in a given direction.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.board.Square",
                            "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                            "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                            "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "17006",
                            "selfTime": "11568",
                            "percent": "0.1",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "55",
                            "parentId": "53",
                            "label": "nl.tudelft.jpacman.board.Direction.values()",
                            "className": "nl.tudelft.jpacman.board.Direction",
                            "methodName": "values",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "4546",
                            "selfTime": "2914",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "56",
                            "parentId": "53",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "2477",
                            "selfTime": "2477",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "57",
                            "parentId": "53",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "1457",
                            "selfTime": "1457",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "58",
                        "parentId": "52",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getSquare",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                        "visibility": "private",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "kind": "method",
                        "docComment": "\r\n@return The square for this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square associated with a node.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                        "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                        "howToUse": "Call this method on an instance of Navigation.Node to get its associated square.",
                        "howItWorks": "The method returns the private field 'square' of the current instance.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "1302",
                        "selfTime": "1302",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "59",
                        "parentId": "52",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getPath",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                        "visibility": "private",
                        "simpleName": "getPath()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "kind": "method",
                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "675",
                        "selfTime": "20",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": true,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "60",
                            "parentId": "59",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getPath",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                            "visibility": "private",
                            "simpleName": "getPath()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "kind": "method",
                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "647",
                            "selfTime": "21",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 4,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "61",
                                "parentId": "60",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getPath",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                "visibility": "private",
                                "simpleName": "getPath()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "kind": "method",
                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "617",
                                "selfTime": "24",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 4,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "62",
                                    "parentId": "61",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getPath",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getPath()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "kind": "method",
                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "585",
                                    "selfTime": "21",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "63",
                                        "parentId": "62",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getPath",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getPath()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "kind": "method",
                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "557",
                                        "selfTime": "18",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 2,
                                          "totalDescendants": 4,
                                          "subtreeDepth": 2,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "64",
                                            "parentId": "63",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getPath",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getPath()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "kind": "method",
                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "527",
                                            "selfTime": "25",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 2,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 2,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "65",
                                                "parentId": "64",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getPath",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getPath()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "kind": "method",
                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "496",
                                                "selfTime": "27",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 2,
                                                  "totalDescendants": 4,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "66",
                                                    "parentId": "65",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getPath",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getPath()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "kind": "method",
                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "458",
                                                    "selfTime": "17",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 2,
                                                      "totalDescendants": 4,
                                                      "subtreeDepth": 2,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "67",
                                                        "parentId": "66",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getPath",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getPath()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "kind": "method",
                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "434",
                                                        "selfTime": "27",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 2,
                                                          "totalDescendants": 4,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "68",
                                                            "parentId": "67",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getPath",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getPath()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "kind": "method",
                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "400",
                                                            "selfTime": "21",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 4,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "69",
                                                                "parentId": "68",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getPath",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getPath()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "kind": "method",
                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "370",
                                                                "selfTime": "23",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 4,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "70",
                                                                    "parentId": "69",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getPath",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getPath()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "kind": "method",
                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "340",
                                                                    "selfTime": "18",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 2,
                                                                      "totalDescendants": 4,
                                                                      "subtreeDepth": 2,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": [
                                                                      {
                                                                        "id": "71",
                                                                        "parentId": "70",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getPath",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getPath()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "kind": "method",
                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "314",
                                                                        "selfTime": "23",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 2,
                                                                          "totalDescendants": 4,
                                                                          "subtreeDepth": 2,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": [
                                                                          {
                                                                            "id": "72",
                                                                            "parentId": "71",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getPath",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getPath()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "kind": "method",
                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "283",
                                                                            "selfTime": "22",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 2,
                                                                              "totalDescendants": 4,
                                                                              "subtreeDepth": 2,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": [
                                                                              {
                                                                                "id": "73",
                                                                                "parentId": "72",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getPath",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getPath()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "kind": "method",
                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "249",
                                                                                "selfTime": "20",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 2,
                                                                                  "totalDescendants": 4,
                                                                                  "subtreeDepth": 2,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": [
                                                                                  {
                                                                                    "id": "74",
                                                                                    "parentId": "73",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getPath",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getPath()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "kind": "method",
                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "224",
                                                                                    "selfTime": "15",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 2,
                                                                                      "totalDescendants": 4,
                                                                                      "subtreeDepth": 2,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": [
                                                                                      {
                                                                                        "id": "75",
                                                                                        "parentId": "74",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getPath",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getPath()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "kind": "method",
                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "198",
                                                                                        "selfTime": "23",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 2,
                                                                                          "totalDescendants": 4,
                                                                                          "subtreeDepth": 2,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": [
                                                                                          {
                                                                                            "id": "76",
                                                                                            "parentId": "75",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getPath",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getPath()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "kind": "method",
                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "166",
                                                                                            "selfTime": "15",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 2,
                                                                                              "totalDescendants": 4,
                                                                                              "subtreeDepth": 2,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": [
                                                                                              {
                                                                                                "id": "77",
                                                                                                "parentId": "76",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getPath",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getPath()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "kind": "method",
                                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "144",
                                                                                                "selfTime": "23",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 2,
                                                                                                  "totalDescendants": 4,
                                                                                                  "subtreeDepth": 2,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": [
                                                                                                  {
                                                                                                    "id": "78",
                                                                                                    "parentId": "77",
                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                    "methodName": "getPath",
                                                                                                    "color": "#4DAF4A",
                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                    "visibility": "private",
                                                                                                    "simpleName": "getPath()",
                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "kind": "method",
                                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                    "metaSrc": "source code",
                                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                    "detailedBehavior": "",
                                                                                                    "flowRepresentation": "",
                                                                                                    "briefSummary": "",
                                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                    "assertions": "",
                                                                                                    "layer": "Logic",
                                                                                                    "time": "113",
                                                                                                    "selfTime": "13",
                                                                                                    "percent": "0.0",
                                                                                                    "isRoot": false,
                                                                                                    "collapsed": true,
                                                                                                    "selected": false,
                                                                                                    "treeStats": {
                                                                                                      "directChildrenCount": 2,
                                                                                                      "totalDescendants": 4,
                                                                                                      "subtreeDepth": 2,
                                                                                                      "level": 25
                                                                                                    },
                                                                                                    "status": {
                                                                                                      "fanOut": false,
                                                                                                      "implementationEntryPoint": false,
                                                                                                      "chainStartPoint": false,
                                                                                                      "recursiveEntryPoint": false,
                                                                                                      "isSummarised": false
                                                                                                    },
                                                                                                    "children": [
                                                                                                      {
                                                                                                        "id": "79",
                                                                                                        "parentId": "78",
                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                        "methodName": "getPath",
                                                                                                        "color": "#4DAF4A",
                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                        "visibility": "private",
                                                                                                        "simpleName": "getPath()",
                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "kind": "method",
                                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                        "metaSrc": "source code",
                                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                        "detailedBehavior": "",
                                                                                                        "flowRepresentation": "",
                                                                                                        "briefSummary": "",
                                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                        "assertions": "",
                                                                                                        "layer": "Logic",
                                                                                                        "time": "92",
                                                                                                        "selfTime": "18",
                                                                                                        "percent": "0.0",
                                                                                                        "isRoot": false,
                                                                                                        "collapsed": true,
                                                                                                        "selected": false,
                                                                                                        "treeStats": {
                                                                                                          "directChildrenCount": 2,
                                                                                                          "totalDescendants": 4,
                                                                                                          "subtreeDepth": 2,
                                                                                                          "level": 26
                                                                                                        },
                                                                                                        "status": {
                                                                                                          "fanOut": false,
                                                                                                          "implementationEntryPoint": false,
                                                                                                          "chainStartPoint": false,
                                                                                                          "recursiveEntryPoint": false,
                                                                                                          "isSummarised": false
                                                                                                        },
                                                                                                        "children": [
                                                                                                          {
                                                                                                            "id": "80",
                                                                                                            "parentId": "79",
                                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                            "methodName": "getPath",
                                                                                                            "color": "#4DAF4A",
                                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                            "visibility": "private",
                                                                                                            "simpleName": "getPath()",
                                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                            "kind": "method",
                                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                            "metaSrc": "source code",
                                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                            "detailedBehavior": "",
                                                                                                            "flowRepresentation": "",
                                                                                                            "briefSummary": "",
                                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                            "assertions": "",
                                                                                                            "layer": "Logic",
                                                                                                            "time": "61",
                                                                                                            "selfTime": "11",
                                                                                                            "percent": "0.0",
                                                                                                            "isRoot": false,
                                                                                                            "collapsed": true,
                                                                                                            "selected": false,
                                                                                                            "treeStats": {
                                                                                                              "directChildrenCount": 2,
                                                                                                              "totalDescendants": 4,
                                                                                                              "subtreeDepth": 2,
                                                                                                              "level": 27
                                                                                                            },
                                                                                                            "status": {
                                                                                                              "fanOut": false,
                                                                                                              "implementationEntryPoint": false,
                                                                                                              "chainStartPoint": false,
                                                                                                              "recursiveEntryPoint": false,
                                                                                                              "isSummarised": false
                                                                                                            },
                                                                                                            "children": [
                                                                                                              {
                                                                                                                "id": "81",
                                                                                                                "parentId": "80",
                                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                "methodName": "getPath",
                                                                                                                "color": "#4DAF4A",
                                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                "visibility": "private",
                                                                                                                "simpleName": "getPath()",
                                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                "kind": "method",
                                                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                                "metaSrc": "source code",
                                                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                "detailedBehavior": "",
                                                                                                                "flowRepresentation": "",
                                                                                                                "briefSummary": "",
                                                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                                "assertions": "",
                                                                                                                "layer": "Logic",
                                                                                                                "time": "41",
                                                                                                                "selfTime": "8",
                                                                                                                "percent": "0.0",
                                                                                                                "isRoot": false,
                                                                                                                "collapsed": true,
                                                                                                                "selected": false,
                                                                                                                "treeStats": {
                                                                                                                  "directChildrenCount": 2,
                                                                                                                  "totalDescendants": 4,
                                                                                                                  "subtreeDepth": 2,
                                                                                                                  "level": 28
                                                                                                                },
                                                                                                                "status": {
                                                                                                                  "fanOut": false,
                                                                                                                  "implementationEntryPoint": false,
                                                                                                                  "chainStartPoint": false,
                                                                                                                  "recursiveEntryPoint": false,
                                                                                                                  "isSummarised": false
                                                                                                                },
                                                                                                                "children": [
                                                                                                                  {
                                                                                                                    "id": "82",
                                                                                                                    "parentId": "81",
                                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                    "methodName": "getPath",
                                                                                                                    "color": "#4DAF4A",
                                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                    "visibility": "private",
                                                                                                                    "simpleName": "getPath()",
                                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                    "kind": "method",
                                                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                                    "metaSrc": "source code",
                                                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                    "detailedBehavior": "",
                                                                                                                    "flowRepresentation": "",
                                                                                                                    "briefSummary": "",
                                                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                                    "assertions": "",
                                                                                                                    "layer": "Logic",
                                                                                                                    "time": "30",
                                                                                                                    "selfTime": "5",
                                                                                                                    "percent": "0.0",
                                                                                                                    "isRoot": false,
                                                                                                                    "collapsed": true,
                                                                                                                    "selected": false,
                                                                                                                    "treeStats": {
                                                                                                                      "directChildrenCount": 2,
                                                                                                                      "totalDescendants": 3,
                                                                                                                      "subtreeDepth": 2,
                                                                                                                      "level": 29
                                                                                                                    },
                                                                                                                    "status": {
                                                                                                                      "fanOut": false,
                                                                                                                      "implementationEntryPoint": false,
                                                                                                                      "chainStartPoint": false,
                                                                                                                      "recursiveEntryPoint": false,
                                                                                                                      "isSummarised": false
                                                                                                                    },
                                                                                                                    "children": [
                                                                                                                      {
                                                                                                                        "id": "83",
                                                                                                                        "parentId": "82",
                                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                        "methodName": "getPath",
                                                                                                                        "color": "#4DAF4A",
                                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                        "visibility": "private",
                                                                                                                        "simpleName": "getPath()",
                                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                        "kind": "method",
                                                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                                        "metaSrc": "source code",
                                                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                        "detailedBehavior": "",
                                                                                                                        "flowRepresentation": "",
                                                                                                                        "briefSummary": "",
                                                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                                        "assertions": "",
                                                                                                                        "layer": "Logic",
                                                                                                                        "time": "22",
                                                                                                                        "selfTime": "9",
                                                                                                                        "percent": "0.0",
                                                                                                                        "isRoot": false,
                                                                                                                        "collapsed": true,
                                                                                                                        "selected": false,
                                                                                                                        "treeStats": {
                                                                                                                          "directChildrenCount": 1,
                                                                                                                          "totalDescendants": 3,
                                                                                                                          "subtreeDepth": 2,
                                                                                                                          "level": 30
                                                                                                                        },
                                                                                                                        "status": {
                                                                                                                          "fanOut": false,
                                                                                                                          "implementationEntryPoint": false,
                                                                                                                          "chainStartPoint": false,
                                                                                                                          "recursiveEntryPoint": false,
                                                                                                                          "isSummarised": false
                                                                                                                        },
                                                                                                                        "children": [
                                                                                                                          {
                                                                                                                            "id": "84",
                                                                                                                            "parentId": "83",
                                                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                            "methodName": "getPath",
                                                                                                                            "color": "#4DAF4A",
                                                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                            "visibility": "private",
                                                                                                                            "simpleName": "getPath()",
                                                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                            "kind": "method",
                                                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                                            "metaSrc": "source code",
                                                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                            "detailedBehavior": "",
                                                                                                                            "flowRepresentation": "",
                                                                                                                            "briefSummary": "",
                                                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                                            "assertions": "",
                                                                                                                            "layer": "Logic",
                                                                                                                            "time": "10",
                                                                                                                            "selfTime": "4",
                                                                                                                            "percent": "0.0",
                                                                                                                            "isRoot": false,
                                                                                                                            "collapsed": true,
                                                                                                                            "selected": false,
                                                                                                                            "treeStats": {
                                                                                                                              "directChildrenCount": 2,
                                                                                                                              "totalDescendants": 2,
                                                                                                                              "subtreeDepth": 2,
                                                                                                                              "level": 31
                                                                                                                            },
                                                                                                                            "status": {
                                                                                                                              "fanOut": false,
                                                                                                                              "implementationEntryPoint": false,
                                                                                                                              "chainStartPoint": false,
                                                                                                                              "recursiveEntryPoint": false,
                                                                                                                              "isSummarised": false
                                                                                                                            },
                                                                                                                            "children": [
                                                                                                                              {
                                                                                                                                "id": "85",
                                                                                                                                "parentId": "84",
                                                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                                "methodName": "getPath",
                                                                                                                                "color": "#4DAF4A",
                                                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                                "visibility": "private",
                                                                                                                                "simpleName": "getPath()",
                                                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                                "kind": "method",
                                                                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                                                "metaSrc": "source code",
                                                                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                                "detailedBehavior": "",
                                                                                                                                "flowRepresentation": "",
                                                                                                                                "briefSummary": "",
                                                                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                                                "assertions": "",
                                                                                                                                "layer": "Logic",
                                                                                                                                "time": "3",
                                                                                                                                "selfTime": "1",
                                                                                                                                "percent": "0.0",
                                                                                                                                "isRoot": false,
                                                                                                                                "collapsed": true,
                                                                                                                                "selected": false,
                                                                                                                                "treeStats": {
                                                                                                                                  "directChildrenCount": 0,
                                                                                                                                  "totalDescendants": 0,
                                                                                                                                  "subtreeDepth": 1,
                                                                                                                                  "level": 32
                                                                                                                                },
                                                                                                                                "status": {
                                                                                                                                  "fanOut": false,
                                                                                                                                  "implementationEntryPoint": false,
                                                                                                                                  "chainStartPoint": false,
                                                                                                                                  "recursiveEntryPoint": false,
                                                                                                                                  "isSummarised": false
                                                                                                                                },
                                                                                                                                "children": []
                                                                                                                              },
                                                                                                                              {
                                                                                                                                "id": "86",
                                                                                                                                "parentId": "84",
                                                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                                "methodName": "getDirection",
                                                                                                                                "color": "#4DAF4A",
                                                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                                "visibility": "private",
                                                                                                                                "simpleName": "getDirection()",
                                                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                                "kind": "method",
                                                                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                                                "metaSrc": "source code",
                                                                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                                                                "detailedBehavior": "",
                                                                                                                                "flowRepresentation": "",
                                                                                                                                "briefSummary": "",
                                                                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                                                "assertions": "",
                                                                                                                                "layer": "Logic",
                                                                                                                                "time": "1",
                                                                                                                                "selfTime": "1",
                                                                                                                                "percent": "0.0",
                                                                                                                                "isRoot": false,
                                                                                                                                "collapsed": true,
                                                                                                                                "selected": false,
                                                                                                                                "treeStats": {
                                                                                                                                  "directChildrenCount": 0,
                                                                                                                                  "totalDescendants": 0,
                                                                                                                                  "subtreeDepth": 1,
                                                                                                                                  "level": 32
                                                                                                                                },
                                                                                                                                "status": {
                                                                                                                                  "fanOut": false,
                                                                                                                                  "implementationEntryPoint": false,
                                                                                                                                  "chainStartPoint": false,
                                                                                                                                  "recursiveEntryPoint": false,
                                                                                                                                  "isSummarised": false
                                                                                                                                },
                                                                                                                                "children": []
                                                                                                                              }
                                                                                                                            ]
                                                                                                                          }
                                                                                                                        ]
                                                                                                                      },
                                                                                                                      {
                                                                                                                        "id": "87",
                                                                                                                        "parentId": "82",
                                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                        "methodName": "getDirection",
                                                                                                                        "color": "#4DAF4A",
                                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                        "visibility": "private",
                                                                                                                        "simpleName": "getDirection()",
                                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                        "kind": "method",
                                                                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                                        "metaSrc": "source code",
                                                                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                                                                        "detailedBehavior": "",
                                                                                                                        "flowRepresentation": "",
                                                                                                                        "briefSummary": "",
                                                                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                                        "assertions": "",
                                                                                                                        "layer": "Logic",
                                                                                                                        "time": "1",
                                                                                                                        "selfTime": "1",
                                                                                                                        "percent": "0.0",
                                                                                                                        "isRoot": false,
                                                                                                                        "collapsed": true,
                                                                                                                        "selected": false,
                                                                                                                        "treeStats": {
                                                                                                                          "directChildrenCount": 0,
                                                                                                                          "totalDescendants": 0,
                                                                                                                          "subtreeDepth": 1,
                                                                                                                          "level": 30
                                                                                                                        },
                                                                                                                        "status": {
                                                                                                                          "fanOut": false,
                                                                                                                          "implementationEntryPoint": false,
                                                                                                                          "chainStartPoint": false,
                                                                                                                          "recursiveEntryPoint": false,
                                                                                                                          "isSummarised": false
                                                                                                                        },
                                                                                                                        "children": []
                                                                                                                      }
                                                                                                                    ]
                                                                                                                  },
                                                                                                                  {
                                                                                                                    "id": "88",
                                                                                                                    "parentId": "81",
                                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                    "methodName": "getDirection",
                                                                                                                    "color": "#4DAF4A",
                                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                    "visibility": "private",
                                                                                                                    "simpleName": "getDirection()",
                                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                    "kind": "method",
                                                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                                    "metaSrc": "source code",
                                                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                                                    "detailedBehavior": "",
                                                                                                                    "flowRepresentation": "",
                                                                                                                    "briefSummary": "",
                                                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                                    "assertions": "",
                                                                                                                    "layer": "Logic",
                                                                                                                    "time": "1",
                                                                                                                    "selfTime": "1",
                                                                                                                    "percent": "0.0",
                                                                                                                    "isRoot": false,
                                                                                                                    "collapsed": true,
                                                                                                                    "selected": false,
                                                                                                                    "treeStats": {
                                                                                                                      "directChildrenCount": 0,
                                                                                                                      "totalDescendants": 0,
                                                                                                                      "subtreeDepth": 1,
                                                                                                                      "level": 29
                                                                                                                    },
                                                                                                                    "status": {
                                                                                                                      "fanOut": false,
                                                                                                                      "implementationEntryPoint": false,
                                                                                                                      "chainStartPoint": false,
                                                                                                                      "recursiveEntryPoint": false,
                                                                                                                      "isSummarised": false
                                                                                                                    },
                                                                                                                    "children": []
                                                                                                                  }
                                                                                                                ]
                                                                                                              },
                                                                                                              {
                                                                                                                "id": "89",
                                                                                                                "parentId": "80",
                                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                "methodName": "getDirection",
                                                                                                                "color": "#4DAF4A",
                                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                "visibility": "private",
                                                                                                                "simpleName": "getDirection()",
                                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                "kind": "method",
                                                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                                "metaSrc": "source code",
                                                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                                                "detailedBehavior": "",
                                                                                                                "flowRepresentation": "",
                                                                                                                "briefSummary": "",
                                                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                                "assertions": "",
                                                                                                                "layer": "Logic",
                                                                                                                "time": "2",
                                                                                                                "selfTime": "2",
                                                                                                                "percent": "0.0",
                                                                                                                "isRoot": false,
                                                                                                                "collapsed": true,
                                                                                                                "selected": false,
                                                                                                                "treeStats": {
                                                                                                                  "directChildrenCount": 0,
                                                                                                                  "totalDescendants": 0,
                                                                                                                  "subtreeDepth": 1,
                                                                                                                  "level": 28
                                                                                                                },
                                                                                                                "status": {
                                                                                                                  "fanOut": false,
                                                                                                                  "implementationEntryPoint": false,
                                                                                                                  "chainStartPoint": false,
                                                                                                                  "recursiveEntryPoint": false,
                                                                                                                  "isSummarised": false
                                                                                                                },
                                                                                                                "children": []
                                                                                                              }
                                                                                                            ]
                                                                                                          },
                                                                                                          {
                                                                                                            "id": "90",
                                                                                                            "parentId": "79",
                                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                            "methodName": "getDirection",
                                                                                                            "color": "#4DAF4A",
                                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                            "visibility": "private",
                                                                                                            "simpleName": "getDirection()",
                                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                            "kind": "method",
                                                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                            "metaSrc": "source code",
                                                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                                                            "detailedBehavior": "",
                                                                                                            "flowRepresentation": "",
                                                                                                            "briefSummary": "",
                                                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                            "assertions": "",
                                                                                                            "layer": "Logic",
                                                                                                            "time": "5",
                                                                                                            "selfTime": "5",
                                                                                                            "percent": "0.0",
                                                                                                            "isRoot": false,
                                                                                                            "collapsed": true,
                                                                                                            "selected": false,
                                                                                                            "treeStats": {
                                                                                                              "directChildrenCount": 0,
                                                                                                              "totalDescendants": 0,
                                                                                                              "subtreeDepth": 1,
                                                                                                              "level": 27
                                                                                                            },
                                                                                                            "status": {
                                                                                                              "fanOut": false,
                                                                                                              "implementationEntryPoint": false,
                                                                                                              "chainStartPoint": false,
                                                                                                              "recursiveEntryPoint": false,
                                                                                                              "isSummarised": false
                                                                                                            },
                                                                                                            "children": []
                                                                                                          }
                                                                                                        ]
                                                                                                      },
                                                                                                      {
                                                                                                        "id": "91",
                                                                                                        "parentId": "78",
                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                        "methodName": "getDirection",
                                                                                                        "color": "#4DAF4A",
                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                        "visibility": "private",
                                                                                                        "simpleName": "getDirection()",
                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                        "kind": "method",
                                                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                        "metaSrc": "source code",
                                                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                                                        "detailedBehavior": "",
                                                                                                        "flowRepresentation": "",
                                                                                                        "briefSummary": "",
                                                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                        "assertions": "",
                                                                                                        "layer": "Logic",
                                                                                                        "time": "1",
                                                                                                        "selfTime": "1",
                                                                                                        "percent": "0.0",
                                                                                                        "isRoot": false,
                                                                                                        "collapsed": true,
                                                                                                        "selected": false,
                                                                                                        "treeStats": {
                                                                                                          "directChildrenCount": 0,
                                                                                                          "totalDescendants": 0,
                                                                                                          "subtreeDepth": 1,
                                                                                                          "level": 26
                                                                                                        },
                                                                                                        "status": {
                                                                                                          "fanOut": false,
                                                                                                          "implementationEntryPoint": false,
                                                                                                          "chainStartPoint": false,
                                                                                                          "recursiveEntryPoint": false,
                                                                                                          "isSummarised": false
                                                                                                        },
                                                                                                        "children": []
                                                                                                      }
                                                                                                    ]
                                                                                                  },
                                                                                                  {
                                                                                                    "id": "92",
                                                                                                    "parentId": "77",
                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                    "methodName": "getDirection",
                                                                                                    "color": "#4DAF4A",
                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                    "visibility": "private",
                                                                                                    "simpleName": "getDirection()",
                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                    "kind": "method",
                                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                    "metaSrc": "source code",
                                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                                    "detailedBehavior": "",
                                                                                                    "flowRepresentation": "",
                                                                                                    "briefSummary": "",
                                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                    "assertions": "",
                                                                                                    "layer": "Logic",
                                                                                                    "time": "2",
                                                                                                    "selfTime": "2",
                                                                                                    "percent": "0.0",
                                                                                                    "isRoot": false,
                                                                                                    "collapsed": true,
                                                                                                    "selected": false,
                                                                                                    "treeStats": {
                                                                                                      "directChildrenCount": 0,
                                                                                                      "totalDescendants": 0,
                                                                                                      "subtreeDepth": 1,
                                                                                                      "level": 25
                                                                                                    },
                                                                                                    "status": {
                                                                                                      "fanOut": false,
                                                                                                      "implementationEntryPoint": false,
                                                                                                      "chainStartPoint": false,
                                                                                                      "recursiveEntryPoint": false,
                                                                                                      "isSummarised": false
                                                                                                    },
                                                                                                    "children": []
                                                                                                  }
                                                                                                ]
                                                                                              },
                                                                                              {
                                                                                                "id": "93",
                                                                                                "parentId": "76",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getDirection",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getDirection()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "kind": "method",
                                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "1",
                                                                                                "selfTime": "1",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 0,
                                                                                                  "totalDescendants": 0,
                                                                                                  "subtreeDepth": 1,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": []
                                                                                              }
                                                                                            ]
                                                                                          },
                                                                                          {
                                                                                            "id": "94",
                                                                                            "parentId": "75",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getDirection",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getDirection()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                            "kind": "method",
                                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "3",
                                                                                            "selfTime": "3",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 0,
                                                                                              "totalDescendants": 0,
                                                                                              "subtreeDepth": 1,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": []
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      {
                                                                                        "id": "95",
                                                                                        "parentId": "74",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getDirection",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getDirection()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                        "kind": "method",
                                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "4",
                                                                                        "selfTime": "4",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 0,
                                                                                          "totalDescendants": 0,
                                                                                          "subtreeDepth": 1,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": []
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  {
                                                                                    "id": "96",
                                                                                    "parentId": "73",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getDirection",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getDirection()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "kind": "method",
                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "2",
                                                                                    "selfTime": "2",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 0,
                                                                                      "totalDescendants": 0,
                                                                                      "subtreeDepth": 1,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": []
                                                                                  }
                                                                                ]
                                                                              },
                                                                              {
                                                                                "id": "97",
                                                                                "parentId": "72",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getDirection",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getDirection()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "kind": "method",
                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "3",
                                                                                "selfTime": "3",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 0,
                                                                                  "totalDescendants": 0,
                                                                                  "subtreeDepth": 1,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": []
                                                                              }
                                                                            ]
                                                                          },
                                                                          {
                                                                            "id": "98",
                                                                            "parentId": "71",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getDirection",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getDirection()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "kind": "method",
                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "4",
                                                                            "selfTime": "4",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 0,
                                                                              "totalDescendants": 0,
                                                                              "subtreeDepth": 1,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "id": "99",
                                                                        "parentId": "70",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getDirection",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getDirection()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "kind": "method",
                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "1",
                                                                        "selfTime": "1",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 0,
                                                                          "totalDescendants": 0,
                                                                          "subtreeDepth": 1,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "id": "100",
                                                                    "parentId": "69",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getDirection",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getDirection()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "kind": "method",
                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "3",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "101",
                                                                "parentId": "68",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getDirection",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getDirection()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "kind": "method",
                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "2",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "102",
                                                            "parentId": "67",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getDirection",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getDirection()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "kind": "method",
                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the current direction of a ghost in the game.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "4",
                                                            "selfTime": "4",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "id": "103",
                                                        "parentId": "66",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getDirection",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getDirection()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "kind": "method",
                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the current direction of a ghost in the game.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "3",
                                                        "selfTime": "3",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 0,
                                                          "totalDescendants": 0,
                                                          "subtreeDepth": 1,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": []
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "id": "104",
                                                    "parentId": "65",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getDirection",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getDirection()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "kind": "method",
                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the current direction of a ghost in the game.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "2",
                                                    "selfTime": "2",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 0,
                                                      "totalDescendants": 0,
                                                      "subtreeDepth": 1,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": []
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "105",
                                                "parentId": "64",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getDirection",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getDirection()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the current direction of a ghost in the game.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "3",
                                                "selfTime": "3",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 0,
                                                  "totalDescendants": 0,
                                                  "subtreeDepth": 1,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "id": "106",
                                            "parentId": "63",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getDirection",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getDirection()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "kind": "method",
                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the current direction of a ghost in the game.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A Direction object representing the current direction of the ghost.",
                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "2",
                                            "selfTime": "2",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 0,
                                              "totalDescendants": 0,
                                              "subtreeDepth": 1,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": []
                                          }
                                        ]
                                      },
                                      {
                                        "id": "107",
                                        "parentId": "62",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getDirection",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getDirection()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the current direction of a ghost in the game.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A Direction object representing the current direction of the ghost.",
                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "4",
                                        "selfTime": "4",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "108",
                                    "parentId": "61",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getDirection",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getDirection()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "kind": "method",
                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the current direction of a ghost in the game.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A Direction object representing the current direction of the ghost.",
                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "1",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "109",
                                "parentId": "60",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getDirection",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                "visibility": "private",
                                "simpleName": "getDirection()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "kind": "method",
                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the current direction of a ghost in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A Direction object representing the current direction of the ghost.",
                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "2",
                                "selfTime": "2",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "110",
                            "parentId": "59",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getDirection",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                            "visibility": "private",
                            "simpleName": "getDirection()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "kind": "method",
                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the current direction of a ghost in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A Direction object representing the current direction of the ghost.",
                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "5",
                            "selfTime": "5",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "111",
                    "parentId": "51",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "findNearest",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "kind": "static method",
                    "docComment": "Finds the nearest unit of the given type and returns its location. This\r\nmethod will perform a breadth first search starting from the given\r\nsquare.\r\n\r\n@param type\r\n\t\tThe type of unit to search for.\r\n@param currentLocation\r\n\t\tThe starting location for the search.\r\n@return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n",
                    "metaSrc": "source code",
                    "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                    "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                    "howToUse": "Call this method with the desired unit type and the current square to find the nearest unit of that type.",
                    "howItWorks": "The method uses a breadth-first search (BFS) algorithm to explore squares in increasing distance from the current location until it finds a unit of the specified type or exhausts all possibilities.",
                    "assertions": [
                      {
                        "code": "assert unit.hasSquare();",
                        "description": "Ensures that if a unit is found, it has a square."
                      }
                    ],
                    "layer": "",
                    "time": "64352",
                    "selfTime": "20150",
                    "percent": "0.3",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 4,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "112",
                        "parentId": "111",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "12199",
                        "selfTime": "8345",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "113",
                        "parentId": "111",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "findUnit",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                        "visibility": "public",
                        "simpleName": "findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "Determines whether a square has an occupant of a certain type.\r\n\r\n@param type\r\n\t\tThe type to search for.\r\n@param square\r\n\t\tThe square to search.\r\n@param <T>\r\n\t\tthe type of unit we searched for.\r\n@return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n",
                        "metaSrc": "source code",
                        "description": "Finds a unit of a specific type in a given square on the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                        "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                        "howToUse": "Call this method with the desired unit class type and the square where you want to search for units.",
                        "howItWorks": "The method iterates through all units occupying the given square and checks if any of them match the specified type. If a match is found, it returns that unit; otherwise, it returns null.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "11900",
                        "selfTime": "5499",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 1,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "114",
                            "parentId": "113",
                            "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getOccupants",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                            "visibility": "public",
                            "simpleName": "getOccupants()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "kind": "method",
                            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the list of units occupying a square in the game board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An immutable list of units occupying the square.",
                            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "3371",
                            "selfTime": "1992",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "115",
                        "parentId": "111",
                        "label": "nl.tudelft.jpacman.board.Direction.values()",
                        "className": "nl.tudelft.jpacman.board.Direction",
                        "methodName": "values",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "3282",
                        "selfTime": "2022",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "116",
                    "parentId": "51",
                    "label": "nl.tudelft.jpacman.board.Unit.squaresAheadOf()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "squaresAheadOf",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * A utility method for implementing the ghost AI.\r\n *\r\n * @param amountToLookAhead\r\n * \t\tthe amount of squares to follow this units direction in.\r\n * @return The square amountToLookAhead spaces in front of this unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square squaresAheadOf(int amountToLookAhead) {\r\n    nl.tudelft.jpacman.board.Direction targetDirection = this.getDirection();\r\n    nl.tudelft.jpacman.board.Square destination = this.getSquare();\r\n    for (int i = 0; i < amountToLookAhead; i++) {\r\n        destination = destination.getSquareAt(targetDirection);\r\n    }\r\n    return destination;\r\n}",
                    "visibility": "public",
                    "simpleName": "squaresAheadOf(int)",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.squaresAheadOf(int)",
                    "kind": "method",
                    "docComment": "A utility method for implementing the ghost AI.\r\n\r\n@param amountToLookAhead\r\n\t\tthe amount of squares to follow this units direction in.\r\n@return The square amountToLookAhead spaces in front of this unit.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that is a specified number of steps ahead in the current direction.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square that is a specified number of steps ahead in the current direction.",
                    "reason": "This method is used to determine the next position a unit will move to based on its current direction and the number of squares it intends to move.",
                    "howToUse": "Call this method with the number of squares you want to look ahead. It returns the square that many steps in the unit's current direction.",
                    "howItWorks": "The method retrieves the current direction and the current square, then iterates through the specified number of times, moving to the next square in the current direction each time.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "191",
                    "selfTime": "112",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 3,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "117",
                        "parentId": "116",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "59",
                        "selfTime": "41",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "118",
                        "parentId": "116",
                        "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getDirection",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                        "visibility": "public",
                        "simpleName": "getDirection()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "kind": "method",
                        "docComment": "Returns the current direction this unit is facing.\r\n\r\n@return The current direction this unit is facing.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the current direction of a unit in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A Direction object representing the current direction of the unit.",
                        "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                        "howToUse": "Call this method on an instance of Unit to get its current movement direction.",
                        "howItWorks": "The method simply returns the value of the 'direction' field of the Unit object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "14",
                        "selfTime": "14",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "119",
                        "parentId": "116",
                        "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getSquare",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "kind": "method",
                        "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square that a unit is currently occupying.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                        "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                        "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                        "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "6",
                        "selfTime": "6",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "120",
                    "parentId": "51",
                    "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "getSquare",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSquare()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "kind": "method",
                    "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that a unit is currently occupying.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                    "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                    "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                    "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "83",
                    "selfTime": "83",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "121",
                "parentId": "3",
                "label": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
                "className": "nl.tudelft.jpacman.npc.ghost.Clyde",
                "methodName": "nextAiMove",
                "color": "#4DAF4A",
                "packageName": "nl.tudelft.jpacman.npc.ghost",
                "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Clyde has two basic AIs, one for when he's far from Pac-Man, and one for\r\n * when he is near to Pac-Man.\r\n * When Clyde is far away from Pac-Man (beyond eight grid spaces),\r\n * Clyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\n * location. However, when Clyde gets within eight grid spaces of Pac-Man,\r\n * he automatically changes his behavior and runs away\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        nl.tudelft.jpacman.board.Direction direction = path.get(0);\r\n        if (path.size() <= nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS) {\r\n            return java.util.Optional.of(direction.opposite());\r\n        }\r\n        return java.util.Optional.of(direction);\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
                "visibility": "public",
                "simpleName": "nextAiMove()",
                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
                "kind": "method",
                "docComment": "{@inheritDoc }\r\n\r\n<p>\r\nClyde has two basic AIs, one for when he's far from Pac-Man, and one for\r\nwhen he is near to Pac-Man. \r\nWhen Clyde is far away from Pac-Man (beyond eight grid spaces),\r\nClyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\nlocation. However, when Clyde gets within eight grid spaces of Pac-Man,\r\nhe automatically changes his behavior and runs away\r\n</p>\r\n",
                "metaSrc": "source code",
                "description": "(no description)",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "84688",
                "selfTime": "251",
                "percent": "0.4",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 4,
                  "totalDescendants": 19,
                  "subtreeDepth": 4,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "122",
                    "parentId": "121",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "findNearest",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "kind": "static method",
                    "docComment": "Finds the nearest unit of the given type and returns its location. This\r\nmethod will perform a breadth first search starting from the given\r\nsquare.\r\n\r\n@param type\r\n\t\tThe type of unit to search for.\r\n@param currentLocation\r\n\t\tThe starting location for the search.\r\n@return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n",
                    "metaSrc": "source code",
                    "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                    "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                    "howToUse": "Call this method with the desired unit type and the current square to find the nearest unit of that type.",
                    "howItWorks": "The method uses a breadth-first search (BFS) algorithm to explore squares in increasing distance from the current location until it finds a unit of the specified type or exhausts all possibilities.",
                    "assertions": [
                      {
                        "code": "assert unit.hasSquare();",
                        "description": "Ensures that if a unit is found, it has a square."
                      }
                    ],
                    "layer": "",
                    "time": "47613",
                    "selfTime": "14759",
                    "percent": "0.2",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 4,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "123",
                        "parentId": "122",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "findUnit",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                        "visibility": "public",
                        "simpleName": "findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "Determines whether a square has an occupant of a certain type.\r\n\r\n@param type\r\n\t\tThe type to search for.\r\n@param square\r\n\t\tThe square to search.\r\n@param <T>\r\n\t\tthe type of unit we searched for.\r\n@return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n",
                        "metaSrc": "source code",
                        "description": "Finds a unit of a specific type in a given square on the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                        "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                        "howToUse": "Call this method with the desired unit class type and the square where you want to search for units.",
                        "howItWorks": "The method iterates through all units occupying the given square and checks if any of them match the specified type. If a match is found, it returns that unit; otherwise, it returns null.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "9192",
                        "selfTime": "4421",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 1,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "124",
                            "parentId": "123",
                            "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getOccupants",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                            "visibility": "public",
                            "simpleName": "getOccupants()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "kind": "method",
                            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the list of units occupying a square in the game board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An immutable list of units occupying the square.",
                            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2547",
                            "selfTime": "1556",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "125",
                        "parentId": "122",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "8714",
                        "selfTime": "5958",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "126",
                        "parentId": "122",
                        "label": "nl.tudelft.jpacman.board.Direction.values()",
                        "className": "nl.tudelft.jpacman.board.Direction",
                        "methodName": "values",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "2154",
                        "selfTime": "1362",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "127",
                    "parentId": "121",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "shortestPath",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "kind": "static method",
                    "docComment": "Calculates the shortest path. This is done by BFS. This search ensures\r\nthe traveller is allowed to occupy the squares on the way, or returns the\r\nshortest path to the square regardless of terrain if no traveller is\r\nspecified.\r\n\r\n@param from\r\n\t\tThe starting square.\r\n@param to\r\n\t\tThe destination.\r\n@param traveller\r\n\t\tThe traveller attempting to reach the destination. If\r\n\t\ttraveller is set to <code>null</code>, this method will ignore\r\n\t\tterrain and find the shortest path whether it can actually be\r\n\t\treached or not.\r\n@return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n",
                    "metaSrc": "source code",
                    "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                    "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                    "howToUse": "Call this method with the starting square, destination square, and the unit that will traverse the path. It returns a list of directions to follow.",
                    "howItWorks": "The method uses a breadth-first search algorithm to find the shortest path from the start square to the end square, considering the movement capabilities of the given unit.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "35512",
                    "selfTime": "4596",
                    "percent": "0.2",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 11,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "128",
                        "parentId": "127",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "addNewTargets",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "Adds new targets to the list of targets for a ghost in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                        "howToUse": "Call this method with the current unit, target list, visited set, current node, and square to add new targets to the list.",
                        "howItWorks": "The method iterates through all possible directions from the given square, checks if the adjacent square is accessible and not already visited, and adds it as a new target if both conditions are met.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "26188",
                        "selfTime": "10681",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "129",
                            "parentId": "128",
                            "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getSquareAt",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                            "visibility": "public",
                            "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "kind": "method",
                            "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the square adjacent to the current square in a given direction.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.board.Square",
                            "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                            "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                            "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "7432",
                            "selfTime": "5115",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "130",
                            "parentId": "128",
                            "label": "nl.tudelft.jpacman.board.Direction.values()",
                            "className": "nl.tudelft.jpacman.board.Direction",
                            "methodName": "values",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "1905",
                            "selfTime": "1194",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "131",
                            "parentId": "128",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "999",
                            "selfTime": "999",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "132",
                            "parentId": "128",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "682",
                            "selfTime": "682",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "133",
                        "parentId": "127",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getSquare",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                        "visibility": "private",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "kind": "method",
                        "docComment": "\r\n@return The square for this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square associated with a node.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                        "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                        "howToUse": "Call this method on an instance of Navigation.Node to get its associated square.",
                        "howItWorks": "The method returns the private field 'square' of the current instance.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "603",
                        "selfTime": "603",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "134",
                        "parentId": "127",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getPath",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                        "visibility": "private",
                        "simpleName": "getPath()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "kind": "method",
                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "486",
                        "selfTime": "14",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": true,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "135",
                            "parentId": "134",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getPath",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                            "visibility": "private",
                            "simpleName": "getPath()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "kind": "method",
                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "462",
                            "selfTime": "10",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 4,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "136",
                                "parentId": "135",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getPath",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                "visibility": "private",
                                "simpleName": "getPath()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "kind": "method",
                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "444",
                                "selfTime": "21",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 4,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "137",
                                    "parentId": "136",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getPath",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getPath()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "kind": "method",
                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "412",
                                    "selfTime": "23",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "138",
                                        "parentId": "137",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getPath",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getPath()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "kind": "method",
                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "374",
                                        "selfTime": "23",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 2,
                                          "totalDescendants": 4,
                                          "subtreeDepth": 2,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "139",
                                            "parentId": "138",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getPath",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getPath()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "kind": "method",
                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "343",
                                            "selfTime": "20",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 2,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 2,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "140",
                                                "parentId": "139",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getPath",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getPath()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "kind": "method",
                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "315",
                                                "selfTime": "16",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 2,
                                                  "totalDescendants": 4,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "141",
                                                    "parentId": "140",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getPath",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getPath()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "kind": "method",
                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "288",
                                                    "selfTime": "30",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 2,
                                                      "totalDescendants": 4,
                                                      "subtreeDepth": 2,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "142",
                                                        "parentId": "141",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getPath",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getPath()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "kind": "method",
                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "245",
                                                        "selfTime": "20",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 2,
                                                          "totalDescendants": 4,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "143",
                                                            "parentId": "142",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getPath",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getPath()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "kind": "method",
                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "218",
                                                            "selfTime": "18",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 4,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "144",
                                                                "parentId": "143",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getPath",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getPath()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "kind": "method",
                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "189",
                                                                "selfTime": "25",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 4,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "145",
                                                                    "parentId": "144",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getPath",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getPath()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "kind": "method",
                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "157",
                                                                    "selfTime": "26",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 2,
                                                                      "totalDescendants": 4,
                                                                      "subtreeDepth": 2,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": [
                                                                      {
                                                                        "id": "146",
                                                                        "parentId": "145",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getPath",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getPath()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "kind": "method",
                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "118",
                                                                        "selfTime": "15",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 2,
                                                                          "totalDescendants": 4,
                                                                          "subtreeDepth": 2,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": [
                                                                          {
                                                                            "id": "147",
                                                                            "parentId": "146",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getPath",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getPath()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "kind": "method",
                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "92",
                                                                            "selfTime": "12",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 2,
                                                                              "totalDescendants": 4,
                                                                              "subtreeDepth": 2,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": [
                                                                              {
                                                                                "id": "148",
                                                                                "parentId": "147",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getPath",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getPath()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "kind": "method",
                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "69",
                                                                                "selfTime": "13",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 2,
                                                                                  "totalDescendants": 4,
                                                                                  "subtreeDepth": 2,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": [
                                                                                  {
                                                                                    "id": "149",
                                                                                    "parentId": "148",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getPath",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getPath()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "kind": "method",
                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "46",
                                                                                    "selfTime": "9",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 2,
                                                                                      "totalDescendants": 3,
                                                                                      "subtreeDepth": 2,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": [
                                                                                      {
                                                                                        "id": "150",
                                                                                        "parentId": "149",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getPath",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getPath()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "kind": "method",
                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "34",
                                                                                        "selfTime": "12",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 1,
                                                                                          "totalDescendants": 3,
                                                                                          "subtreeDepth": 2,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": [
                                                                                          {
                                                                                            "id": "151",
                                                                                            "parentId": "150",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getPath",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getPath()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "kind": "method",
                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "17",
                                                                                            "selfTime": "5",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 2,
                                                                                              "totalDescendants": 3,
                                                                                              "subtreeDepth": 2,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": [
                                                                                              {
                                                                                                "id": "152",
                                                                                                "parentId": "151",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getPath",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getPath()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "kind": "method",
                                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "8",
                                                                                                "selfTime": "3",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 1,
                                                                                                  "totalDescendants": 2,
                                                                                                  "subtreeDepth": 2,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": [
                                                                                                  {
                                                                                                    "id": "153",
                                                                                                    "parentId": "152",
                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                    "methodName": "getPath",
                                                                                                    "color": "#4DAF4A",
                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                    "visibility": "private",
                                                                                                    "simpleName": "getPath()",
                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "kind": "method",
                                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                    "metaSrc": "source code",
                                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                    "detailedBehavior": "",
                                                                                                    "flowRepresentation": "",
                                                                                                    "briefSummary": "",
                                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                    "assertions": "",
                                                                                                    "layer": "Logic",
                                                                                                    "time": "3",
                                                                                                    "selfTime": "1",
                                                                                                    "percent": "0.0",
                                                                                                    "isRoot": false,
                                                                                                    "collapsed": true,
                                                                                                    "selected": false,
                                                                                                    "treeStats": {
                                                                                                      "directChildrenCount": 1,
                                                                                                      "totalDescendants": 1,
                                                                                                      "subtreeDepth": 2,
                                                                                                      "level": 25
                                                                                                    },
                                                                                                    "status": {
                                                                                                      "fanOut": false,
                                                                                                      "implementationEntryPoint": false,
                                                                                                      "chainStartPoint": false,
                                                                                                      "recursiveEntryPoint": false,
                                                                                                      "isSummarised": false
                                                                                                    },
                                                                                                    "children": [
                                                                                                      {
                                                                                                        "id": "154",
                                                                                                        "parentId": "153",
                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                        "methodName": "getPath",
                                                                                                        "color": "#4DAF4A",
                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                        "visibility": "private",
                                                                                                        "simpleName": "getPath()",
                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "kind": "method",
                                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                        "metaSrc": "source code",
                                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                        "detailedBehavior": "",
                                                                                                        "flowRepresentation": "",
                                                                                                        "briefSummary": "",
                                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                        "assertions": "",
                                                                                                        "layer": "Logic",
                                                                                                        "time": "1",
                                                                                                        "selfTime": "1",
                                                                                                        "percent": "0.0",
                                                                                                        "isRoot": false,
                                                                                                        "collapsed": true,
                                                                                                        "selected": false,
                                                                                                        "treeStats": {
                                                                                                          "directChildrenCount": 0,
                                                                                                          "totalDescendants": 0,
                                                                                                          "subtreeDepth": 1,
                                                                                                          "level": 26
                                                                                                        },
                                                                                                        "status": {
                                                                                                          "fanOut": false,
                                                                                                          "implementationEntryPoint": false,
                                                                                                          "chainStartPoint": false,
                                                                                                          "recursiveEntryPoint": false,
                                                                                                          "isSummarised": false
                                                                                                        },
                                                                                                        "children": []
                                                                                                      }
                                                                                                    ]
                                                                                                  }
                                                                                                ]
                                                                                              },
                                                                                              {
                                                                                                "id": "155",
                                                                                                "parentId": "151",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getDirection",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getDirection()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "kind": "method",
                                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "2",
                                                                                                "selfTime": "2",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 0,
                                                                                                  "totalDescendants": 0,
                                                                                                  "subtreeDepth": 1,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": []
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      {
                                                                                        "id": "156",
                                                                                        "parentId": "149",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getDirection",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getDirection()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                        "kind": "method",
                                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "2",
                                                                                        "selfTime": "2",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 0,
                                                                                          "totalDescendants": 0,
                                                                                          "subtreeDepth": 1,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": []
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  {
                                                                                    "id": "157",
                                                                                    "parentId": "148",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getDirection",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getDirection()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "kind": "method",
                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "1",
                                                                                    "selfTime": "1",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 0,
                                                                                      "totalDescendants": 0,
                                                                                      "subtreeDepth": 1,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": []
                                                                                  }
                                                                                ]
                                                                              },
                                                                              {
                                                                                "id": "158",
                                                                                "parentId": "147",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getDirection",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getDirection()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "kind": "method",
                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "4",
                                                                                "selfTime": "4",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 0,
                                                                                  "totalDescendants": 0,
                                                                                  "subtreeDepth": 1,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": []
                                                                              }
                                                                            ]
                                                                          },
                                                                          {
                                                                            "id": "159",
                                                                            "parentId": "146",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getDirection",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getDirection()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "kind": "method",
                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "2",
                                                                            "selfTime": "2",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 0,
                                                                              "totalDescendants": 0,
                                                                              "subtreeDepth": 1,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "id": "160",
                                                                        "parentId": "145",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getDirection",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getDirection()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "kind": "method",
                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "3",
                                                                        "selfTime": "3",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 0,
                                                                          "totalDescendants": 0,
                                                                          "subtreeDepth": 1,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "id": "161",
                                                                    "parentId": "144",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getDirection",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getDirection()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "kind": "method",
                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "5",
                                                                    "selfTime": "5",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "162",
                                                                "parentId": "143",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getDirection",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getDirection()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "kind": "method",
                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "4",
                                                                "selfTime": "4",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "163",
                                                            "parentId": "142",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getDirection",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getDirection()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "kind": "method",
                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the current direction of a ghost in the game.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "5",
                                                            "selfTime": "5",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "id": "164",
                                                        "parentId": "141",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getDirection",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getDirection()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "kind": "method",
                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the current direction of a ghost in the game.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "7",
                                                        "selfTime": "7",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 0,
                                                          "totalDescendants": 0,
                                                          "subtreeDepth": 1,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": []
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "id": "165",
                                                    "parentId": "140",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getDirection",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getDirection()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "kind": "method",
                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the current direction of a ghost in the game.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "2",
                                                    "selfTime": "2",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 0,
                                                      "totalDescendants": 0,
                                                      "subtreeDepth": 1,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": []
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "166",
                                                "parentId": "139",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getDirection",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getDirection()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the current direction of a ghost in the game.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "5",
                                                "selfTime": "5",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 0,
                                                  "totalDescendants": 0,
                                                  "subtreeDepth": 1,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "id": "167",
                                            "parentId": "138",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getDirection",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getDirection()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "kind": "method",
                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the current direction of a ghost in the game.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A Direction object representing the current direction of the ghost.",
                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "5",
                                            "selfTime": "5",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 0,
                                              "totalDescendants": 0,
                                              "subtreeDepth": 1,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": []
                                          }
                                        ]
                                      },
                                      {
                                        "id": "168",
                                        "parentId": "137",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getDirection",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getDirection()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the current direction of a ghost in the game.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A Direction object representing the current direction of the ghost.",
                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "7",
                                        "selfTime": "7",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "169",
                                    "parentId": "136",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getDirection",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getDirection()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "kind": "method",
                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the current direction of a ghost in the game.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A Direction object representing the current direction of the ghost.",
                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "5",
                                    "selfTime": "5",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "170",
                                "parentId": "135",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getDirection",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                "visibility": "private",
                                "simpleName": "getDirection()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "kind": "method",
                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the current direction of a ghost in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A Direction object representing the current direction of the ghost.",
                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "3",
                                "selfTime": "3",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "171",
                            "parentId": "134",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getDirection",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                            "visibility": "private",
                            "simpleName": "getDirection()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "kind": "method",
                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the current direction of a ghost in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A Direction object representing the current direction of the ghost.",
                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "7",
                            "selfTime": "7",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "172",
                    "parentId": "121",
                    "label": "nl.tudelft.jpacman.board.Direction.opposite()",
                    "className": "nl.tudelft.jpacman.board.Direction",
                    "methodName": "opposite",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n *\r\n * @return The direction that is opposite to this direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction opposite() {\r\n    switch (this) {\r\n        case NORTH :\r\n            return nl.tudelft.jpacman.board.Direction.SOUTH;\r\n        case SOUTH :\r\n            return nl.tudelft.jpacman.board.Direction.NORTH;\r\n        case WEST :\r\n            return nl.tudelft.jpacman.board.Direction.EAST;\r\n        case EAST :\r\n            return nl.tudelft.jpacman.board.Direction.WEST;\r\n        default :\r\n            throw new java.lang.IllegalStateException(\"Received an unknown enum value.\");\r\n    }\r\n}",
                    "visibility": "public",
                    "simpleName": "opposite()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Direction.opposite()",
                    "kind": "method",
                    "docComment": "\r\n@return The direction that is opposite to this direction.\r\n",
                    "metaSrc": "source code",
                    "description": "Returns the opposite direction of the current direction.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Direction - The opposite direction of the current direction.",
                    "reason": "This method is used to determine the opposite direction in a game like Pacman, where knowing the opposite direction is necessary for movement logic.",
                    "howToUse": "Call this method on an instance of nl.tudelft.jpacman.board.Direction to get its opposite direction.",
                    "howItWorks": "The method uses a switch statement to map each direction to its opposite. For example, NORTH maps to SOUTH, and EAST maps to WEST.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "1107",
                    "selfTime": "1099",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "173",
                    "parentId": "121",
                    "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "getSquare",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSquare()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "kind": "method",
                    "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that a unit is currently occupying.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                    "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                    "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                    "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "62",
                    "selfTime": "62",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "174",
                "parentId": "3",
                "label": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
                "className": "nl.tudelft.jpacman.npc.ghost.Blinky",
                "methodName": "nextAiMove",
                "color": "#4DAF4A",
                "packageName": "nl.tudelft.jpacman.npc.ghost",
                "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling in their home corners (Blinky:\r\n * top-right, Pinky: top-left, Inky: bottom-right, Clyde: bottom-left),\r\n * Blinky will attempt to shorten the distance between Pac-Man and himself.\r\n * If he has to choose between shortening the horizontal or vertical\r\n * distance, he will choose to shorten whichever is greatest. For example,\r\n * if Pac-Man is four grid spaces to the left, and seven grid spaces above\r\n * Blinky, he'll try to move up towards Pac-Man before he moves to the left.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    // TODO Blinky should patrol his corner every once in a while\r\n    // TODO Implement his actual behaviour instead of simply chasing.\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
                "visibility": "public",
                "simpleName": "nextAiMove()",
                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
                "kind": "method",
                "docComment": "Calculates the shortest path from this ghost to the nearest player and returns the first direction of that path. If no player is found or no path can be calculated, it returns an empty Optional.",
                "metaSrc": "source code",
                "description": "Calculates the next AI move for Blinky in a Pacman game.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "An Optional containing the next direction for Blinky's AI move, or an empty Optional if no valid move can be determined.",
                "reason": "",
                "howToUse": "",
                "howItWorks": "Finds the nearest player, calculates the shortest path to that player, and returns the first direction of that path. If no player is found or no path can be calculated, it returns an empty Optional.",
                "assertions": "",
                "layer": "",
                "time": "82400",
                "selfTime": "217",
                "percent": "0.4",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 3,
                  "totalDescendants": 18,
                  "subtreeDepth": 4,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "175",
                    "parentId": "174",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "findNearest",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                    "kind": "static method",
                    "docComment": "Finds the nearest unit of the given type and returns its location. This\r\nmethod will perform a breadth first search starting from the given\r\nsquare.\r\n\r\n@param type\r\n\t\tThe type of unit to search for.\r\n@param currentLocation\r\n\t\tThe starting location for the search.\r\n@return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n",
                    "metaSrc": "source code",
                    "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                    "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                    "howToUse": "Call this method with the desired unit type and the current square to find the nearest unit of that type.",
                    "howItWorks": "The method uses a breadth-first search (BFS) algorithm to explore squares in increasing distance from the current location until it finds a unit of the specified type or exhausts all possibilities.",
                    "assertions": [
                      {
                        "code": "assert unit.hasSquare();",
                        "description": "Ensures that if a unit is found, it has a square."
                      }
                    ],
                    "layer": "",
                    "time": "47138",
                    "selfTime": "14969",
                    "percent": "0.2",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 4,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "176",
                        "parentId": "175",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "findUnit",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                        "visibility": "public",
                        "simpleName": "findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(java.lang.Class,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "Determines whether a square has an occupant of a certain type.\r\n\r\n@param type\r\n\t\tThe type to search for.\r\n@param square\r\n\t\tThe square to search.\r\n@param <T>\r\n\t\tthe type of unit we searched for.\r\n@return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n",
                        "metaSrc": "source code",
                        "description": "Finds a unit of a specific type in a given square on the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                        "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                        "howToUse": "Call this method with the desired unit class type and the square where you want to search for units.",
                        "howItWorks": "The method iterates through all units occupying the given square and checks if any of them match the specified type. If a match is found, it returns that unit; otherwise, it returns null.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "8931",
                        "selfTime": "4079",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 1,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "177",
                            "parentId": "176",
                            "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getOccupants",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                            "visibility": "public",
                            "simpleName": "getOccupants()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "kind": "method",
                            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the list of units occupying a square in the game board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An immutable list of units occupying the square.",
                            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2572",
                            "selfTime": "1588",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "178",
                        "parentId": "175",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "8806",
                        "selfTime": "6069",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "179",
                        "parentId": "175",
                        "label": "nl.tudelft.jpacman.board.Direction.values()",
                        "className": "nl.tudelft.jpacman.board.Direction",
                        "methodName": "values",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "2366",
                        "selfTime": "1531",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "180",
                    "parentId": "174",
                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                    "methodName": "shortestPath",
                    "color": "#4DAF4A",
                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                    "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                    "visibility": "public",
                    "simpleName": "shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Unit)",
                    "kind": "static method",
                    "docComment": "Calculates the shortest path. This is done by BFS. This search ensures\r\nthe traveller is allowed to occupy the squares on the way, or returns the\r\nshortest path to the square regardless of terrain if no traveller is\r\nspecified.\r\n\r\n@param from\r\n\t\tThe starting square.\r\n@param to\r\n\t\tThe destination.\r\n@param traveller\r\n\t\tThe traveller attempting to reach the destination. If\r\n\t\ttraveller is set to <code>null</code>, this method will ignore\r\n\t\tterrain and find the shortest path whether it can actually be\r\n\t\treached or not.\r\n@return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n",
                    "metaSrc": "source code",
                    "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                    "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                    "howToUse": "Call this method with the starting square, destination square, and the unit that will traverse the path. It returns a list of directions to follow.",
                    "howItWorks": "The method uses a breadth-first search algorithm to find the shortest path from the start square to the end square, considering the movement capabilities of the given unit.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "34868",
                    "selfTime": "4383",
                    "percent": "0.2",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 11,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "181",
                        "parentId": "180",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                        "methodName": "addNewTargets",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(nl.tudelft.jpacman.board.Unit,java.util.List,java.util.Set,nl.tudelft.jpacman.npc.ghost.Navigation$Node,nl.tudelft.jpacman.board.Square)",
                        "kind": "static method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "Adds new targets to the list of targets for a ghost in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                        "howToUse": "Call this method with the current unit, target list, visited set, current node, and square to add new targets to the list.",
                        "howItWorks": "The method iterates through all possible directions from the given square, checks if the adjacent square is accessible and not already visited, and adds it as a new target if both conditions are met.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "25623",
                        "selfTime": "10451",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "182",
                            "parentId": "181",
                            "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getSquareAt",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                            "visibility": "public",
                            "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                            "kind": "method",
                            "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the square adjacent to the current square in a given direction.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.board.Square",
                            "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                            "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                            "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "7164",
                            "selfTime": "4923",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "183",
                            "parentId": "181",
                            "label": "nl.tudelft.jpacman.board.Direction.values()",
                            "className": "nl.tudelft.jpacman.board.Direction",
                            "methodName": "values",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "1923",
                            "selfTime": "1249",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "184",
                            "parentId": "181",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "1051",
                            "selfTime": "1051",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "185",
                            "parentId": "181",
                            "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                            "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                            "methodName": "isAccessibleTo",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "674",
                            "selfTime": "674",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "186",
                        "parentId": "180",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getSquare",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                        "visibility": "private",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                        "kind": "method",
                        "docComment": "\r\n@return The square for this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square associated with a node.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                        "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                        "howToUse": "Call this method on an instance of Navigation.Node to get its associated square.",
                        "howItWorks": "The method returns the private field 'square' of the current instance.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "617",
                        "selfTime": "617",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "187",
                        "parentId": "180",
                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                        "methodName": "getPath",
                        "color": "#4DAF4A",
                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                        "visibility": "private",
                        "simpleName": "getPath()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                        "kind": "method",
                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "508",
                        "selfTime": "20",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": true,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "188",
                            "parentId": "187",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getPath",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                            "visibility": "private",
                            "simpleName": "getPath()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                            "kind": "method",
                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "481",
                            "selfTime": "16",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 4,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "189",
                                "parentId": "188",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getPath",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                "visibility": "private",
                                "simpleName": "getPath()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                "kind": "method",
                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "456",
                                "selfTime": "19",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 4,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "190",
                                    "parentId": "189",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getPath",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getPath()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                    "kind": "method",
                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "429",
                                    "selfTime": "18",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "191",
                                        "parentId": "190",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getPath",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getPath()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                        "kind": "method",
                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "400",
                                        "selfTime": "16",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 2,
                                          "totalDescendants": 4,
                                          "subtreeDepth": 2,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "192",
                                            "parentId": "191",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getPath",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getPath()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                            "kind": "method",
                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "367",
                                            "selfTime": "14",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 2,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 2,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "193",
                                                "parentId": "192",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getPath",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getPath()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                "kind": "method",
                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "342",
                                                "selfTime": "26",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 2,
                                                  "totalDescendants": 4,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "194",
                                                    "parentId": "193",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getPath",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getPath()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                    "kind": "method",
                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "311",
                                                    "selfTime": "22",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 2,
                                                      "totalDescendants": 4,
                                                      "subtreeDepth": 2,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "195",
                                                        "parentId": "194",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getPath",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getPath()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                        "kind": "method",
                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "277",
                                                        "selfTime": "18",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 2,
                                                          "totalDescendants": 4,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "196",
                                                            "parentId": "195",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getPath",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getPath()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                            "kind": "method",
                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "248",
                                                            "selfTime": "15",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 4,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "197",
                                                                "parentId": "196",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getPath",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getPath()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                "kind": "method",
                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "224",
                                                                "selfTime": "20",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 4,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "198",
                                                                    "parentId": "197",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getPath",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getPath()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                    "kind": "method",
                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "191",
                                                                    "selfTime": "22",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 2,
                                                                      "totalDescendants": 4,
                                                                      "subtreeDepth": 2,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": [
                                                                      {
                                                                        "id": "199",
                                                                        "parentId": "198",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getPath",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getPath()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                        "kind": "method",
                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "158",
                                                                        "selfTime": "23",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 2,
                                                                          "totalDescendants": 4,
                                                                          "subtreeDepth": 2,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": [
                                                                          {
                                                                            "id": "200",
                                                                            "parentId": "199",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getPath",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getPath()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                            "kind": "method",
                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "123",
                                                                            "selfTime": "23",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 2,
                                                                              "totalDescendants": 4,
                                                                              "subtreeDepth": 2,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": [
                                                                              {
                                                                                "id": "201",
                                                                                "parentId": "200",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getPath",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getPath()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                "kind": "method",
                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "92",
                                                                                "selfTime": "21",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 2,
                                                                                  "totalDescendants": 3,
                                                                                  "subtreeDepth": 2,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": [
                                                                                  {
                                                                                    "id": "202",
                                                                                    "parentId": "201",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getPath",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getPath()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                    "kind": "method",
                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "63",
                                                                                    "selfTime": "20",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 1,
                                                                                      "totalDescendants": 3,
                                                                                      "subtreeDepth": 2,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": [
                                                                                      {
                                                                                        "id": "203",
                                                                                        "parentId": "202",
                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                        "methodName": "getPath",
                                                                                        "color": "#4DAF4A",
                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                        "visibility": "private",
                                                                                        "simpleName": "getPath()",
                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                        "kind": "method",
                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                        "metaSrc": "source code",
                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                        "detailedBehavior": "",
                                                                                        "flowRepresentation": "",
                                                                                        "briefSummary": "",
                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                        "assertions": "",
                                                                                        "layer": "Logic",
                                                                                        "time": "36",
                                                                                        "selfTime": "10",
                                                                                        "percent": "0.0",
                                                                                        "isRoot": false,
                                                                                        "collapsed": true,
                                                                                        "selected": false,
                                                                                        "treeStats": {
                                                                                          "directChildrenCount": 2,
                                                                                          "totalDescendants": 4,
                                                                                          "subtreeDepth": 2,
                                                                                          "level": 22
                                                                                        },
                                                                                        "status": {
                                                                                          "fanOut": false,
                                                                                          "implementationEntryPoint": false,
                                                                                          "chainStartPoint": false,
                                                                                          "recursiveEntryPoint": false,
                                                                                          "isSummarised": false
                                                                                        },
                                                                                        "children": [
                                                                                          {
                                                                                            "id": "204",
                                                                                            "parentId": "203",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getPath",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getPath()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                            "kind": "method",
                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "21",
                                                                                            "selfTime": "6",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 2,
                                                                                              "totalDescendants": 3,
                                                                                              "subtreeDepth": 2,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": [
                                                                                              {
                                                                                                "id": "205",
                                                                                                "parentId": "204",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getPath",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getPath()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                "kind": "method",
                                                                                                "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "13",
                                                                                                "selfTime": "2",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 1,
                                                                                                  "totalDescendants": 2,
                                                                                                  "subtreeDepth": 2,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": [
                                                                                                  {
                                                                                                    "id": "206",
                                                                                                    "parentId": "205",
                                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                    "methodName": "getPath",
                                                                                                    "color": "#4DAF4A",
                                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                    "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                    "visibility": "private",
                                                                                                    "simpleName": "getPath()",
                                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                    "kind": "method",
                                                                                                    "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                    "metaSrc": "source code",
                                                                                                    "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                    "detailedBehavior": "",
                                                                                                    "flowRepresentation": "",
                                                                                                    "briefSummary": "",
                                                                                                    "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                    "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                    "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                    "assertions": "",
                                                                                                    "layer": "Logic",
                                                                                                    "time": "8",
                                                                                                    "selfTime": "3",
                                                                                                    "percent": "0.0",
                                                                                                    "isRoot": false,
                                                                                                    "collapsed": true,
                                                                                                    "selected": false,
                                                                                                    "treeStats": {
                                                                                                      "directChildrenCount": 1,
                                                                                                      "totalDescendants": 2,
                                                                                                      "subtreeDepth": 2,
                                                                                                      "level": 25
                                                                                                    },
                                                                                                    "status": {
                                                                                                      "fanOut": false,
                                                                                                      "implementationEntryPoint": false,
                                                                                                      "chainStartPoint": false,
                                                                                                      "recursiveEntryPoint": false,
                                                                                                      "isSummarised": false
                                                                                                    },
                                                                                                    "children": [
                                                                                                      {
                                                                                                        "id": "207",
                                                                                                        "parentId": "206",
                                                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                        "methodName": "getPath",
                                                                                                        "color": "#4DAF4A",
                                                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                        "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                        "visibility": "private",
                                                                                                        "simpleName": "getPath()",
                                                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                        "kind": "method",
                                                                                                        "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                        "metaSrc": "source code",
                                                                                                        "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                        "detailedBehavior": "",
                                                                                                        "flowRepresentation": "",
                                                                                                        "briefSummary": "",
                                                                                                        "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                        "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                        "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                        "assertions": "",
                                                                                                        "layer": "Logic",
                                                                                                        "time": "3",
                                                                                                        "selfTime": "1",
                                                                                                        "percent": "0.0",
                                                                                                        "isRoot": false,
                                                                                                        "collapsed": true,
                                                                                                        "selected": false,
                                                                                                        "treeStats": {
                                                                                                          "directChildrenCount": 1,
                                                                                                          "totalDescendants": 1,
                                                                                                          "subtreeDepth": 2,
                                                                                                          "level": 26
                                                                                                        },
                                                                                                        "status": {
                                                                                                          "fanOut": false,
                                                                                                          "implementationEntryPoint": false,
                                                                                                          "chainStartPoint": false,
                                                                                                          "recursiveEntryPoint": false,
                                                                                                          "isSummarised": false
                                                                                                        },
                                                                                                        "children": [
                                                                                                          {
                                                                                                            "id": "208",
                                                                                                            "parentId": "207",
                                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                            "methodName": "getPath",
                                                                                                            "color": "#4DAF4A",
                                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                            "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                            "visibility": "private",
                                                                                                            "simpleName": "getPath()",
                                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                            "kind": "method",
                                                                                                            "docComment": "Returns the list of values from the root of the tree to this node.\r\n\r\n@return The list of values from the root of the tree to this node.\r\n",
                                                                                                            "metaSrc": "source code",
                                                                                                            "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                            "detailedBehavior": "",
                                                                                                            "flowRepresentation": "",
                                                                                                            "briefSummary": "",
                                                                                                            "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                            "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the path from the root node to that specific node.",
                                                                                                            "howItWorks": "The method checks if the current node has a parent. If not, it returns an empty list. Otherwise, it recursively calls getPath() on the parent and adds the direction of the current node to the returned list.",
                                                                                                            "assertions": "",
                                                                                                            "layer": "Logic",
                                                                                                            "time": "1",
                                                                                                            "selfTime": "1",
                                                                                                            "percent": "0.0",
                                                                                                            "isRoot": false,
                                                                                                            "collapsed": true,
                                                                                                            "selected": false,
                                                                                                            "treeStats": {
                                                                                                              "directChildrenCount": 0,
                                                                                                              "totalDescendants": 0,
                                                                                                              "subtreeDepth": 1,
                                                                                                              "level": 27
                                                                                                            },
                                                                                                            "status": {
                                                                                                              "fanOut": false,
                                                                                                              "implementationEntryPoint": false,
                                                                                                              "chainStartPoint": false,
                                                                                                              "recursiveEntryPoint": false,
                                                                                                              "isSummarised": false
                                                                                                            },
                                                                                                            "children": []
                                                                                                          }
                                                                                                        ]
                                                                                                      }
                                                                                                    ]
                                                                                                  }
                                                                                                ]
                                                                                              },
                                                                                              {
                                                                                                "id": "209",
                                                                                                "parentId": "204",
                                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                "methodName": "getDirection",
                                                                                                "color": "#4DAF4A",
                                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                "visibility": "private",
                                                                                                "simpleName": "getDirection()",
                                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                "kind": "method",
                                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                                "metaSrc": "source code",
                                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                                "detailedBehavior": "",
                                                                                                "flowRepresentation": "",
                                                                                                "briefSummary": "",
                                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                                "assertions": "",
                                                                                                "layer": "Logic",
                                                                                                "time": "2",
                                                                                                "selfTime": "2",
                                                                                                "percent": "0.0",
                                                                                                "isRoot": false,
                                                                                                "collapsed": true,
                                                                                                "selected": false,
                                                                                                "treeStats": {
                                                                                                  "directChildrenCount": 0,
                                                                                                  "totalDescendants": 0,
                                                                                                  "subtreeDepth": 1,
                                                                                                  "level": 24
                                                                                                },
                                                                                                "status": {
                                                                                                  "fanOut": false,
                                                                                                  "implementationEntryPoint": false,
                                                                                                  "chainStartPoint": false,
                                                                                                  "recursiveEntryPoint": false,
                                                                                                  "isSummarised": false
                                                                                                },
                                                                                                "children": []
                                                                                              }
                                                                                            ]
                                                                                          },
                                                                                          {
                                                                                            "id": "210",
                                                                                            "parentId": "203",
                                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                            "methodName": "getDirection",
                                                                                            "color": "#4DAF4A",
                                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                            "visibility": "private",
                                                                                            "simpleName": "getDirection()",
                                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                            "kind": "method",
                                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                            "metaSrc": "source code",
                                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                                            "detailedBehavior": "",
                                                                                            "flowRepresentation": "",
                                                                                            "briefSummary": "",
                                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                            "assertions": "",
                                                                                            "layer": "Logic",
                                                                                            "time": "3",
                                                                                            "selfTime": "3",
                                                                                            "percent": "0.0",
                                                                                            "isRoot": false,
                                                                                            "collapsed": true,
                                                                                            "selected": false,
                                                                                            "treeStats": {
                                                                                              "directChildrenCount": 0,
                                                                                              "totalDescendants": 0,
                                                                                              "subtreeDepth": 1,
                                                                                              "level": 23
                                                                                            },
                                                                                            "status": {
                                                                                              "fanOut": false,
                                                                                              "implementationEntryPoint": false,
                                                                                              "chainStartPoint": false,
                                                                                              "recursiveEntryPoint": false,
                                                                                              "isSummarised": false
                                                                                            },
                                                                                            "children": []
                                                                                          }
                                                                                        ]
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  {
                                                                                    "id": "211",
                                                                                    "parentId": "201",
                                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                    "methodName": "getDirection",
                                                                                    "color": "#4DAF4A",
                                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                    "visibility": "private",
                                                                                    "simpleName": "getDirection()",
                                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                    "kind": "method",
                                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                    "metaSrc": "source code",
                                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                                    "detailedBehavior": "",
                                                                                    "flowRepresentation": "",
                                                                                    "briefSummary": "",
                                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                    "assertions": "",
                                                                                    "layer": "Logic",
                                                                                    "time": "2",
                                                                                    "selfTime": "2",
                                                                                    "percent": "0.0",
                                                                                    "isRoot": false,
                                                                                    "collapsed": true,
                                                                                    "selected": false,
                                                                                    "treeStats": {
                                                                                      "directChildrenCount": 0,
                                                                                      "totalDescendants": 0,
                                                                                      "subtreeDepth": 1,
                                                                                      "level": 21
                                                                                    },
                                                                                    "status": {
                                                                                      "fanOut": false,
                                                                                      "implementationEntryPoint": false,
                                                                                      "chainStartPoint": false,
                                                                                      "recursiveEntryPoint": false,
                                                                                      "isSummarised": false
                                                                                    },
                                                                                    "children": []
                                                                                  }
                                                                                ]
                                                                              },
                                                                              {
                                                                                "id": "212",
                                                                                "parentId": "200",
                                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                "methodName": "getDirection",
                                                                                "color": "#4DAF4A",
                                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                "visibility": "private",
                                                                                "simpleName": "getDirection()",
                                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                "kind": "method",
                                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                                "metaSrc": "source code",
                                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                                "detailedBehavior": "",
                                                                                "flowRepresentation": "",
                                                                                "briefSummary": "",
                                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                                "assertions": "",
                                                                                "layer": "Logic",
                                                                                "time": "2",
                                                                                "selfTime": "2",
                                                                                "percent": "0.0",
                                                                                "isRoot": false,
                                                                                "collapsed": true,
                                                                                "selected": false,
                                                                                "treeStats": {
                                                                                  "directChildrenCount": 0,
                                                                                  "totalDescendants": 0,
                                                                                  "subtreeDepth": 1,
                                                                                  "level": 20
                                                                                },
                                                                                "status": {
                                                                                  "fanOut": false,
                                                                                  "implementationEntryPoint": false,
                                                                                  "chainStartPoint": false,
                                                                                  "recursiveEntryPoint": false,
                                                                                  "isSummarised": false
                                                                                },
                                                                                "children": []
                                                                              }
                                                                            ]
                                                                          },
                                                                          {
                                                                            "id": "213",
                                                                            "parentId": "199",
                                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                            "methodName": "getDirection",
                                                                            "color": "#4DAF4A",
                                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                            "visibility": "private",
                                                                            "simpleName": "getDirection()",
                                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                            "kind": "method",
                                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                            "metaSrc": "source code",
                                                                            "description": "Returns the current direction of a ghost in the game.",
                                                                            "detailedBehavior": "",
                                                                            "flowRepresentation": "",
                                                                            "briefSummary": "",
                                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                            "assertions": "",
                                                                            "layer": "Logic",
                                                                            "time": "8",
                                                                            "selfTime": "8",
                                                                            "percent": "0.0",
                                                                            "isRoot": false,
                                                                            "collapsed": true,
                                                                            "selected": false,
                                                                            "treeStats": {
                                                                              "directChildrenCount": 0,
                                                                              "totalDescendants": 0,
                                                                              "subtreeDepth": 1,
                                                                              "level": 19
                                                                            },
                                                                            "status": {
                                                                              "fanOut": false,
                                                                              "implementationEntryPoint": false,
                                                                              "chainStartPoint": false,
                                                                              "recursiveEntryPoint": false,
                                                                              "isSummarised": false
                                                                            },
                                                                            "children": []
                                                                          }
                                                                        ]
                                                                      },
                                                                      {
                                                                        "id": "214",
                                                                        "parentId": "198",
                                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                        "methodName": "getDirection",
                                                                        "color": "#4DAF4A",
                                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                        "visibility": "private",
                                                                        "simpleName": "getDirection()",
                                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                        "kind": "method",
                                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                        "metaSrc": "source code",
                                                                        "description": "Returns the current direction of a ghost in the game.",
                                                                        "detailedBehavior": "",
                                                                        "flowRepresentation": "",
                                                                        "briefSummary": "",
                                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                        "assertions": "",
                                                                        "layer": "Logic",
                                                                        "time": "6",
                                                                        "selfTime": "6",
                                                                        "percent": "0.0",
                                                                        "isRoot": false,
                                                                        "collapsed": true,
                                                                        "selected": false,
                                                                        "treeStats": {
                                                                          "directChildrenCount": 0,
                                                                          "totalDescendants": 0,
                                                                          "subtreeDepth": 1,
                                                                          "level": 18
                                                                        },
                                                                        "status": {
                                                                          "fanOut": false,
                                                                          "implementationEntryPoint": false,
                                                                          "chainStartPoint": false,
                                                                          "recursiveEntryPoint": false,
                                                                          "isSummarised": false
                                                                        },
                                                                        "children": []
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "id": "215",
                                                                    "parentId": "197",
                                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                    "methodName": "getDirection",
                                                                    "color": "#4DAF4A",
                                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "getDirection()",
                                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                    "kind": "method",
                                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Returns the current direction of a ghost in the game.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "3",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "216",
                                                                "parentId": "196",
                                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                "methodName": "getDirection",
                                                                "color": "#4DAF4A",
                                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "getDirection()",
                                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                "kind": "method",
                                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Returns the current direction of a ghost in the game.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "3",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "217",
                                                            "parentId": "195",
                                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                            "methodName": "getDirection",
                                                            "color": "#4DAF4A",
                                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "getDirection()",
                                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                            "kind": "method",
                                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Returns the current direction of a ghost in the game.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A Direction object representing the current direction of the ghost.",
                                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "5",
                                                            "selfTime": "5",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "id": "218",
                                                        "parentId": "194",
                                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                        "methodName": "getDirection",
                                                        "color": "#4DAF4A",
                                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "getDirection()",
                                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                        "kind": "method",
                                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Returns the current direction of a ghost in the game.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "A Direction object representing the current direction of the ghost.",
                                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "4",
                                                        "selfTime": "4",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 0,
                                                          "totalDescendants": 0,
                                                          "subtreeDepth": 1,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": []
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "id": "219",
                                                    "parentId": "193",
                                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                    "methodName": "getDirection",
                                                    "color": "#4DAF4A",
                                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                    "visibility": "private",
                                                    "simpleName": "getDirection()",
                                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                    "kind": "method",
                                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Returns the current direction of a ghost in the game.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "A Direction object representing the current direction of the ghost.",
                                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1",
                                                    "selfTime": "1",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 0,
                                                      "totalDescendants": 0,
                                                      "subtreeDepth": 1,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": []
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "220",
                                                "parentId": "192",
                                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                "methodName": "getDirection",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                "visibility": "private",
                                                "simpleName": "getDirection()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Returns the current direction of a ghost in the game.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A Direction object representing the current direction of the ghost.",
                                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "7",
                                                "selfTime": "7",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 0,
                                                  "totalDescendants": 0,
                                                  "subtreeDepth": 1,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "id": "221",
                                            "parentId": "191",
                                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                            "methodName": "getDirection",
                                            "color": "#4DAF4A",
                                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                            "visibility": "private",
                                            "simpleName": "getDirection()",
                                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                            "kind": "method",
                                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Returns the current direction of a ghost in the game.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A Direction object representing the current direction of the ghost.",
                                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "6",
                                            "selfTime": "6",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 0,
                                              "totalDescendants": 0,
                                              "subtreeDepth": 1,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": []
                                          }
                                        ]
                                      },
                                      {
                                        "id": "222",
                                        "parentId": "190",
                                        "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                        "methodName": "getDirection",
                                        "color": "#4DAF4A",
                                        "packageName": "nl.tudelft.jpacman.npc.ghost",
                                        "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getDirection()",
                                        "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the current direction of a ghost in the game.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A Direction object representing the current direction of the ghost.",
                                        "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                        "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                        "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "3",
                                        "selfTime": "3",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "223",
                                    "parentId": "189",
                                    "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                    "methodName": "getDirection",
                                    "color": "#4DAF4A",
                                    "packageName": "nl.tudelft.jpacman.npc.ghost",
                                    "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                    "visibility": "private",
                                    "simpleName": "getDirection()",
                                    "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                    "kind": "method",
                                    "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Returns the current direction of a ghost in the game.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A Direction object representing the current direction of the ghost.",
                                    "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                    "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                    "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "5",
                                    "selfTime": "5",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "224",
                                "parentId": "188",
                                "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                "methodName": "getDirection",
                                "color": "#4DAF4A",
                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                "visibility": "private",
                                "simpleName": "getDirection()",
                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                "kind": "method",
                                "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the current direction of a ghost in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A Direction object representing the current direction of the ghost.",
                                "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                                "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "3",
                                "selfTime": "3",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "225",
                            "parentId": "187",
                            "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                            "methodName": "getDirection",
                            "color": "#4DAF4A",
                            "packageName": "nl.tudelft.jpacman.npc.ghost",
                            "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                            "visibility": "private",
                            "simpleName": "getDirection()",
                            "qualifiedName": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                            "kind": "method",
                            "docComment": "\r\n@return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the current direction of a ghost in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A Direction object representing the current direction of the ghost.",
                            "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                            "howToUse": "Call this method on an instance of Navigation$Node to get the current direction of the ghost.",
                            "howItWorks": "The method simply returns the value stored in the instance variable 'direction'.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "226",
                    "parentId": "174",
                    "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "className": "nl.tudelft.jpacman.board.Unit",
                    "methodName": "getSquare",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSquare()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                    "kind": "method",
                    "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square that a unit is currently occupying.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                    "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                    "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                    "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "49",
                    "selfTime": "49",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "id": "227",
            "parentId": "2",
            "label": "nl.tudelft.jpacman.level.Level.move()",
            "className": "nl.tudelft.jpacman.level.Level",
            "methodName": "move",
            "color": "#E41A1C",
            "packageName": "nl.tudelft.jpacman.level",
            "sourceCode": "/**\r\n * Moves the unit into the given direction if possible and handles all\r\n * collisions.\r\n *\r\n * @param unit\r\n * \t\tThe unit to move.\r\n * @param direction\r\n * \t\tThe direction to move the unit in.\r\n */\r\npublic void move(nl.tudelft.jpacman.board.Unit unit, nl.tudelft.jpacman.board.Direction direction) {\r\n    assert unit != null;\r\n    assert direction != null;\r\n    assert unit.hasSquare();\r\n    if (!this.isInProgress()) {\r\n        return;\r\n    }\r\n    synchronized(this.moveLock) {\r\n        unit.setDirection(direction);\r\n        nl.tudelft.jpacman.board.Square location = unit.getSquare();\r\n        nl.tudelft.jpacman.board.Square destination = location.getSquareAt(direction);\r\n        if (destination.isAccessibleTo(unit)) {\r\n            java.util.List<nl.tudelft.jpacman.board.Unit> occupants = destination.getOccupants();\r\n            unit.occupy(destination);\r\n            for (nl.tudelft.jpacman.board.Unit occupant : occupants) {\r\n                this.collisions.collide(unit, occupant);\r\n            }\r\n        }\r\n        this.updateObservers();\r\n    }\r\n}",
            "visibility": "public",
            "simpleName": "move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
            "kind": "method",
            "docComment": "Moves the unit into the given direction if possible and handles all\r\ncollisions.\r\n\r\n@param unit\r\n\t\tThe unit to move.\r\n@param direction\r\n\t\tThe direction to move the unit in.\r\n",
            "metaSrc": "source code",
            "description": "(no description)",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "",
            "reason": "",
            "howToUse": "",
            "howItWorks": "",
            "assertions": "",
            "layer": "",
            "time": "78993",
            "selfTime": "764",
            "percent": "0.4",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 9,
              "totalDescendants": 22,
              "subtreeDepth": 4,
              "level": 3
            },
            "status": {
              "fanOut": true,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "228",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.level.Level.updateObservers()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "updateObservers",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Updates the observers about the state of this level.\r\n */\r\nprivate void updateObservers() {\r\n    java.lang.Iterable<nl.tudelft.jpacman.level.Level.LevelObserver> observers = new java.util.ArrayList<nl.tudelft.jpacman.level.Level.LevelObserver>(this.observers);\r\n    if (!this.isAnyPlayerAlive()) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelLost();\r\n        }\r\n    }\r\n    if (this.remainingPellets() == 0) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelWon();\r\n        }\r\n    }\r\n}",
                "visibility": "private",
                "simpleName": "updateObservers()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.updateObservers()",
                "kind": "method",
                "docComment": "Updates the observers about the state of this level.\r\n",
                "metaSrc": "source code",
                "description": "Notifies observers about the game's outcome based on player status and remaining pellets.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method is responsible for notifying observers about the game's outcome, which is a part of the application logic.",
                "howToUse": "Call this method when the game state changes (e.g., player dies or all pellets are collected).",
                "howItWorks": "The method iterates over a copy of the observers list and calls either levelLost() or levelWon() based on the current game state.",
                "assertions": "",
                "layer": "Logic",
                "time": "77174",
                "selfTime": "239",
                "percent": "0.4",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 3,
                  "totalDescendants": 10,
                  "subtreeDepth": 3,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "229",
                    "parentId": "228",
                    "label": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "remainingPellets",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
                    "visibility": "public",
                    "simpleName": "remainingPellets()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                    "kind": "method",
                    "docComment": "Counts the pellets remaining on the board.\r\n\r\n@return The amount of pellets remaining on the board.\r\n",
                    "metaSrc": "source code",
                    "description": "Counts the remaining pellets on a board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "The number of remaining pellets as an integer.",
                    "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
                    "howToUse": "Call this method on a Level object to get the count of remaining pellets.",
                    "howItWorks": "The method iterates through each square on the board and counts the number of Pellet objects present.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "75399",
                    "selfTime": "34453",
                    "percent": "0.3",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 5,
                      "totalDescendants": 5,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": true,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "230",
                        "parentId": "229",
                        "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getOccupants",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                        "visibility": "public",
                        "simpleName": "getOccupants()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                        "kind": "method",
                        "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the list of units occupying a square in the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An immutable list of units occupying the square.",
                        "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                        "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                        "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "16034",
                        "selfTime": "10121",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "231",
                        "parentId": "229",
                        "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                        "className": "nl.tudelft.jpacman.board.Board",
                        "methodName": "getHeight",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                        "visibility": "public",
                        "simpleName": "getHeight()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
                        "kind": "method",
                        "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the height of the board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An integer representing the height of the board.",
                        "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                        "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
                        "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "5063",
                        "selfTime": "5063",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "232",
                        "parentId": "229",
                        "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                        "className": "nl.tudelft.jpacman.board.Board",
                        "methodName": "squareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                        "visibility": "public",
                        "simpleName": "squareAt(int,int)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
                        "kind": "method",
                        "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square at a given position on the board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                        "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
                        "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "4574",
                        "selfTime": "4574",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "233",
                        "parentId": "229",
                        "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                        "className": "nl.tudelft.jpacman.board.Board",
                        "methodName": "getWidth",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                        "visibility": "public",
                        "simpleName": "getWidth()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
                        "kind": "method",
                        "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the width of the board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An integer representing the width of the board.",
                        "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                        "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
                        "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "248",
                        "selfTime": "248",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "234",
                        "parentId": "229",
                        "label": "nl.tudelft.jpacman.level.Level.getBoard()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "getBoard",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
                        "visibility": "public",
                        "simpleName": "getBoard()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Level.getBoard()",
                        "kind": "method",
                        "docComment": "Returns the board of this level.\r\n\r\n@return The board of this level.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the board from the level.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "Call getBoard() on an instance of the Level class to retrieve the board.",
                        "howItWorks": "The method returns the private field 'board' of the Level class.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "81",
                        "selfTime": "81",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "235",
                    "parentId": "228",
                    "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerHit()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "isAnyPlayerHit",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "",
                    "visibility": "",
                    "simpleName": "",
                    "qualifiedName": "",
                    "kind": "",
                    "docComment": "",
                    "metaSrc": "",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "335",
                    "selfTime": "178",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "236",
                        "parentId": "235",
                        "label": "nl.tudelft.jpacman.level.Player.isHit()",
                        "className": "nl.tudelft.jpacman.level.Player",
                        "methodName": "isHit",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "26",
                        "selfTime": "26",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "237",
                    "parentId": "228",
                    "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "isAnyPlayerAlive",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
                    "visibility": "public",
                    "simpleName": "isAnyPlayerAlive()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                    "kind": "method",
                    "docComment": "Returns <code>true</code> iff at least one of the players in this level\r\nis alive.\r\n\r\n@return <code>true</code> if at least one of the registered players is\r\nalive.\r\n",
                    "metaSrc": "source code",
                    "description": "Checks if any player in the game is alive.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A boolean indicating whether any player is alive.",
                    "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
                    "howToUse": "Call this method to check if there are any players left in the game that are still alive.",
                    "howItWorks": "The method iterates through each player in the list and checks if they are alive using the isAlive() method. If any player is found to be alive, the method returns true; otherwise, it returns false after checking all players.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "318",
                    "selfTime": "150",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "238",
                        "parentId": "237",
                        "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                        "className": "nl.tudelft.jpacman.level.Player",
                        "methodName": "isAlive",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                        "visibility": "public",
                        "simpleName": "isAlive()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
                        "kind": "method",
                        "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
                        "metaSrc": "source code",
                        "description": "Checks if the player is alive.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A boolean indicating whether the player is alive.",
                        "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                        "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
                        "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "21",
                        "selfTime": "21",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "239",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                "className": "nl.tudelft.jpacman.board.Unit",
                "methodName": "occupy",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                "visibility": "public",
                "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
                "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
                "kind": "method",
                "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
                "metaSrc": "source code",
                "description": "Moves the unit to a new square.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "Void",
                "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
                "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
                "assertions": "",
                "layer": "Logic",
                "time": "519",
                "selfTime": "174",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 2,
                  "totalDescendants": 2,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "240",
                    "parentId": "239",
                    "label": "nl.tudelft.jpacman.board.Square.remove()",
                    "className": "nl.tudelft.jpacman.board.Square",
                    "methodName": "remove",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
                    "visibility": "default",
                    "simpleName": "remove(nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
                    "kind": "method",
                    "docComment": "Removes the unit from this square if it was present.\r\n\r\n@param occupant\r\n\t\tThe unit to be removed from this square.\r\n",
                    "metaSrc": "source code",
                    "description": "Removes an occupant from the square.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "void",
                    "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
                    "howToUse": "Call this method with an instance of nl.tudelft.jpacman.board.Unit that you want to remove from the square.",
                    "howItWorks": "The method removes a given occupant from the list of occupants in the square. It first asserts that the occupant is not null, then proceeds to remove it from the 'occupants' list.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "253",
                    "selfTime": "89",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "241",
                    "parentId": "239",
                    "label": "nl.tudelft.jpacman.board.Square.put()",
                    "className": "nl.tudelft.jpacman.board.Square",
                    "methodName": "put",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                    "visibility": "default",
                    "simpleName": "put(nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
                    "kind": "method",
                    "docComment": "Adds a new occupant to this square.\r\n\r\n@param occupant\r\n\t\tThe unit to occupy this square.\r\n",
                    "metaSrc": "source code",
                    "description": "Adds an occupant to the square.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "void",
                    "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                    "howToUse": "Call put with a Unit object as the parameter.",
                    "howItWorks": "Checks if the occupant is not null and not already present in the occupants list, then adds the occupant to the list.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "92",
                    "selfTime": "49",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "242",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.level.Level.isInProgress()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "isInProgress",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Returns whether this level is in progress, i.e. whether moves can be made\r\n * on the board.\r\n *\r\n * @return <code>true</code> iff this level is in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
                "visibility": "public",
                "simpleName": "isInProgress()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.isInProgress()",
                "kind": "method",
                "docComment": "Returns whether this level is in progress, i.e. whether moves can be made\r\non the board.\r\n\r\n@return <code>true</code> iff this level is in progress.\r\n",
                "metaSrc": "source code",
                "description": "Checks if the level is currently in progress.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A boolean indicating whether the level is currently in progress.",
                "reason": "This method provides a way to check the current state of the game level without modifying any data.",
                "howToUse": "Call this method to determine if the game level is still active.",
                "howItWorks": "The method returns the value of the private field 'inProgress'.",
                "assertions": "",
                "layer": "Logic",
                "time": "163",
                "selfTime": "163",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "243",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                "className": "nl.tudelft.jpacman.board.Square",
                "methodName": "getOccupants",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                "visibility": "public",
                "simpleName": "getOccupants()",
                "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                "kind": "method",
                "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the list of units occupying a square in the game board.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "An immutable list of units occupying the square.",
                "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                "assertions": "",
                "layer": "Logic",
                "time": "52",
                "selfTime": "32",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "244",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.level.PlayerCollisions.collide()",
                "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                "methodName": "collide",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "@java.lang.Override\r\npublic void collide(nl.tudelft.jpacman.board.Unit mover, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (mover instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerColliding(((nl.tudelft.jpacman.level.Player) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.ghostColliding(((nl.tudelft.jpacman.npc.Ghost) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.pelletColliding(((nl.tudelft.jpacman.level.Pellet) (mover)), collidedOn);\r\n    }\r\n}",
                "visibility": "public",
                "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
                "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "Handles the logic for when two units collide in the game. Depending on the type of unit (player, ghost, or pellet), it calls the appropriate collision handling method.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "Void.",
                "reason": "This method is part of the game logic, handling different types of collisions between units in the game. It delegates to specific collision handling methods based on the type of unit involved.",
                "howToUse": "Call this method whenever two units collide in the game. The method will handle the appropriate collision logic based on the types of units involved.",
                "howItWorks": "The method checks the type of the 'mover' and calls the corresponding collision handling method (playerColliding, ghostColliding, or pelletColliding). Each of these methods handles the specific logic for that type of collision.",
                "assertions": "",
                "layer": "Logic",
                "time": "48",
                "selfTime": "40",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "245",
                    "parentId": "244",
                    "label": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding()",
                    "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                    "methodName": "ghostColliding",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "private void ghostColliding(nl.tudelft.jpacman.npc.Ghost ghost, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerVersusGhost(((nl.tudelft.jpacman.level.Player) (collidedOn)), ghost);\r\n    }\r\n}",
                    "visibility": "private",
                    "simpleName": "ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
                    "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding(nl.tudelft.jpacman.npc.Ghost,nl.tudelft.jpacman.board.Unit)",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "Handles the logic for when a ghost collides with another unit in the game.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "Void.",
                    "reason": "This method is part of the game logic, specifically handling collisions between ghosts and other units in the game. It does not interact directly with the user interface or data access, making it a candidate for the Logic layer.",
                    "howToUse": "Call this method when a collision event occurs between a ghost and another unit in the game.",
                    "howItWorks": "The method checks if the collidedOn object is an instance of Player. If it is, it calls the playerVersusGhost method with the player and ghost as arguments.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "8",
                    "selfTime": "8",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "246",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                "className": "nl.tudelft.jpacman.board.Square",
                "methodName": "getSquareAt",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                "visibility": "public",
                "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                "kind": "method",
                "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the square adjacent to the current square in a given direction.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "nl.tudelft.jpacman.board.Square",
                "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                "assertions": "",
                "layer": "Logic",
                "time": "46",
                "selfTime": "30",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "247",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.Unit.setDirection()",
                "className": "nl.tudelft.jpacman.board.Unit",
                "methodName": "setDirection",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Sets this unit to face the new direction.\r\n *\r\n * @param newDirection\r\n * \t\tThe new direction this unit is facing.\r\n */\r\npublic void setDirection(nl.tudelft.jpacman.board.Direction newDirection) {\r\n    this.direction = newDirection;\r\n}",
                "visibility": "public",
                "simpleName": "setDirection(nl.tudelft.jpacman.board.Direction)",
                "qualifiedName": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
                "kind": "method",
                "docComment": "Sets this unit to face the new direction.\r\n\r\n@param newDirection\r\n\t\tThe new direction this unit is facing.\r\n",
                "metaSrc": "source code",
                "description": "Sets the direction of a unit in the game.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method is necessary for controlling the movement of units in the game, which falls under the domain logic.",
                "howToUse": "Call setDirection with a Direction enum value to change the unit's movement direction.",
                "howItWorks": "The method updates the 'direction' field of the Unit object with the newDirection parameter.",
                "assertions": "",
                "layer": "Logic",
                "time": "29",
                "selfTime": "29",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "248",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                "className": "nl.tudelft.jpacman.board.Unit",
                "methodName": "getSquare",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                "visibility": "public",
                "simpleName": "getSquare()",
                "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                "kind": "method",
                "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the square that a unit is currently occupying.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                "assertions": "",
                "layer": "Logic",
                "time": "17",
                "selfTime": "17",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "249",
                "parentId": "227",
                "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                "methodName": "isAccessibleTo",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                "visibility": "public",
                "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "10",
                "selfTime": "10",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          },
          {
            "id": "250",
            "parentId": "2",
            "label": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
            "className": "nl.tudelft.jpacman.npc.Ghost",
            "methodName": "getInterval",
            "color": "#377EB8",
            "packageName": "nl.tudelft.jpacman.npc",
            "sourceCode": "/**\r\n * The time that should be taken between moves.\r\n *\r\n * @return The suggested delay between moves in milliseconds.\r\n */\r\npublic long getInterval() {\r\n    return this.moveInterval + new java.util.Random().nextInt(this.intervalVariation);\r\n}",
            "visibility": "public",
            "simpleName": "getInterval()",
            "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
            "kind": "method",
            "docComment": "The time that should be taken between moves.\r\n\r\n@return The suggested delay between moves in milliseconds.\r\n",
            "metaSrc": "source code",
            "description": "Calculates the interval for ghost movement in Pacman.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "A long representing the adjusted movement interval for ghosts.",
            "reason": "This method adjusts the movement speed of ghosts by adding a random variation, which is part of the game logic.",
            "howToUse": "Call this method to get the adjusted movement interval for ghosts.",
            "howItWorks": "Adds a random variation to a fixed move interval.",
            "assertions": "",
            "layer": "Logic",
            "time": "1042",
            "selfTime": "119",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 0,
              "totalDescendants": 0,
              "subtreeDepth": 1,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": []
          }
        ]
      },
      {
        "id": "251",
        "parentId": "1",
        "label": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
        "className": "nl.tudelft.jpacman.ui.PacManUI",
        "methodName": "nextFrame",
        "color": "#FF7F00",
        "packageName": "nl.tudelft.jpacman.ui",
        "sourceCode": "/**\r\n * Draws the next frame, i.e. refreshes the scores and game.\r\n */\r\nprivate void nextFrame() {\r\n    this.boardPanel.repaint();\r\n    this.scorePanel.refresh();\r\n}",
        "visibility": "private",
        "simpleName": "nextFrame()",
        "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
        "kind": "method",
        "docComment": "Draws the next frame, i.e. refreshes the scores and game.\r\n",
        "metaSrc": "source code",
        "description": "Repaints the board panel and refreshes the score panel in the PacManUI.",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "Void",
        "reason": "This method is necessary to keep the UI in sync with the game state, ensuring that players see the correct visual representation of the game.",
        "howToUse": "Call this method when you want to update the UI elements of the PacMan game, typically after a game state change.",
        "howItWorks": "Calls repaint() on the boardPanel to update its visual representation and calls refresh() on the scorePanel to update the score labels based on current scores.",
        "assertions": "",
        "layer": "UI",
        "time": "249125",
        "selfTime": "73467",
        "percent": "1.1",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 1,
          "totalDescendants": 4,
          "subtreeDepth": 4,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": false,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "252",
            "parentId": "251",
            "label": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
            "className": "nl.tudelft.jpacman.ui.ScorePanel",
            "methodName": "refresh",
            "color": "#FF7F00",
            "packageName": "nl.tudelft.jpacman.ui",
            "sourceCode": "/**\r\n * Refreshes the scores of the players.\r\n */\r\nprotected void refresh() {\r\n    for (java.util.Map.Entry<nl.tudelft.jpacman.level.Player, javax.swing.JLabel> entry : this.scoreLabels.entrySet()) {\r\n        nl.tudelft.jpacman.level.Player player = entry.getKey();\r\n        java.lang.String score = \"\";\r\n        if (!player.isAlive()) {\r\n            score = \"You died. \";\r\n        }\r\n        score += this.scoreFormatter.format(player);\r\n        entry.getValue().setText(score);\r\n    }\r\n}",
            "visibility": "protected",
            "simpleName": "refresh()",
            "qualifiedName": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
            "kind": "method",
            "docComment": "Refreshes the scores of the players.\r\n",
            "metaSrc": "source code",
            "description": "Refreshes the score labels on the ScorePanel based on the current scores of players.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "void",
            "reason": "This method updates the score labels on the ScorePanel to reflect the current scores of players.",
            "howToUse": "Call this method whenever there is an update in player scores that needs to be reflected on the UI.",
            "howItWorks": "Iterates through each entry in the scoreLabels map, checks if the player is alive, formats the score using ScoreFormatter, and updates the text of the JLabel accordingly.",
            "assertions": "",
            "layer": "UI",
            "time": "175658",
            "selfTime": "14891",
            "percent": "0.8",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 2,
              "totalDescendants": 3,
              "subtreeDepth": 3,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "253",
                "parentId": "252",
                "label": "nl.tudelft.jpacman.ui.ScorePanel.lambda$static$0()",
                "className": "nl.tudelft.jpacman.ui.ScorePanel",
                "methodName": "lambda$static$0",
                "color": "#FF7F00",
                "packageName": "nl.tudelft.jpacman.ui",
                "sourceCode": "",
                "visibility": "",
                "simpleName": "",
                "qualifiedName": "",
                "kind": "",
                "docComment": "",
                "metaSrc": "",
                "description": "",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "142353",
                "selfTime": "2980",
                "percent": "0.6",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "254",
                    "parentId": "253",
                    "label": "nl.tudelft.jpacman.level.Player.getScore()",
                    "className": "nl.tudelft.jpacman.level.Player",
                    "methodName": "getScore",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Returns the amount of points accumulated by this player.\r\n *\r\n * @return The amount of points accumulated by this player.\r\n */\r\npublic int getScore() {\r\n    return this.score;\r\n}",
                    "visibility": "public",
                    "simpleName": "getScore()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Player.getScore()",
                    "kind": "method",
                    "docComment": "Returns the amount of points accumulated by this player.\r\n\r\n@return The amount of points accumulated by this player.\r\n",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "478",
                    "selfTime": "478",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "255",
                "parentId": "252",
                "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                "className": "nl.tudelft.jpacman.level.Player",
                "methodName": "isAlive",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                "visibility": "public",
                "simpleName": "isAlive()",
                "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
                "kind": "method",
                "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
                "metaSrc": "source code",
                "description": "Checks if the player is alive.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A boolean indicating whether the player is alive.",
                "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
                "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
                "assertions": "",
                "layer": "Logic",
                "time": "447",
                "selfTime": "447",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          }
        ]
      }
    ]
  },
  "java.awt.EventDispatchThread.run()": {
    "id": "256",
    "parentId": "0",
    "label": "java.awt.EventDispatchThread.run()",
    "className": "java.awt.EventDispatchThread",
    "methodName": "run",
    "color": "#A65628",
    "packageName": "java.awt",
    "sourceCode": "",
    "visibility": "",
    "simpleName": "",
    "qualifiedName": "",
    "kind": "",
    "docComment": "",
    "metaSrc": "",
    "description": "",
    "detailedBehavior": "",
    "flowRepresentation": "",
    "briefSummary": "",
    "returns": "",
    "reason": "",
    "howToUse": "",
    "howItWorks": "",
    "assertions": "",
    "layer": "",
    "time": "1964716",
    "selfTime": "432292",
    "percent": "8.9",
    "isRoot": false,
    "collapsed": true,
    "selected": false,
    "treeStats": {
      "directChildrenCount": 4,
      "totalDescendants": 96,
      "subtreeDepth": 13,
      "level": 1
    },
    "status": {
      "fanOut": true,
      "implementationEntryPoint": true,
      "chainStartPoint": false,
      "recursiveEntryPoint": false,
      "isSummarised": false
    },
    "children": [
      {
        "id": "257",
        "parentId": "256",
        "label": "nl.tudelft.jpacman.ui.BoardPanel.paint()",
        "className": "nl.tudelft.jpacman.ui.BoardPanel",
        "methodName": "paint",
        "color": "#FF7F00",
        "packageName": "nl.tudelft.jpacman.ui",
        "sourceCode": "@java.lang.Override\r\npublic void paint(java.awt.Graphics g) {\r\n    assert g != null;\r\n    this.render(this.game.getLevel().getBoard(), g, this.getSize());\r\n}",
        "visibility": "public",
        "simpleName": "paint(java.awt.Graphics)",
        "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.paint(java.awt.Graphics)",
        "kind": "method",
        "docComment": "",
        "metaSrc": "source code",
        "description": "Renders the entire board using a given graphics context.",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "Void.",
        "reason": "This method is responsible for rendering the game board, which is a UI-related task. It interacts with the game logic to get the current level and then renders it using the provided graphics context.",
        "howToUse": "Call this method on an instance of BoardPanel, passing in a Graphics object to render the board.",
        "howItWorks": "The method first asserts that the Graphics object is not null. It then retrieves the current level from the game and calls the render method of the BoardPanel class to draw the board on the provided graphics context.",
        "assertions": "",
        "layer": "UI",
        "time": "1478758",
        "selfTime": "3799",
        "percent": "6.7",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 3,
          "totalDescendants": 15,
          "subtreeDepth": 3,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": true,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "258",
            "parentId": "257",
            "label": "nl.tudelft.jpacman.ui.BoardPanel.render()",
            "className": "nl.tudelft.jpacman.ui.BoardPanel",
            "methodName": "render",
            "color": "#FF7F00",
            "packageName": "nl.tudelft.jpacman.ui",
            "sourceCode": "/**\r\n * Renders a single square on the given graphics context on the specified\r\n * rectangle.\r\n *\r\n * @param square\r\n * \t\tThe square to render.\r\n * @param graphics\r\n * \t\tThe graphics context to draw on.\r\n * @param x\r\n * \t\tThe x position to start drawing.\r\n * @param y\r\n * \t\tThe y position to start drawing.\r\n * @param width\r\n * \t\tThe width of this square (in pixels.)\r\n * @param height\r\n * \t\tThe height of this square (in pixels.)\r\n */\r\nprivate void render(nl.tudelft.jpacman.board.Square square, java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    square.getSprite().draw(graphics, x, y, width, height);\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        unit.getSprite().draw(graphics, x, y, width, height);\r\n    }\r\n}",
            "visibility": "private",
            "simpleName": "render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
            "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
            "kind": "method",
            "docComment": "Renders a single square on the given graphics context on the specified\r\nrectangle.\r\n\r\n@param square\r\n\t\tThe square to render.\r\n@param graphics\r\n\t\tThe graphics context to draw on.\r\n@param x\r\n\t\tThe x position to start drawing.\r\n@param y\r\n\t\tThe y position to start drawing.\r\n@param width\r\n\t\tThe width of this square (in pixels.)\r\n@param height\r\n\t\tThe height of this square (in pixels.)\r\n",
            "metaSrc": "source code",
            "description": "Renders a square on the board with its associated units.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "void",
            "reason": "This method is responsible for rendering a square and its occupants on the board, which is part of the user interface.",
            "howToUse": "Call this method with a Square object, Graphics context, and coordinates to render the square and its units.",
            "howItWorks": "The method first draws the sprite of the square. Then, it iterates over each unit occupying the square and draws their sprites.",
            "assertions": "",
            "layer": "",
            "time": "1474135",
            "selfTime": "144411",
            "percent": "6.7",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 4,
              "totalDescendants": 12,
              "subtreeDepth": 2,
              "level": 3
            },
            "status": {
              "fanOut": true,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": true,
              "isSummarised": false
            },
            "children": [
              {
                "id": "259",
                "parentId": "258",
                "label": "nl.tudelft.jpacman.ui.BoardPanel.render()",
                "className": "nl.tudelft.jpacman.ui.BoardPanel",
                "methodName": "render",
                "color": "#FF7F00",
                "packageName": "nl.tudelft.jpacman.ui",
                "sourceCode": "/**\r\n * Renders a single square on the given graphics context on the specified\r\n * rectangle.\r\n *\r\n * @param square\r\n * \t\tThe square to render.\r\n * @param graphics\r\n * \t\tThe graphics context to draw on.\r\n * @param x\r\n * \t\tThe x position to start drawing.\r\n * @param y\r\n * \t\tThe y position to start drawing.\r\n * @param width\r\n * \t\tThe width of this square (in pixels.)\r\n * @param height\r\n * \t\tThe height of this square (in pixels.)\r\n */\r\nprivate void render(nl.tudelft.jpacman.board.Square square, java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    square.getSprite().draw(graphics, x, y, width, height);\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        unit.getSprite().draw(graphics, x, y, width, height);\r\n    }\r\n}",
                "visibility": "private",
                "simpleName": "render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
                "qualifiedName": "nl.tudelft.jpacman.ui.BoardPanel.render(nl.tudelft.jpacman.board.Square,java.awt.Graphics,int,int,int,int)",
                "kind": "method",
                "docComment": "Renders a single square on the given graphics context on the specified\r\nrectangle.\r\n\r\n@param square\r\n\t\tThe square to render.\r\n@param graphics\r\n\t\tThe graphics context to draw on.\r\n@param x\r\n\t\tThe x position to start drawing.\r\n@param y\r\n\t\tThe y position to start drawing.\r\n@param width\r\n\t\tThe width of this square (in pixels.)\r\n@param height\r\n\t\tThe height of this square (in pixels.)\r\n",
                "metaSrc": "source code",
                "description": "Renders a square on the board with its associated units.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method is responsible for rendering a square and its occupants on the board, which is part of the user interface.",
                "howToUse": "Call this method with a Square object, Graphics context, and coordinates to render the square and its units.",
                "howItWorks": "The method first draws the sprite of the square. Then, it iterates over each unit occupying the square and draws their sprites.",
                "assertions": "",
                "layer": "",
                "time": "1234804",
                "selfTime": "332643",
                "percent": "5.6",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 8,
                  "totalDescendants": 14,
                  "subtreeDepth": 3,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "260",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.draw()",
                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                    "methodName": "draw",
                    "color": "#F781BF",
                    "packageName": "nl.tudelft.jpacman.sprite",
                    "sourceCode": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    graphics.drawImage(this.image, x, y, x + width, y + height, 0, 0, this.image.getWidth(null), this.image.getHeight(null), null);\r\n}",
                    "visibility": "public",
                    "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "565785",
                    "selfTime": "213868",
                    "percent": "2.6",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "261",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                    "className": "nl.tudelft.jpacman.board.Square",
                    "methodName": "getOccupants",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                    "visibility": "public",
                    "simpleName": "getOccupants()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                    "kind": "method",
                    "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the list of units occupying a square in the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An immutable list of units occupying the square.",
                    "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                    "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                    "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "137601",
                    "selfTime": "83906",
                    "percent": "0.6",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "262",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
                    "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                    "methodName": "getSprite",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.background;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSprite()",
                    "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.getSprite()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "23431",
                    "selfTime": "23431",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "263",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
                    "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                    "methodName": "getSprite",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.background;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSprite()",
                    "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.getSprite()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "20205",
                    "selfTime": "20205",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "264",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw()",
                    "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                    "methodName": "draw",
                    "color": "#F781BF",
                    "packageName": "nl.tudelft.jpacman.sprite",
                    "sourceCode": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    this.update();\r\n    this.currentSprite().draw(graphics, x, y, width, height);\r\n}",
                    "visibility": "public",
                    "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
                    "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.draw(java.awt.Graphics,int,int,int,int)",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "Draws the sprite on a graphics context at a specified position and size.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "Void.",
                    "reason": "This method is responsible for rendering a sprite on a graphics context, which is a typical task in the UI layer as it involves drawing graphical elements to the screen.",
                    "howToUse": "Call this method with a valid Graphics object and coordinates to draw the sprite at the specified position and size.",
                    "howItWorks": "The method first updates the state of the animated sprite, then draws the current sprite on the provided graphics context at the given coordinates and dimensions.",
                    "assertions": "",
                    "layer": "UI",
                    "time": "19203",
                    "selfTime": "3244",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 3,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "265",
                        "parentId": "264",
                        "label": "nl.tudelft.jpacman.sprite.ImageSprite.draw()",
                        "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                        "methodName": "draw",
                        "color": "#F781BF",
                        "packageName": "nl.tudelft.jpacman.sprite",
                        "sourceCode": "@java.lang.Override\r\npublic void draw(java.awt.Graphics graphics, int x, int y, int width, int height) {\r\n    graphics.drawImage(this.image, x, y, x + width, y + height, 0, 0, this.image.getWidth(null), this.image.getHeight(null), null);\r\n}",
                        "visibility": "public",
                        "simpleName": "draw(java.awt.Graphics,int,int,int,int)",
                        "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.draw(java.awt.Graphics,int,int,int,int)",
                        "kind": "method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "11516",
                        "selfTime": "1788",
                        "percent": "0.1",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "266",
                        "parentId": "264",
                        "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
                        "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                        "methodName": "update",
                        "color": "#F781BF",
                        "packageName": "nl.tudelft.jpacman.sprite",
                        "sourceCode": "/**\r\n * Updates the current frame index depending on the current system time.\r\n */\r\nprivate void update() {\r\n    long now = java.lang.System.currentTimeMillis();\r\n    if (this.animating) {\r\n        while (this.lastUpdate < now) {\r\n            this.lastUpdate += this.animationDelay;\r\n            this.current++;\r\n            if (this.looping) {\r\n                this.current %= this.animationFrames.length;\r\n            } else if (this.current == this.animationFrames.length) {\r\n                this.animating = false;\r\n            }\r\n        } \r\n    } else {\r\n        this.lastUpdate = now;\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "update()",
                        "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.update()",
                        "kind": "method",
                        "docComment": "Updates the current frame index depending on the current system time.\r\n",
                        "metaSrc": "source code",
                        "description": "Updates the state of an animated sprite by advancing its frame index based on a fixed animation delay.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for updating the visual representation of a sprite over time, which falls under application logic.",
                        "howToUse": "Call this method periodically to animate a sprite in a game loop.",
                        "howItWorks": "The method calculates the current time and checks if it's time to update the sprite's frame. If so, it increments the frame index and wraps around if looping is enabled or stops animating if not.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "3648",
                        "selfTime": "2458",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "267",
                        "parentId": "264",
                        "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
                        "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                        "methodName": "currentSprite",
                        "color": "#F781BF",
                        "packageName": "nl.tudelft.jpacman.sprite",
                        "sourceCode": "/**\r\n *\r\n * @return The frame of the current index.\r\n */\r\nprivate nl.tudelft.jpacman.sprite.Sprite currentSprite() {\r\n    nl.tudelft.jpacman.sprite.Sprite result = nl.tudelft.jpacman.sprite.AnimatedSprite.END_OF_LOOP;\r\n    if (this.current < this.animationFrames.length) {\r\n        result = this.animationFrames[this.current];\r\n    }\r\n    assert result != null;\r\n    return result;\r\n}",
                        "visibility": "private",
                        "simpleName": "currentSprite()",
                        "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.currentSprite()",
                        "kind": "method",
                        "docComment": "\r\n@return The frame of the current index.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the current sprite in an animation sequence.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.sprite.Sprite - The current sprite in the animation sequence.",
                        "reason": "This method is responsible for retrieving the current sprite from an animated sprite sequence, ensuring it's not null before returning.",
                        "howToUse": "Call this method on an instance of AnimatedSprite to get the current sprite in its animation.",
                        "howItWorks": "The method checks if the current frame index is within the bounds of the animation frames array. If so, it returns the corresponding sprite; otherwise, it returns END_OF_LOOP.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "795",
                        "selfTime": "795",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "268",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.level.Pellet.getSprite()",
                    "className": "nl.tudelft.jpacman.level.Pellet",
                    "methodName": "getSprite",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.image;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSprite()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Pellet.getSprite()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "10999",
                    "selfTime": "10999",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "269",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
                    "className": "nl.tudelft.jpacman.npc.Ghost",
                    "methodName": "getSprite",
                    "color": "#377EB8",
                    "packageName": "nl.tudelft.jpacman.npc",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    return this.sprites.get(this.getDirection());\r\n}",
                    "visibility": "public",
                    "simpleName": "getSprite()",
                    "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.getSprite()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "Returns the sprite associated with the ghost's current direction.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                    "reason": "This method is responsible for retrieving the appropriate sprite based on the ghost's direction, which is part of the game logic to visually represent the ghost's state.",
                    "howToUse": "Call this method on an instance of nl.tudelft.jpacman.npc.Ghost to get its current sprite.",
                    "howItWorks": "The method retrieves the sprite from a list of sprites using the direction returned by the getDirection() method.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "6604",
                    "selfTime": "2489",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "270",
                        "parentId": "269",
                        "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getDirection",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                        "visibility": "public",
                        "simpleName": "getDirection()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "kind": "method",
                        "docComment": "Returns the current direction this unit is facing.\r\n\r\n@return The current direction this unit is facing.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the current direction of a unit in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A Direction object representing the current direction of the unit.",
                        "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                        "howToUse": "Call this method on an instance of Unit to get its current movement direction.",
                        "howItWorks": "The method simply returns the value of the 'direction' field of the Unit object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "580",
                        "selfTime": "580",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "271",
                    "parentId": "259",
                    "label": "nl.tudelft.jpacman.level.Player.getSprite()",
                    "className": "nl.tudelft.jpacman.level.Player",
                    "methodName": "getSprite",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite getSprite() {\r\n    if (this.isAlive()) {\r\n        return this.sprites.get(this.getDirection());\r\n    }\r\n    return this.deathSprite;\r\n}",
                    "visibility": "public",
                    "simpleName": "getSprite()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Player.getSprite()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "Returns the sprite of a player based on its current state (alive or dead).",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A Sprite object representing the player's current sprite.",
                    "reason": "This method encapsulates the logic for determining which sprite to display based on the player's current state, which is part of the game's domain logic.",
                    "howToUse": "Call this method on an instance of Player to get the appropriate sprite for rendering.",
                    "howItWorks": "Checks if the player is alive. If so, returns the sprite corresponding to the player's direction; otherwise, returns the death sprite.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "4123",
                    "selfTime": "2240",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 2,
                      "totalDescendants": 2,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "272",
                        "parentId": "271",
                        "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                        "className": "nl.tudelft.jpacman.level.Player",
                        "methodName": "isAlive",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                        "visibility": "public",
                        "simpleName": "isAlive()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
                        "kind": "method",
                        "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
                        "metaSrc": "source code",
                        "description": "Checks if the player is alive.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A boolean indicating whether the player is alive.",
                        "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                        "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
                        "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "529",
                        "selfTime": "529",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "273",
                        "parentId": "271",
                        "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getDirection",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                        "visibility": "public",
                        "simpleName": "getDirection()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getDirection()",
                        "kind": "method",
                        "docComment": "Returns the current direction this unit is facing.\r\n\r\n@return The current direction this unit is facing.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the current direction of a unit in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A Direction object representing the current direction of the unit.",
                        "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                        "howToUse": "Call this method on an instance of Unit to get its current movement direction.",
                        "howItWorks": "The method simply returns the value of the 'direction' field of the Unit object.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "171",
                        "selfTime": "171",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "274",
                "parentId": "258",
                "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                "className": "nl.tudelft.jpacman.board.Board",
                "methodName": "squareAt",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                "visibility": "public",
                "simpleName": "squareAt(int,int)",
                "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
                "kind": "method",
                "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the square at a given position on the board.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "nl.tudelft.jpacman.board.Square",
                "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
                "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
                "assertions": "",
                "layer": "Logic",
                "time": "51178",
                "selfTime": "51178",
                "percent": "0.2",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "275",
                "parentId": "258",
                "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                "className": "nl.tudelft.jpacman.board.Board",
                "methodName": "getWidth",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                "visibility": "public",
                "simpleName": "getWidth()",
                "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
                "kind": "method",
                "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
                "metaSrc": "source code",
                "description": "Returns the width of the board.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "An integer representing the width of the board.",
                "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
                "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
                "assertions": "",
                "layer": "Logic",
                "time": "38653",
                "selfTime": "38653",
                "percent": "0.2",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "276",
                "parentId": "258",
                "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                "className": "nl.tudelft.jpacman.board.Board",
                "methodName": "getHeight",
                "color": "#984EA3",
                "packageName": "nl.tudelft.jpacman.board",
                "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                "visibility": "public",
                "simpleName": "getHeight()",
                "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
                "kind": "method",
                "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
                "metaSrc": "source code",
                "description": "Returns the height of the board.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "An integer representing the height of the board.",
                "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
                "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
                "assertions": "",
                "layer": "Logic",
                "time": "2306",
                "selfTime": "2306",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          },
          {
            "id": "277",
            "parentId": "257",
            "label": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
            "className": "nl.tudelft.jpacman.game.SinglePlayerGame",
            "methodName": "getLevel",
            "color": "#8DD3C7",
            "packageName": "nl.tudelft.jpacman.game",
            "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.level.Level getLevel() {\r\n    return this.level;\r\n}",
            "visibility": "public",
            "simpleName": "getLevel()",
            "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
            "kind": "method",
            "docComment": "",
            "metaSrc": "source code",
            "description": "",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "",
            "reason": "",
            "howToUse": "",
            "howItWorks": "",
            "assertions": "",
            "layer": "",
            "time": "550",
            "selfTime": "550",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 0,
              "totalDescendants": 0,
              "subtreeDepth": 1,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": []
          },
          {
            "id": "278",
            "parentId": "257",
            "label": "nl.tudelft.jpacman.level.Level.getBoard()",
            "className": "nl.tudelft.jpacman.level.Level",
            "methodName": "getBoard",
            "color": "#E41A1C",
            "packageName": "nl.tudelft.jpacman.level",
            "sourceCode": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
            "visibility": "public",
            "simpleName": "getBoard()",
            "qualifiedName": "nl.tudelft.jpacman.level.Level.getBoard()",
            "kind": "method",
            "docComment": "Returns the board of this level.\r\n\r\n@return The board of this level.\r\n",
            "metaSrc": "source code",
            "description": "Retrieves the board from the level.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "",
            "reason": "",
            "howToUse": "Call getBoard() on an instance of the Level class to retrieve the board.",
            "howItWorks": "The method returns the private field 'board' of the Level class.",
            "assertions": "",
            "layer": "Logic",
            "time": "274",
            "selfTime": "274",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 0,
              "totalDescendants": 0,
              "subtreeDepth": 1,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": []
          }
        ]
      },
      {
        "id": "279",
        "parentId": "256",
        "label": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed()",
        "className": "nl.tudelft.jpacman.ui.PacKeyListener",
        "methodName": "keyPressed",
        "color": "#FF7F00",
        "packageName": "nl.tudelft.jpacman.ui",
        "sourceCode": "@java.lang.Override\r\npublic void keyPressed(java.awt.event.KeyEvent event) {\r\n    assert event != null;\r\n    nl.tudelft.jpacman.ui.Action action = this.mappings.get(event.getKeyCode());\r\n    if (action != null) {\r\n        action.doAction();\r\n    }\r\n}",
        "visibility": "public",
        "simpleName": "keyPressed(java.awt.event.KeyEvent)",
        "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyPressed(java.awt.event.KeyEvent)",
        "kind": "method",
        "docComment": "",
        "metaSrc": "source code",
        "description": "Handles user interface interactions by mapping key events to actions and executing them.",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "Void. Executes the action associated with the key event if it exists.",
        "reason": "This method is responsible for handling user input in the Pacman game, which falls under UI interactions.",
        "howToUse": "Call this method with a KeyEvent object representing the key pressed by the user.",
        "howItWorks": "The method checks if there is an action mapped to the key code of the event. If so, it executes that action.",
        "assertions": "",
        "layer": "UI",
        "time": "49956",
        "selfTime": "330",
        "percent": "0.2",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 1,
          "totalDescendants": 50,
          "subtreeDepth": 12,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": true,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "280",
            "parentId": "279",
            "label": "nl.tudelft.jpacman.Launcher.lambda$moveTowardsDirection$0()",
            "className": "nl.tudelft.jpacman.Launcher",
            "methodName": "lambda$moveTowardsDirection$0",
            "color": "#ECC94B",
            "packageName": "nl.tudelft.jpacman",
            "sourceCode": "",
            "visibility": "",
            "simpleName": "",
            "qualifiedName": "",
            "kind": "",
            "docComment": "",
            "metaSrc": "",
            "description": "",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "",
            "reason": "",
            "howToUse": "",
            "howItWorks": "",
            "assertions": "",
            "layer": "",
            "time": "49356",
            "selfTime": "244",
            "percent": "0.2",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 3,
              "totalDescendants": 49,
              "subtreeDepth": 11,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "281",
                "parentId": "280",
                "label": "nl.tudelft.jpacman.game.Game.move()",
                "className": "nl.tudelft.jpacman.game.Game",
                "methodName": "move",
                "color": "#8DD3C7",
                "packageName": "nl.tudelft.jpacman.game",
                "sourceCode": "/**\r\n * Moves the specified player one square in the given direction.\r\n *\r\n * @param player\r\n * \t\tThe player to move.\r\n * @param direction\r\n * \t\tThe direction to move in.\r\n */\r\npublic void move(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Direction direction) {\r\n    if (this.isInProgress()) {\r\n        // execute player move.\r\n        this.getLevel().move(player, direction);\r\n        this.pointCalculator.pacmanMoved(player, direction);\r\n    }\r\n}",
                "visibility": "public",
                "simpleName": "move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
                "qualifiedName": "nl.tudelft.jpacman.game.Game.move(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
                "kind": "method",
                "docComment": "Moves the specified player one square in the given direction.\r\n\r\n@param player\r\n\t\tThe player to move.\r\n@param direction\r\n\t\tThe direction to move in.\r\n",
                "metaSrc": "source code",
                "description": "Moves a Pacman player in a given direction if the game is in progress.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "Void.",
                "reason": "This method is part of the game logic layer, handling the movement of a player within the game rules and state.",
                "howToUse": "Call this method with a Player object and a Direction enum to move the player in that direction if the game is active.",
                "howItWorks": "Checks if the game is in progress. If so, it moves the player on the level and updates the point calculator for the move.",
                "assertions": "",
                "layer": "Logic",
                "time": "48530",
                "selfTime": "223",
                "percent": "0.2",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 4,
                  "totalDescendants": 45,
                  "subtreeDepth": 10,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "282",
                    "parentId": "281",
                    "label": "nl.tudelft.jpacman.level.Level.move()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "move",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Moves the unit into the given direction if possible and handles all\r\n * collisions.\r\n *\r\n * @param unit\r\n * \t\tThe unit to move.\r\n * @param direction\r\n * \t\tThe direction to move the unit in.\r\n */\r\npublic void move(nl.tudelft.jpacman.board.Unit unit, nl.tudelft.jpacman.board.Direction direction) {\r\n    assert unit != null;\r\n    assert direction != null;\r\n    assert unit.hasSquare();\r\n    if (!this.isInProgress()) {\r\n        return;\r\n    }\r\n    synchronized(this.moveLock) {\r\n        unit.setDirection(direction);\r\n        nl.tudelft.jpacman.board.Square location = unit.getSquare();\r\n        nl.tudelft.jpacman.board.Square destination = location.getSquareAt(direction);\r\n        if (destination.isAccessibleTo(unit)) {\r\n            java.util.List<nl.tudelft.jpacman.board.Unit> occupants = destination.getOccupants();\r\n            unit.occupy(destination);\r\n            for (nl.tudelft.jpacman.board.Unit occupant : occupants) {\r\n                this.collisions.collide(unit, occupant);\r\n            }\r\n        }\r\n        this.updateObservers();\r\n    }\r\n}",
                    "visibility": "public",
                    "simpleName": "move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.move(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Direction)",
                    "kind": "method",
                    "docComment": "Moves the unit into the given direction if possible and handles all\r\ncollisions.\r\n\r\n@param unit\r\n\t\tThe unit to move.\r\n@param direction\r\n\t\tThe direction to move the unit in.\r\n",
                    "metaSrc": "source code",
                    "description": "(no description)",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "48278",
                    "selfTime": "489",
                    "percent": "0.2",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 10,
                      "totalDescendants": 41,
                      "subtreeDepth": 9,
                      "level": 5
                    },
                    "status": {
                      "fanOut": true,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "283",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.level.Level.updateObservers()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "updateObservers",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Updates the observers about the state of this level.\r\n */\r\nprivate void updateObservers() {\r\n    java.lang.Iterable<nl.tudelft.jpacman.level.Level.LevelObserver> observers = new java.util.ArrayList<nl.tudelft.jpacman.level.Level.LevelObserver>(this.observers);\r\n    if (!this.isAnyPlayerAlive()) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelLost();\r\n        }\r\n    }\r\n    if (this.remainingPellets() == 0) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelWon();\r\n        }\r\n    }\r\n}",
                        "visibility": "private",
                        "simpleName": "updateObservers()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Level.updateObservers()",
                        "kind": "method",
                        "docComment": "Updates the observers about the state of this level.\r\n",
                        "metaSrc": "source code",
                        "description": "Notifies observers about the game's outcome based on player status and remaining pellets.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is responsible for notifying observers about the game's outcome, which is a part of the application logic.",
                        "howToUse": "Call this method when the game state changes (e.g., player dies or all pellets are collected).",
                        "howItWorks": "The method iterates over a copy of the observers list and calls either levelLost() or levelWon() based on the current game state.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "46633",
                        "selfTime": "171",
                        "percent": "0.2",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 18,
                          "subtreeDepth": 8,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": true,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "284",
                            "parentId": "283",
                            "label": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                            "className": "nl.tudelft.jpacman.level.Level",
                            "methodName": "remainingPellets",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
                            "visibility": "public",
                            "simpleName": "remainingPellets()",
                            "qualifiedName": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                            "kind": "method",
                            "docComment": "Counts the pellets remaining on the board.\r\n\r\n@return The amount of pellets remaining on the board.\r\n",
                            "metaSrc": "source code",
                            "description": "Counts the remaining pellets on a board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "The number of remaining pellets as an integer.",
                            "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
                            "howToUse": "Call this method on a Level object to get the count of remaining pellets.",
                            "howItWorks": "The method iterates through each square on the board and counts the number of Pellet objects present.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "44460",
                            "selfTime": "19876",
                            "percent": "0.2",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 5,
                              "totalDescendants": 5,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": true,
                              "implementationEntryPoint": true,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "285",
                                "parentId": "284",
                                "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                                "className": "nl.tudelft.jpacman.board.Square",
                                "methodName": "getOccupants",
                                "color": "#984EA3",
                                "packageName": "nl.tudelft.jpacman.board",
                                "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                                "visibility": "public",
                                "simpleName": "getOccupants()",
                                "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                                "kind": "method",
                                "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                                "metaSrc": "source code",
                                "description": "Retrieves the list of units occupying a square in the game board.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "An immutable list of units occupying the square.",
                                "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                                "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                                "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "9803",
                                "selfTime": "6288",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              },
                              {
                                "id": "286",
                                "parentId": "284",
                                "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                                "className": "nl.tudelft.jpacman.board.Board",
                                "methodName": "getHeight",
                                "color": "#984EA3",
                                "packageName": "nl.tudelft.jpacman.board",
                                "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                                "visibility": "public",
                                "simpleName": "getHeight()",
                                "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
                                "kind": "method",
                                "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the height of the board.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "An integer representing the height of the board.",
                                "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                                "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
                                "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "3173",
                                "selfTime": "3173",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              },
                              {
                                "id": "287",
                                "parentId": "284",
                                "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                                "className": "nl.tudelft.jpacman.board.Board",
                                "methodName": "squareAt",
                                "color": "#984EA3",
                                "packageName": "nl.tudelft.jpacman.board",
                                "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                                "visibility": "public",
                                "simpleName": "squareAt(int,int)",
                                "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
                                "kind": "method",
                                "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
                                "metaSrc": "source code",
                                "description": "Retrieves the square at a given position on the board.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "nl.tudelft.jpacman.board.Square",
                                "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                                "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
                                "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "2661",
                                "selfTime": "2661",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              },
                              {
                                "id": "288",
                                "parentId": "284",
                                "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                                "className": "nl.tudelft.jpacman.board.Board",
                                "methodName": "getWidth",
                                "color": "#984EA3",
                                "packageName": "nl.tudelft.jpacman.board",
                                "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                                "visibility": "public",
                                "simpleName": "getWidth()",
                                "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
                                "kind": "method",
                                "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
                                "metaSrc": "source code",
                                "description": "Returns the width of the board.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "An integer representing the width of the board.",
                                "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                                "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
                                "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "152",
                                "selfTime": "152",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              },
                              {
                                "id": "289",
                                "parentId": "284",
                                "label": "nl.tudelft.jpacman.level.Level.getBoard()",
                                "className": "nl.tudelft.jpacman.level.Level",
                                "methodName": "getBoard",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
                                "visibility": "public",
                                "simpleName": "getBoard()",
                                "qualifiedName": "nl.tudelft.jpacman.level.Level.getBoard()",
                                "kind": "method",
                                "docComment": "Returns the board of this level.\r\n\r\n@return The board of this level.\r\n",
                                "metaSrc": "source code",
                                "description": "Retrieves the board from the level.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "",
                                "reason": "",
                                "howToUse": "Call getBoard() on an instance of the Level class to retrieve the board.",
                                "howItWorks": "The method returns the private field 'board' of the Level class.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "22",
                                "selfTime": "22",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "290",
                            "parentId": "283",
                            "label": "nl.tudelft.jpacman.level.Level.notifyObserversLevelRespawn()",
                            "className": "nl.tudelft.jpacman.level.Level",
                            "methodName": "notifyObserversLevelRespawn",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "464",
                            "selfTime": "442",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 6,
                              "subtreeDepth": 7,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": true,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "291",
                                "parentId": "290",
                                "label": "nl.tudelft.jpacman.level.Level.notifyObservers()",
                                "className": "nl.tudelft.jpacman.level.Level",
                                "methodName": "notifyObservers",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "",
                                "visibility": "",
                                "simpleName": "",
                                "qualifiedName": "",
                                "kind": "",
                                "docComment": "",
                                "metaSrc": "",
                                "description": "",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "",
                                "reason": "",
                                "howToUse": "",
                                "howItWorks": "",
                                "assertions": "",
                                "layer": "",
                                "time": "22",
                                "selfTime": "4",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 1,
                                  "totalDescendants": 5,
                                  "subtreeDepth": 6,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "292",
                                    "parentId": "291",
                                    "label": "nl.tudelft.jpacman.game.Game.levelRespawn()",
                                    "className": "nl.tudelft.jpacman.game.Game",
                                    "methodName": "levelRespawn",
                                    "color": "#8DD3C7",
                                    "packageName": "nl.tudelft.jpacman.game",
                                    "sourceCode": "",
                                    "visibility": "",
                                    "simpleName": "",
                                    "qualifiedName": "",
                                    "kind": "",
                                    "docComment": "",
                                    "metaSrc": "",
                                    "description": "",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "",
                                    "reason": "",
                                    "howToUse": "",
                                    "howItWorks": "",
                                    "assertions": "",
                                    "layer": "",
                                    "time": "16",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 1,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 5,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "293",
                                        "parentId": "292",
                                        "label": "nl.tudelft.jpacman.game.Game.respawn()",
                                        "className": "nl.tudelft.jpacman.game.Game",
                                        "methodName": "respawn",
                                        "color": "#8DD3C7",
                                        "packageName": "nl.tudelft.jpacman.game",
                                        "sourceCode": "",
                                        "visibility": "",
                                        "simpleName": "",
                                        "qualifiedName": "",
                                        "kind": "",
                                        "docComment": "",
                                        "metaSrc": "",
                                        "description": "",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "",
                                        "reason": "",
                                        "howToUse": "",
                                        "howItWorks": "",
                                        "assertions": "",
                                        "layer": "",
                                        "time": "15",
                                        "selfTime": "1",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 1,
                                          "totalDescendants": 3,
                                          "subtreeDepth": 4,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "294",
                                            "parentId": "293",
                                            "label": "nl.tudelft.jpacman.level.Level.respawn()",
                                            "className": "nl.tudelft.jpacman.level.Level",
                                            "methodName": "respawn",
                                            "color": "#E41A1C",
                                            "packageName": "nl.tudelft.jpacman.level",
                                            "sourceCode": "",
                                            "visibility": "",
                                            "simpleName": "",
                                            "qualifiedName": "",
                                            "kind": "",
                                            "docComment": "",
                                            "metaSrc": "",
                                            "description": "",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "",
                                            "reason": "",
                                            "howToUse": "",
                                            "howItWorks": "",
                                            "assertions": "",
                                            "layer": "",
                                            "time": "14",
                                            "selfTime": "7",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 2,
                                              "subtreeDepth": 3,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": false,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "295",
                                                "parentId": "294",
                                                "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                                                "className": "nl.tudelft.jpacman.board.Unit",
                                                "methodName": "occupy",
                                                "color": "#984EA3",
                                                "packageName": "nl.tudelft.jpacman.board",
                                                "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                                                "visibility": "public",
                                                "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
                                                "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
                                                "kind": "method",
                                                "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Moves the unit to a new square.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "Void",
                                                "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                                                "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
                                                "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "3",
                                                "selfTime": "0",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 1,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "296",
                                                    "parentId": "295",
                                                    "label": "nl.tudelft.jpacman.board.Square.remove()",
                                                    "className": "nl.tudelft.jpacman.board.Square",
                                                    "methodName": "remove",
                                                    "color": "#984EA3",
                                                    "packageName": "nl.tudelft.jpacman.board",
                                                    "sourceCode": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
                                                    "visibility": "default",
                                                    "simpleName": "remove(nl.tudelft.jpacman.board.Unit)",
                                                    "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
                                                    "kind": "method",
                                                    "docComment": "Removes the unit from this square if it was present.\r\n\r\n@param occupant\r\n\t\tThe unit to be removed from this square.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Removes an occupant from the square.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "void",
                                                    "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
                                                    "howToUse": "Call this method with an instance of nl.tudelft.jpacman.board.Unit that you want to remove from the square.",
                                                    "howItWorks": "The method removes a given occupant from the list of occupants in the square. It first asserts that the occupant is not null, then proceeds to remove it from the 'occupants' list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "3",
                                                    "selfTime": "1",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 0,
                                                      "totalDescendants": 0,
                                                      "subtreeDepth": 1,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": []
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "id": "297",
                            "parentId": "283",
                            "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                            "className": "nl.tudelft.jpacman.level.Level",
                            "methodName": "isAnyPlayerAlive",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
                            "visibility": "public",
                            "simpleName": "isAnyPlayerAlive()",
                            "qualifiedName": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                            "kind": "method",
                            "docComment": "Returns <code>true</code> iff at least one of the players in this level\r\nis alive.\r\n\r\n@return <code>true</code> if at least one of the registered players is\r\nalive.\r\n",
                            "metaSrc": "source code",
                            "description": "Checks if any player in the game is alive.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A boolean indicating whether any player is alive.",
                            "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
                            "howToUse": "Call this method to check if there are any players left in the game that are still alive.",
                            "howItWorks": "The method iterates through each player in the list and checks if they are alive using the isAlive() method. If any player is found to be alive, the method returns true; otherwise, it returns false after checking all players.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "184",
                            "selfTime": "93",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 1,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": true,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "298",
                                "parentId": "297",
                                "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                                "className": "nl.tudelft.jpacman.level.Player",
                                "methodName": "isAlive",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                                "visibility": "public",
                                "simpleName": "isAlive()",
                                "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
                                "kind": "method",
                                "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
                                "metaSrc": "source code",
                                "description": "Checks if the player is alive.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A boolean indicating whether the player is alive.",
                                "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                                "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
                                "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "5",
                                "selfTime": "5",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "299",
                            "parentId": "283",
                            "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerHit()",
                            "className": "nl.tudelft.jpacman.level.Level",
                            "methodName": "isAnyPlayerHit",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "183",
                            "selfTime": "105",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 2,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": true,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "300",
                                "parentId": "299",
                                "label": "nl.tudelft.jpacman.level.Player.isHit()",
                                "className": "nl.tudelft.jpacman.level.Player",
                                "methodName": "isHit",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "",
                                "visibility": "",
                                "simpleName": "",
                                "qualifiedName": "",
                                "kind": "",
                                "docComment": "",
                                "metaSrc": "",
                                "description": "",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "",
                                "reason": "",
                                "howToUse": "",
                                "howItWorks": "",
                                "assertions": "",
                                "layer": "",
                                "time": "13",
                                "selfTime": "13",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              },
                              {
                                "id": "301",
                                "parentId": "299",
                                "label": "nl.tudelft.jpacman.level.Player.setHit()",
                                "className": "nl.tudelft.jpacman.level.Player",
                                "methodName": "setHit",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "",
                                "visibility": "",
                                "simpleName": "",
                                "qualifiedName": "",
                                "kind": "",
                                "docComment": "",
                                "metaSrc": "",
                                "description": "",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "",
                                "reason": "",
                                "howToUse": "",
                                "howItWorks": "",
                                "assertions": "",
                                "layer": "",
                                "time": "4",
                                "selfTime": "4",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "302",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.level.PlayerCollisions.collide()",
                        "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                        "methodName": "collide",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "@java.lang.Override\r\npublic void collide(nl.tudelft.jpacman.board.Unit mover, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (mover instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerColliding(((nl.tudelft.jpacman.level.Player) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.ghostColliding(((nl.tudelft.jpacman.npc.Ghost) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.pelletColliding(((nl.tudelft.jpacman.level.Pellet) (mover)), collidedOn);\r\n    }\r\n}",
                        "visibility": "public",
                        "simpleName": "collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
                        "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.collide(nl.tudelft.jpacman.board.Unit,nl.tudelft.jpacman.board.Unit)",
                        "kind": "method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "Handles the logic for when two units collide in the game. Depending on the type of unit (player, ghost, or pellet), it calls the appropriate collision handling method.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "Void.",
                        "reason": "This method is part of the game logic, handling different types of collisions between units in the game. It delegates to specific collision handling methods based on the type of unit involved.",
                        "howToUse": "Call this method whenever two units collide in the game. The method will handle the appropriate collision logic based on the types of units involved.",
                        "howItWorks": "The method checks the type of the 'mover' and calls the corresponding collision handling method (playerColliding, ghostColliding, or pelletColliding). Each of these methods handles the specific logic for that type of collision.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "510",
                        "selfTime": "44",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 11,
                          "subtreeDepth": 5,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": true,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "303",
                            "parentId": "302",
                            "label": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding()",
                            "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                            "methodName": "playerColliding",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "private void playerColliding(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.playerVersusGhost(player, ((nl.tudelft.jpacman.npc.Ghost) (collidedOn)));\r\n    }\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.playerVersusPellet(player, ((nl.tudelft.jpacman.level.Pellet) (collidedOn)));\r\n    }\r\n}",
                            "visibility": "private",
                            "simpleName": "playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerColliding(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "Handles the logic for when a player collides with another unit in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "Void.",
                            "reason": "This method is part of the game logic, specifically handling collisions between a player and other units in the game. It needs to be in the Logic layer as it deals with the rules and behavior of the game.",
                            "howToUse": "Call this method whenever a collision event occurs between a player and another unit in the game.",
                            "howItWorks": "The method checks if the collidedOn object is an instance of Ghost or Pellet. Depending on the type, it calls either playerVersusGhost or playerVersusPellet methods to handle the specific collision logic.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "466",
                            "selfTime": "71",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 10,
                              "subtreeDepth": 4,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "304",
                                "parentId": "303",
                                "label": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet()",
                                "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                                "methodName": "playerVersusPellet",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Actual case of player consuming a pellet.\r\n *\r\n * @param player\r\n * \t\tThe player involved in the collision.\r\n * @param pellet\r\n * \t\tThe pellet involved in the collision.\r\n */\r\npublic void playerVersusPellet(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Pellet pellet) {\r\n    this.pointCalculator.consumedAPellet(player, pellet);\r\n    pellet.leaveSquare();\r\n}",
                                "visibility": "public",
                                "simpleName": "playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
                                "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
                                "kind": "method",
                                "docComment": "Actual case of player consuming a pellet.\r\n\r\n@param player\r\n\t\tThe player involved in the collision.\r\n@param pellet\r\n\t\tThe pellet involved in the collision.\r\n",
                                "metaSrc": "source code",
                                "description": "Handles the logic for when a player consumes a pellet in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "Void.",
                                "reason": "This method updates the game state when a player consumes a pellet, which is part of the core gameplay logic.",
                                "howToUse": "Call this method whenever a player consumes a pellet in the game.",
                                "howItWorks": "The method calls another method to update the player's points and then removes the pellet from its current square.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "389",
                                "selfTime": "108",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 5,
                                  "subtreeDepth": 3,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "305",
                                    "parentId": "304",
                                    "label": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet()",
                                    "className": "nl.tudelft.jpacman.points.DefaultPointCalculator",
                                    "methodName": "consumedAPellet",
                                    "color": "#BEBADA",
                                    "packageName": "nl.tudelft.jpacman.points",
                                    "sourceCode": "@java.lang.Override\r\npublic void consumedAPellet(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.level.Pellet pellet) {\r\n    player.addPoints(pellet.getValue());\r\n}",
                                    "visibility": "public",
                                    "simpleName": "consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
                                    "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.consumedAPellet(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.level.Pellet)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Adds points to a player's score when a pellet is consumed.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "void",
                                    "reason": "This method updates the player's score based on the value of the consumed pellet, which is a core game logic operation.",
                                    "howToUse": "Call this method whenever a player consumes a pellet in the game.",
                                    "howItWorks": "The method retrieves the point value from the pellet and adds it to the player's current score.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "146",
                                    "selfTime": "125",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 2,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "306",
                                        "parentId": "305",
                                        "label": "nl.tudelft.jpacman.level.Player.addPoints()",
                                        "className": "nl.tudelft.jpacman.level.Player",
                                        "methodName": "addPoints",
                                        "color": "#E41A1C",
                                        "packageName": "nl.tudelft.jpacman.level",
                                        "sourceCode": "/**\r\n * Adds points to the score of this player.\r\n *\r\n * @param points\r\n * \t\tThe amount of points to add to the points this player already\r\n * \t\thas.\r\n */\r\npublic void addPoints(int points) {\r\n    this.score += points;\r\n}",
                                        "visibility": "public",
                                        "simpleName": "addPoints(int)",
                                        "qualifiedName": "nl.tudelft.jpacman.level.Player.addPoints(int)",
                                        "kind": "method",
                                        "docComment": "Adds points to the score of this player.\r\n\r\n@param points\r\n\t\tThe amount of points to add to the points this player already\r\n\t\thas.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Adds points to the player's score.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "void",
                                        "reason": "This method is necessary for keeping track of the player's progress in the game.",
                                        "howToUse": "Call this method on an instance of Player, passing the number of points you want to add.",
                                        "howItWorks": "The method takes an integer 'points' as a parameter and adds it to the player's current score stored in the instance variable 'score'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "14",
                                        "selfTime": "14",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      },
                                      {
                                        "id": "307",
                                        "parentId": "305",
                                        "label": "nl.tudelft.jpacman.level.Pellet.getValue()",
                                        "className": "nl.tudelft.jpacman.level.Pellet",
                                        "methodName": "getValue",
                                        "color": "#E41A1C",
                                        "packageName": "nl.tudelft.jpacman.level",
                                        "sourceCode": "/**\r\n * Returns the point value of this pellet.\r\n *\r\n * @return The point value of this pellet.\r\n */\r\npublic int getValue() {\r\n    return this.value;\r\n}",
                                        "visibility": "public",
                                        "simpleName": "getValue()",
                                        "qualifiedName": "nl.tudelft.jpacman.level.Pellet.getValue()",
                                        "kind": "method",
                                        "docComment": "Returns the point value of this pellet.\r\n\r\n@return The point value of this pellet.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the value of a pellet in the game.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "An integer representing the value of the pellet.",
                                        "reason": "This method provides access to the internal state of a pellet, which is part of the game logic.",
                                        "howToUse": "Call getValue() on an instance of Pellet to retrieve its value.",
                                        "howItWorks": "The method simply returns the integer value stored in the 'value' field of the Pellet object.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "7",
                                        "selfTime": "7",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "308",
                                    "parentId": "304",
                                    "label": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
                                    "className": "nl.tudelft.jpacman.board.Unit",
                                    "methodName": "leaveSquare",
                                    "color": "#984EA3",
                                    "packageName": "nl.tudelft.jpacman.board",
                                    "sourceCode": "/**\r\n * Leaves the currently occupying square, thus removing this unit from the board.\r\n */\r\npublic void leaveSquare() {\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n        this.square = null;\r\n    }\r\n    assert this.invariant();\r\n}",
                                    "visibility": "public",
                                    "simpleName": "leaveSquare()",
                                    "qualifiedName": "nl.tudelft.jpacman.board.Unit.leaveSquare()",
                                    "kind": "method",
                                    "docComment": "Leaves the currently occupying square, thus removing this unit from the board.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Removes the unit from its current square if it is present.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "Void.",
                                    "reason": "This method is part of the application logic layer as it deals with the internal state and behavior of game units within the board, which is a core aspect of the game's domain logic.",
                                    "howToUse": "Call this method on an instance of Unit to remove it from its current square.",
                                    "howItWorks": "The method checks if the unit is currently on a square. If so, it removes itself from that square and sets the square reference to null. It then asserts the invariant to ensure the unit's state remains consistent.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "135",
                                    "selfTime": "33",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 1,
                                      "totalDescendants": 1,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "309",
                                        "parentId": "308",
                                        "label": "nl.tudelft.jpacman.board.Square.remove()",
                                        "className": "nl.tudelft.jpacman.board.Square",
                                        "methodName": "remove",
                                        "color": "#984EA3",
                                        "packageName": "nl.tudelft.jpacman.board",
                                        "sourceCode": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
                                        "visibility": "default",
                                        "simpleName": "remove(nl.tudelft.jpacman.board.Unit)",
                                        "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
                                        "kind": "method",
                                        "docComment": "Removes the unit from this square if it was present.\r\n\r\n@param occupant\r\n\t\tThe unit to be removed from this square.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Removes an occupant from the square.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "void",
                                        "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
                                        "howToUse": "Call this method with an instance of nl.tudelft.jpacman.board.Unit that you want to remove from the square.",
                                        "howItWorks": "The method removes a given occupant from the list of occupants in the square. It first asserts that the occupant is not null, then proceeds to remove it from the 'occupants' list.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "102",
                                        "selfTime": "36",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "id": "310",
                                "parentId": "303",
                                "label": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost()",
                                "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                                "methodName": "playerVersusGhost",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Actual case of player bumping into ghost or vice versa.\r\n *\r\n * @param player\r\n * \t\tThe player involved in the collision.\r\n * @param ghost\r\n * \t\tThe ghost involved in the collision.\r\n */\r\npublic void playerVersusGhost(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    this.pointCalculator.collidedWithAGhost(player, ghost);\r\n    player.setAlive(false);\r\n    player.setKiller(ghost);\r\n}",
                                "visibility": "public",
                                "simpleName": "playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
                                "qualifiedName": "nl.tudelft.jpacman.level.PlayerCollisions.playerVersusGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
                                "kind": "method",
                                "docComment": "Actual case of player bumping into ghost or vice versa.\r\n\r\n@param player\r\n\t\tThe player involved in the collision.\r\n@param ghost\r\n\t\tThe ghost involved in the collision.\r\n",
                                "metaSrc": "source code",
                                "description": "Handles the logic for when a player collides with a ghost in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "Void.",
                                "reason": "This method is part of the game logic, specifically handling interactions between players and ghosts. It updates the player's state upon collision with a ghost.",
                                "howToUse": "Call this method whenever a player collides with a ghost in the game to handle the collision logic.",
                                "howItWorks": "The method calls another method to update the player's points, sets the player as not alive, and assigns the ghost as the killer of the player.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "6",
                                "selfTime": "3",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 3,
                                  "totalDescendants": 3,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "311",
                                    "parentId": "310",
                                    "label": "nl.tudelft.jpacman.level.Player.setKiller()",
                                    "className": "nl.tudelft.jpacman.level.Player",
                                    "methodName": "setKiller",
                                    "color": "#E41A1C",
                                    "packageName": "nl.tudelft.jpacman.level",
                                    "sourceCode": "/**\r\n * Sets the cause of death.\r\n *\r\n * @param killer\r\n * \t\tis set if collision with ghost happens.\r\n */\r\npublic void setKiller(nl.tudelft.jpacman.board.Unit killer) {\r\n    this.killer = killer;\r\n}",
                                    "visibility": "public",
                                    "simpleName": "setKiller(nl.tudelft.jpacman.board.Unit)",
                                    "qualifiedName": "nl.tudelft.jpacman.level.Player.setKiller(nl.tudelft.jpacman.board.Unit)",
                                    "kind": "method",
                                    "docComment": "Sets the cause of death.\r\n\r\n@param killer\r\n\t\tis set if collision with ghost happens.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Sets the killer for the player.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "void",
                                    "reason": "This method is necessary for managing the game logic related to player deaths and interactions with other entities.",
                                    "howToUse": "Call setKiller with a Unit object representing the entity that can kill the player.",
                                    "howItWorks": "The method assigns the provided Unit object as the killer to the current Player instance.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "1",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  },
                                  {
                                    "id": "312",
                                    "parentId": "310",
                                    "label": "nl.tudelft.jpacman.level.Player.takeDamage()",
                                    "className": "nl.tudelft.jpacman.level.Player",
                                    "methodName": "takeDamage",
                                    "color": "#E41A1C",
                                    "packageName": "nl.tudelft.jpacman.level",
                                    "sourceCode": "",
                                    "visibility": "",
                                    "simpleName": "",
                                    "qualifiedName": "",
                                    "kind": "",
                                    "docComment": "",
                                    "metaSrc": "",
                                    "description": "",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "",
                                    "reason": "",
                                    "howToUse": "",
                                    "howItWorks": "",
                                    "assertions": "",
                                    "layer": "",
                                    "time": "1",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  },
                                  {
                                    "id": "313",
                                    "parentId": "310",
                                    "label": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost()",
                                    "className": "nl.tudelft.jpacman.points.DefaultPointCalculator",
                                    "methodName": "collidedWithAGhost",
                                    "color": "#BEBADA",
                                    "packageName": "nl.tudelft.jpacman.points",
                                    "sourceCode": "@java.lang.Override\r\npublic void collidedWithAGhost(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    // no points for colliding with a ghost\r\n}",
                                    "visibility": "public",
                                    "simpleName": "collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
                                    "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.collidedWithAGhost(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.npc.Ghost)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "",
                                    "reason": "",
                                    "howToUse": "",
                                    "howItWorks": "",
                                    "assertions": "",
                                    "layer": "",
                                    "time": "1",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "314",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "occupy",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                        "visibility": "public",
                        "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
                        "kind": "method",
                        "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
                        "metaSrc": "source code",
                        "description": "Moves the unit to a new square.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "Void",
                        "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                        "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
                        "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "327",
                        "selfTime": "88",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 2,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": true,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "315",
                            "parentId": "314",
                            "label": "nl.tudelft.jpacman.board.Square.remove()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "remove",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
                            "visibility": "default",
                            "simpleName": "remove(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.remove(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "Removes the unit from this square if it was present.\r\n\r\n@param occupant\r\n\t\tThe unit to be removed from this square.\r\n",
                            "metaSrc": "source code",
                            "description": "Removes an occupant from the square.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "void",
                            "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
                            "howToUse": "Call this method with an instance of nl.tudelft.jpacman.board.Unit that you want to remove from the square.",
                            "howItWorks": "The method removes a given occupant from the list of occupants in the square. It first asserts that the occupant is not null, then proceeds to remove it from the 'occupants' list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "179",
                            "selfTime": "31",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "316",
                            "parentId": "314",
                            "label": "nl.tudelft.jpacman.board.Square.put()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "put",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                            "visibility": "default",
                            "simpleName": "put(nl.tudelft.jpacman.board.Unit)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
                            "kind": "method",
                            "docComment": "Adds a new occupant to this square.\r\n\r\n@param occupant\r\n\t\tThe unit to occupy this square.\r\n",
                            "metaSrc": "source code",
                            "description": "Adds an occupant to the square.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "void",
                            "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                            "howToUse": "Call put with a Unit object as the parameter.",
                            "howItWorks": "Checks if the occupant is not null and not already present in the occupants list, then adds the occupant to the list.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "60",
                            "selfTime": "30",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "317",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.level.Level.isInProgress()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "isInProgress",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Returns whether this level is in progress, i.e. whether moves can be made\r\n * on the board.\r\n *\r\n * @return <code>true</code> iff this level is in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
                        "visibility": "public",
                        "simpleName": "isInProgress()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Level.isInProgress()",
                        "kind": "method",
                        "docComment": "Returns whether this level is in progress, i.e. whether moves can be made\r\non the board.\r\n\r\n@return <code>true</code> iff this level is in progress.\r\n",
                        "metaSrc": "source code",
                        "description": "Checks if the level is currently in progress.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A boolean indicating whether the level is currently in progress.",
                        "reason": "This method provides a way to check the current state of the game level without modifying any data.",
                        "howToUse": "Call this method to determine if the game level is still active.",
                        "howItWorks": "The method returns the value of the private field 'inProgress'.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "62",
                        "selfTime": "62",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "318",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getSquareAt",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getSquareAt(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Returns the square adjacent to this square.\r\n\r\n@param direction\r\n\t\tThe direction of the adjacent square.\r\n@return The adjacent square in the given direction.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square adjacent to the current square in a given direction.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square",
                        "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                        "howToUse": "Call this method on an instance of Square, passing a Direction enum value (e.g., UP, DOWN, LEFT, RIGHT) to get the adjacent square in that direction.",
                        "howItWorks": "The method accesses a map of neighboring squares stored in the 'neighbours' field and returns the square corresponding to the given direction.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "55",
                        "selfTime": "32",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "319",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                        "className": "nl.tudelft.jpacman.board.Square",
                        "methodName": "getOccupants",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                        "visibility": "public",
                        "simpleName": "getOccupants()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                        "kind": "method",
                        "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the list of units occupying a square in the game board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An immutable list of units occupying the square.",
                        "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                        "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                        "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "52",
                        "selfTime": "22",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "320",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "getSquare",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                        "visibility": "public",
                        "simpleName": "getSquare()",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.getSquare()",
                        "kind": "method",
                        "docComment": "Returns the square this unit is currently occupying.\r\nPrecondition: <code>hasSquare()</code>.\r\n\r\n@return The square this unit is currently occupying.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the square that a unit is currently occupying.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                        "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                        "howToUse": "Call getSquare() on an instance of nl.tudelft.jpacman.board.Unit to retrieve the square it is currently occupying.",
                        "howItWorks": "The method returns the value stored in the 'square' field, which should be a non-null reference to a Square object. Assertions are used to ensure that the unit's invariant holds true before returning the square.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "18",
                        "selfTime": "18",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "321",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.Unit.setDirection()",
                        "className": "nl.tudelft.jpacman.board.Unit",
                        "methodName": "setDirection",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "/**\r\n * Sets this unit to face the new direction.\r\n *\r\n * @param newDirection\r\n * \t\tThe new direction this unit is facing.\r\n */\r\npublic void setDirection(nl.tudelft.jpacman.board.Direction newDirection) {\r\n    this.direction = newDirection;\r\n}",
                        "visibility": "public",
                        "simpleName": "setDirection(nl.tudelft.jpacman.board.Direction)",
                        "qualifiedName": "nl.tudelft.jpacman.board.Unit.setDirection(nl.tudelft.jpacman.board.Direction)",
                        "kind": "method",
                        "docComment": "Sets this unit to face the new direction.\r\n\r\n@param newDirection\r\n\t\tThe new direction this unit is facing.\r\n",
                        "metaSrc": "source code",
                        "description": "Sets the direction of a unit in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "void",
                        "reason": "This method is necessary for controlling the movement of units in the game, which falls under the domain logic.",
                        "howToUse": "Call setDirection with a Direction enum value to change the unit's movement direction.",
                        "howItWorks": "The method updates the 'direction' field of the Unit object with the newDirection parameter.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "18",
                        "selfTime": "18",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "322",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                        "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                        "methodName": "isAccessibleTo",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                        "visibility": "public",
                        "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                        "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                        "kind": "method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "10",
                        "selfTime": "10",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      },
                      {
                        "id": "323",
                        "parentId": "282",
                        "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                        "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                        "methodName": "isAccessibleTo",
                        "color": "#984EA3",
                        "packageName": "nl.tudelft.jpacman.board",
                        "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                        "visibility": "public",
                        "simpleName": "isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                        "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo(nl.tudelft.jpacman.board.Unit)",
                        "kind": "method",
                        "docComment": "",
                        "metaSrc": "source code",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "1",
                        "selfTime": "1",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "324",
                    "parentId": "281",
                    "label": "nl.tudelft.jpacman.game.Game.isInProgress()",
                    "className": "nl.tudelft.jpacman.game.Game",
                    "methodName": "isInProgress",
                    "color": "#8DD3C7",
                    "packageName": "nl.tudelft.jpacman.game",
                    "sourceCode": "/**\r\n *\r\n * @return <code>true</code> iff the game is started and in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
                    "visibility": "public",
                    "simpleName": "isInProgress()",
                    "qualifiedName": "nl.tudelft.jpacman.game.Game.isInProgress()",
                    "kind": "method",
                    "docComment": "\r\n@return <code>true</code> iff the game is started and in progress.\r\n",
                    "metaSrc": "source code",
                    "description": "Checks if the game is currently in progress.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A boolean indicating whether the game is currently in progress.",
                    "reason": "This method provides a way to check the current state of the game, which is essential for logic operations within the application.",
                    "howToUse": "Call this method to determine whether the game is active or not.",
                    "howItWorks": "The method returns the value of the private field 'inProgress'.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "21",
                    "selfTime": "21",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "325",
                    "parentId": "281",
                    "label": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
                    "className": "nl.tudelft.jpacman.game.SinglePlayerGame",
                    "methodName": "getLevel",
                    "color": "#8DD3C7",
                    "packageName": "nl.tudelft.jpacman.game",
                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.level.Level getLevel() {\r\n    return this.level;\r\n}",
                    "visibility": "public",
                    "simpleName": "getLevel()",
                    "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "4",
                    "selfTime": "4",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "326",
                    "parentId": "281",
                    "label": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved()",
                    "className": "nl.tudelft.jpacman.points.DefaultPointCalculator",
                    "methodName": "pacmanMoved",
                    "color": "#BEBADA",
                    "packageName": "nl.tudelft.jpacman.points",
                    "sourceCode": "@java.lang.Override\r\npublic void pacmanMoved(nl.tudelft.jpacman.level.Player player, nl.tudelft.jpacman.board.Direction direction) {\r\n    // no points for moving\r\n}",
                    "visibility": "public",
                    "simpleName": "pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
                    "qualifiedName": "nl.tudelft.jpacman.points.DefaultPointCalculator.pacmanMoved(nl.tudelft.jpacman.level.Player,nl.tudelft.jpacman.board.Direction)",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "4",
                    "selfTime": "4",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "327",
                "parentId": "280",
                "label": "nl.tudelft.jpacman.Launcher.getSinglePlayer()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "getSinglePlayer",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "private nl.tudelft.jpacman.level.Player getSinglePlayer(final nl.tudelft.jpacman.game.Game game) {\r\n    java.util.List<nl.tudelft.jpacman.level.Player> players = game.getPlayers();\r\n    if (players.isEmpty()) {\r\n        throw new java.lang.IllegalArgumentException(\"Game has 0 players.\");\r\n    }\r\n    return players.get(0);\r\n}",
                "visibility": "private",
                "simpleName": "getSinglePlayer(nl.tudelft.jpacman.game.Game)",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.getSinglePlayer(nl.tudelft.jpacman.game.Game)",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "Retrieves the single player from a game.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A nl.tudelft.jpacman.level.Player object representing the single player in the game.",
                "reason": "This method is necessary for accessing the player in the game logic, as it provides a way to interact with the player's actions and state without exposing the entire game state.",
                "howToUse": "Call this method with an instance of nl.tudelft.jpacman.game.Game to get the single player associated with that game.",
                "howItWorks": "The method retrieves all players from the game using game.getPlayers() and returns the first player in the list. If no players are found, it throws an IllegalArgumentException.",
                "assertions": "",
                "layer": "Logic",
                "time": "555",
                "selfTime": "140",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "328",
                    "parentId": "327",
                    "label": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
                    "className": "nl.tudelft.jpacman.game.SinglePlayerGame",
                    "methodName": "getPlayers",
                    "color": "#8DD3C7",
                    "packageName": "nl.tudelft.jpacman.game",
                    "sourceCode": "@java.lang.Override\r\npublic java.util.List<nl.tudelft.jpacman.level.Player> getPlayers() {\r\n    return com.google.common.collect.ImmutableList.of(this.player);\r\n}",
                    "visibility": "public",
                    "simpleName": "getPlayers()",
                    "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getPlayers()",
                    "kind": "method",
                    "docComment": "",
                    "metaSrc": "source code",
                    "description": "",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "",
                    "howItWorks": "",
                    "assertions": "",
                    "layer": "",
                    "time": "138",
                    "selfTime": "34",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "329",
                "parentId": "280",
                "label": "nl.tudelft.jpacman.Launcher.getGame()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "getGame",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "/**\r\n *\r\n * @return The game object this launcher will start when {@link #launch()}\r\nis called.\r\n */\r\npublic nl.tudelft.jpacman.game.Game getGame() {\r\n    return this.game;\r\n}",
                "visibility": "public",
                "simpleName": "getGame()",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.getGame()",
                "kind": "method",
                "docComment": "\r\n@return The game object this launcher will start when {@link #launch()}\r\nis called.\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the current game instance.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A nl.tudelft.jpacman.game.Game object representing the current game.",
                "reason": "This method provides access to the current game state without modifying it, which fits the accessor stereotype and belongs in the logic layer.",
                "howToUse": "Call getGame() on an instance of Launcher to retrieve the current game object.",
                "howItWorks": "The method returns the private field 'game' of the Launcher class.",
                "assertions": "",
                "layer": "Logic",
                "time": "27",
                "selfTime": "27",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          }
        ]
      },
      {
        "id": "330",
        "parentId": "256",
        "label": "nl.tudelft.jpacman.ui.ButtonPanel.lambda$new$0()",
        "className": "nl.tudelft.jpacman.ui.ButtonPanel",
        "methodName": "lambda$new$0",
        "color": "#FF7F00",
        "packageName": "nl.tudelft.jpacman.ui",
        "sourceCode": "",
        "visibility": "",
        "simpleName": "",
        "qualifiedName": "",
        "kind": "",
        "docComment": "",
        "metaSrc": "",
        "description": "",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "",
        "reason": "",
        "howToUse": "",
        "howItWorks": "",
        "assertions": "",
        "layer": "",
        "time": "3650",
        "selfTime": "19",
        "percent": "0.0",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 2,
          "totalDescendants": 27,
          "subtreeDepth": 6,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": true,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "331",
            "parentId": "330",
            "label": "nl.tudelft.jpacman.game.Game.start()",
            "className": "nl.tudelft.jpacman.game.Game",
            "methodName": "start",
            "color": "#8DD3C7",
            "packageName": "nl.tudelft.jpacman.game",
            "sourceCode": "/**\r\n * Starts or resumes the game.\r\n */\r\npublic void start() {\r\n    synchronized(this.progressLock) {\r\n        if (this.isInProgress()) {\r\n            return;\r\n        }\r\n        if (this.getLevel().isAnyPlayerAlive() && (this.getLevel().remainingPellets() > 0)) {\r\n            this.inProgress = true;\r\n            this.getLevel().addObserver(this);\r\n            this.getLevel().start();\r\n        }\r\n    }\r\n}",
            "visibility": "public",
            "simpleName": "start()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.start()",
            "kind": "method",
            "docComment": "Starts or resumes the game.\r\n",
            "metaSrc": "source code",
            "description": "Starts the game if it is not already in progress and there are players alive with pellets remaining.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "Void. The method does not return any value.",
            "reason": "This method ensures that the game can only be started under specific conditions, maintaining the integrity of the game state.",
            "howToUse": "Call this method on an instance of Game to start the game if all conditions are met.",
            "howItWorks": "Checks if the game is already in progress. If not, it verifies that there are players alive and pellets remaining. If both conditions are met, it sets the game as in progress, adds an observer to the level, and starts the level.",
            "assertions": "",
            "layer": "Logic",
            "time": "3123",
            "selfTime": "13",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 6,
              "totalDescendants": 23,
              "subtreeDepth": 5,
              "level": 3
            },
            "status": {
              "fanOut": true,
              "implementationEntryPoint": true,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "332",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.level.Level.start()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "start",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Starts or resumes this level, allowing movement and (re)starting the\r\n * NPCs.\r\n */\r\npublic void start() {\r\n    synchronized(this.startStopLock) {\r\n        if (this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.startNPCs();\r\n        this.inProgress = true;\r\n        this.updateObservers();\r\n    }\r\n}",
                "visibility": "public",
                "simpleName": "start()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.start()",
                "kind": "method",
                "docComment": "Starts or resumes this level, allowing movement and (re)starting the\r\nNPCs.\r\n",
                "metaSrc": "source code",
                "description": "Starts the movement of NPCs (Ghosts) in a Pacman level and sets the game as in progress.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "Void. The method does not return any value.",
                "reason": "This method is responsible for initiating the movement of NPCs and setting the game state to 'in progress'. It ensures that these actions are synchronized to avoid race conditions.",
                "howToUse": "Call this method on an instance of the Level class when you want to start the game or resume it after a pause.",
                "howItWorks": "The method checks if the level is already in progress. If not, it starts the NPCs and sets the 'inProgress' flag to true. It then notifies observers about the game's state.",
                "assertions": "",
                "layer": "Logic",
                "time": "2248",
                "selfTime": "6",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 2,
                  "totalDescendants": 11,
                  "subtreeDepth": 4,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "333",
                    "parentId": "332",
                    "label": "nl.tudelft.jpacman.level.Level.startNPCs()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "startNPCs",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Starts all NPC movement scheduling.\r\n */\r\nprivate void startNPCs() {\r\n    for (final nl.tudelft.jpacman.npc.Ghost npc : this.npcs.keySet()) {\r\n        java.util.concurrent.ScheduledExecutorService service = java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\r\n        service.schedule(new nl.tudelft.jpacman.level.Level.NpcMoveTask(service, npc), npc.getInterval() / 2, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n        this.npcs.put(npc, service);\r\n    }\r\n}",
                    "visibility": "private",
                    "simpleName": "startNPCs()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.startNPCs()",
                    "kind": "method",
                    "docComment": "Starts all NPC movement scheduling.\r\n",
                    "metaSrc": "source code",
                    "description": "Starts the movement of NPCs (Ghosts) in a Pacman level.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "void",
                    "reason": "This method is responsible for initializing and starting the movement of ghosts in the game. It sets up a scheduled task for each ghost to move at its specified interval.",
                    "howToUse": "Call this method when you want to start the movement of NPCs in the game level.",
                    "howItWorks": "The method iterates over all NPCs, creates a ScheduledExecutorService for each, and schedules a task that moves the NPC. The task is scheduled to run after half of the ghost's interval time.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "1333",
                    "selfTime": "793",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": true,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "334",
                        "parentId": "333",
                        "label": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
                        "className": "nl.tudelft.jpacman.npc.Ghost",
                        "methodName": "getInterval",
                        "color": "#377EB8",
                        "packageName": "nl.tudelft.jpacman.npc",
                        "sourceCode": "/**\r\n * The time that should be taken between moves.\r\n *\r\n * @return The suggested delay between moves in milliseconds.\r\n */\r\npublic long getInterval() {\r\n    return this.moveInterval + new java.util.Random().nextInt(this.intervalVariation);\r\n}",
                        "visibility": "public",
                        "simpleName": "getInterval()",
                        "qualifiedName": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
                        "kind": "method",
                        "docComment": "The time that should be taken between moves.\r\n\r\n@return The suggested delay between moves in milliseconds.\r\n",
                        "metaSrc": "source code",
                        "description": "Calculates the interval for ghost movement in Pacman.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A long representing the adjusted movement interval for ghosts.",
                        "reason": "This method adjusts the movement speed of ghosts by adding a random variation, which is part of the game logic.",
                        "howToUse": "Call this method to get the adjusted movement interval for ghosts.",
                        "howItWorks": "Adds a random variation to a fixed move interval.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "79",
                        "selfTime": "26",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  },
                  {
                    "id": "335",
                    "parentId": "332",
                    "label": "nl.tudelft.jpacman.level.Level.updateObservers()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "updateObservers",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Updates the observers about the state of this level.\r\n */\r\nprivate void updateObservers() {\r\n    java.lang.Iterable<nl.tudelft.jpacman.level.Level.LevelObserver> observers = new java.util.ArrayList<nl.tudelft.jpacman.level.Level.LevelObserver>(this.observers);\r\n    if (!this.isAnyPlayerAlive()) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelLost();\r\n        }\r\n    }\r\n    if (this.remainingPellets() == 0) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelWon();\r\n        }\r\n    }\r\n}",
                    "visibility": "private",
                    "simpleName": "updateObservers()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.updateObservers()",
                    "kind": "method",
                    "docComment": "Updates the observers about the state of this level.\r\n",
                    "metaSrc": "source code",
                    "description": "Notifies observers about the game's outcome based on player status and remaining pellets.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "void",
                    "reason": "This method is responsible for notifying observers about the game's outcome, which is a part of the application logic.",
                    "howToUse": "Call this method when the game state changes (e.g., player dies or all pellets are collected).",
                    "howItWorks": "The method iterates over a copy of the observers list and calls either levelLost() or levelWon() based on the current game state.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "909",
                    "selfTime": "14",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 8,
                      "subtreeDepth": 3,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "336",
                        "parentId": "335",
                        "label": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "remainingPellets",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
                        "visibility": "public",
                        "simpleName": "remainingPellets()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                        "kind": "method",
                        "docComment": "Counts the pellets remaining on the board.\r\n\r\n@return The amount of pellets remaining on the board.\r\n",
                        "metaSrc": "source code",
                        "description": "Counts the remaining pellets on a board.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "The number of remaining pellets as an integer.",
                        "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
                        "howToUse": "Call this method on a Level object to get the count of remaining pellets.",
                        "howItWorks": "The method iterates through each square on the board and counts the number of Pellet objects present.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "870",
                        "selfTime": "401",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 4,
                          "totalDescendants": 4,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": true,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "337",
                            "parentId": "336",
                            "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "className": "nl.tudelft.jpacman.board.Square",
                            "methodName": "getOccupants",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                            "visibility": "public",
                            "simpleName": "getOccupants()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                            "kind": "method",
                            "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the list of units occupying a square in the game board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An immutable list of units occupying the square.",
                            "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                            "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                            "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "161",
                            "selfTime": "100",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "338",
                            "parentId": "336",
                            "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                            "className": "nl.tudelft.jpacman.board.Board",
                            "methodName": "squareAt",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                            "visibility": "public",
                            "simpleName": "squareAt(int,int)",
                            "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
                            "kind": "method",
                            "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the square at a given position on the board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.board.Square",
                            "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                            "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
                            "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "56",
                            "selfTime": "56",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "339",
                            "parentId": "336",
                            "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                            "className": "nl.tudelft.jpacman.board.Board",
                            "methodName": "getHeight",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                            "visibility": "public",
                            "simpleName": "getHeight()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
                            "kind": "method",
                            "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the height of the board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An integer representing the height of the board.",
                            "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                            "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
                            "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "39",
                            "selfTime": "39",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          },
                          {
                            "id": "340",
                            "parentId": "336",
                            "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                            "className": "nl.tudelft.jpacman.board.Board",
                            "methodName": "getWidth",
                            "color": "#984EA3",
                            "packageName": "nl.tudelft.jpacman.board",
                            "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                            "visibility": "public",
                            "simpleName": "getWidth()",
                            "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
                            "kind": "method",
                            "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
                            "metaSrc": "source code",
                            "description": "Returns the width of the board.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An integer representing the width of the board.",
                            "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                            "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
                            "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "341",
                        "parentId": "335",
                        "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerHit()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "isAnyPlayerHit",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "",
                        "visibility": "",
                        "simpleName": "",
                        "qualifiedName": "",
                        "kind": "",
                        "docComment": "",
                        "metaSrc": "",
                        "description": "",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "",
                        "reason": "",
                        "howToUse": "",
                        "howItWorks": "",
                        "assertions": "",
                        "layer": "",
                        "time": "10",
                        "selfTime": "6",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 1,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "342",
                            "parentId": "341",
                            "label": "nl.tudelft.jpacman.level.Player.isHit()",
                            "className": "nl.tudelft.jpacman.level.Player",
                            "methodName": "isHit",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "",
                            "visibility": "",
                            "simpleName": "",
                            "qualifiedName": "",
                            "kind": "",
                            "docComment": "",
                            "metaSrc": "",
                            "description": "",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "2",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "343",
                        "parentId": "335",
                        "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                        "className": "nl.tudelft.jpacman.level.Level",
                        "methodName": "isAnyPlayerAlive",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
                        "visibility": "public",
                        "simpleName": "isAnyPlayerAlive()",
                        "qualifiedName": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                        "kind": "method",
                        "docComment": "Returns <code>true</code> iff at least one of the players in this level\r\nis alive.\r\n\r\n@return <code>true</code> if at least one of the registered players is\r\nalive.\r\n",
                        "metaSrc": "source code",
                        "description": "Checks if any player in the game is alive.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "A boolean indicating whether any player is alive.",
                        "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
                        "howToUse": "Call this method to check if there are any players left in the game that are still alive.",
                        "howItWorks": "The method iterates through each player in the list and checks if they are alive using the isAlive() method. If any player is found to be alive, the method returns true; otherwise, it returns false after checking all players.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "3",
                        "selfTime": "1",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "344",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "remainingPellets",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
                "visibility": "public",
                "simpleName": "remainingPellets()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                "kind": "method",
                "docComment": "Counts the pellets remaining on the board.\r\n\r\n@return The amount of pellets remaining on the board.\r\n",
                "metaSrc": "source code",
                "description": "Counts the remaining pellets on a board.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "The number of remaining pellets as an integer.",
                "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
                "howToUse": "Call this method on a Level object to get the count of remaining pellets.",
                "howItWorks": "The method iterates through each square on the board and counts the number of Pellet objects present.",
                "assertions": "",
                "layer": "Logic",
                "time": "839",
                "selfTime": "386",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 5,
                  "totalDescendants": 5,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": true,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "345",
                    "parentId": "344",
                    "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                    "className": "nl.tudelft.jpacman.board.Square",
                    "methodName": "getOccupants",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                    "visibility": "public",
                    "simpleName": "getOccupants()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Square.getOccupants()",
                    "kind": "method",
                    "docComment": "Returns an immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n\r\n@return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the list of units occupying a square in the game board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An immutable list of units occupying the square.",
                    "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                    "howToUse": "Call this method on an instance of Square to get the list of units on that square.",
                    "howItWorks": "The method returns an immutable copy of the list of units currently occupying the square.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "161",
                    "selfTime": "91",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "346",
                    "parentId": "344",
                    "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                    "className": "nl.tudelft.jpacman.board.Board",
                    "methodName": "squareAt",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                    "visibility": "public",
                    "simpleName": "squareAt(int,int)",
                    "qualifiedName": "nl.tudelft.jpacman.board.Board.squareAt(int,int)",
                    "kind": "method",
                    "docComment": "Returns the square at the given <code>x,y</code> position.\r\n\r\nPrecondition: The <code>(x, y)</code> coordinates are within the\r\nwidth and height of the board.\r\n\r\n@param x\r\n\t\tThe <code>x</code> position (column) of the requested square.\r\n@param y\r\n\t\tThe <code>y</code> position (row) of the requested square.\r\n@return The square at the given <code>x,y</code> position (never null).\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the square at a given position on the board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.board.Square",
                    "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                    "howToUse": "Call this method with the x and y coordinates to get the square at that position on the board.",
                    "howItWorks": "The method first checks if the given coordinates are within the borders of the board using the `withinBorders` method. If they are, it retrieves the square from the board array and returns it. Assertions ensure that the returned square is not null.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "42",
                    "selfTime": "42",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "347",
                    "parentId": "344",
                    "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                    "className": "nl.tudelft.jpacman.board.Board",
                    "methodName": "getHeight",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                    "visibility": "public",
                    "simpleName": "getHeight()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Board.getHeight()",
                    "kind": "method",
                    "docComment": "Returns the number of rows.\r\n\r\n@return The height of this board.\r\n",
                    "metaSrc": "source code",
                    "description": "Returns the height of the board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An integer representing the height of the board.",
                    "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                    "howToUse": "Call getHeight() on an instance of nl.tudelft.jpacman.board.Board to retrieve the height of the board.",
                    "howItWorks": "The method accesses the first row of the 'board' array and returns its length, which represents the height of the board.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "40",
                    "selfTime": "40",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "348",
                    "parentId": "344",
                    "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                    "className": "nl.tudelft.jpacman.board.Board",
                    "methodName": "getWidth",
                    "color": "#984EA3",
                    "packageName": "nl.tudelft.jpacman.board",
                    "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                    "visibility": "public",
                    "simpleName": "getWidth()",
                    "qualifiedName": "nl.tudelft.jpacman.board.Board.getWidth()",
                    "kind": "method",
                    "docComment": "Returns the number of columns.\r\n\r\n@return The width of this board.\r\n",
                    "metaSrc": "source code",
                    "description": "Returns the width of the board.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An integer representing the width of the board.",
                    "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                    "howToUse": "Call this method on an instance of the Board class to get the width of the board.",
                    "howItWorks": "The method returns the length of the 'board' array, which represents the width of the board.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "4",
                    "selfTime": "4",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  },
                  {
                    "id": "349",
                    "parentId": "344",
                    "label": "nl.tudelft.jpacman.level.Level.getBoard()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "getBoard",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
                    "visibility": "public",
                    "simpleName": "getBoard()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.getBoard()",
                    "kind": "method",
                    "docComment": "Returns the board of this level.\r\n\r\n@return The board of this level.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the board from the level.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "",
                    "reason": "",
                    "howToUse": "Call getBoard() on an instance of the Level class to retrieve the board.",
                    "howItWorks": "The method returns the private field 'board' of the Level class.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "1",
                    "selfTime": "1",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "350",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.level.Level.addObserver()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "addObserver",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Adds an observer that will be notified when the level is won or lost.\r\n *\r\n * @param observer\r\n * \t\tThe observer that will be notified.\r\n */\r\npublic void addObserver(nl.tudelft.jpacman.level.Level.LevelObserver observer) {\r\n    this.observers.add(observer);\r\n}",
                "visibility": "public",
                "simpleName": "addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.addObserver(nl.tudelft.jpacman.level.Level$LevelObserver)",
                "kind": "method",
                "docComment": "Adds an observer that will be notified when the level is won or lost.\r\n\r\n@param observer\r\n\t\tThe observer that will be notified.\r\n",
                "metaSrc": "source code",
                "description": "Adds an observer to the level.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method allows for observation of level changes, which is a core part of the game logic.",
                "howToUse": "Call this method with an instance of a class that implements LevelObserver interface.",
                "howItWorks": "The method adds a given observer to the list of observers.",
                "assertions": "",
                "layer": "Logic",
                "time": "12",
                "selfTime": "1",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "351",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "isAnyPlayerAlive",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
                "visibility": "public",
                "simpleName": "isAnyPlayerAlive()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                "kind": "method",
                "docComment": "Returns <code>true</code> iff at least one of the players in this level\r\nis alive.\r\n\r\n@return <code>true</code> if at least one of the registered players is\r\nalive.\r\n",
                "metaSrc": "source code",
                "description": "Checks if any player in the game is alive.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A boolean indicating whether any player is alive.",
                "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
                "howToUse": "Call this method to check if there are any players left in the game that are still alive.",
                "howItWorks": "The method iterates through each player in the list and checks if they are alive using the isAlive() method. If any player is found to be alive, the method returns true; otherwise, it returns false after checking all players.",
                "assertions": "",
                "layer": "Logic",
                "time": "8",
                "selfTime": "4",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "352",
                    "parentId": "351",
                    "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                    "className": "nl.tudelft.jpacman.level.Player",
                    "methodName": "isAlive",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                    "visibility": "public",
                    "simpleName": "isAlive()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Player.isAlive()",
                    "kind": "method",
                    "docComment": "Returns whether this player is alive or not.\r\n\r\n@return <code>true</code> iff the player is alive.\r\n",
                    "metaSrc": "source code",
                    "description": "Checks if the player is alive.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A boolean indicating whether the player is alive.",
                    "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                    "howToUse": "Call this method on an instance of Player to determine if it is still alive.",
                    "howItWorks": "The method returns the value of the 'alive' field of the Player object.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "1",
                    "selfTime": "1",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              },
              {
                "id": "353",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.game.Game.isInProgress()",
                "className": "nl.tudelft.jpacman.game.Game",
                "methodName": "isInProgress",
                "color": "#8DD3C7",
                "packageName": "nl.tudelft.jpacman.game",
                "sourceCode": "/**\r\n *\r\n * @return <code>true</code> iff the game is started and in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
                "visibility": "public",
                "simpleName": "isInProgress()",
                "qualifiedName": "nl.tudelft.jpacman.game.Game.isInProgress()",
                "kind": "method",
                "docComment": "\r\n@return <code>true</code> iff the game is started and in progress.\r\n",
                "metaSrc": "source code",
                "description": "Checks if the game is currently in progress.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A boolean indicating whether the game is currently in progress.",
                "reason": "This method provides a way to check the current state of the game, which is essential for logic operations within the application.",
                "howToUse": "Call this method to determine whether the game is active or not.",
                "howItWorks": "The method returns the value of the private field 'inProgress'.",
                "assertions": "",
                "layer": "Logic",
                "time": "2",
                "selfTime": "2",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "354",
                "parentId": "331",
                "label": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
                "className": "nl.tudelft.jpacman.game.SinglePlayerGame",
                "methodName": "getLevel",
                "color": "#8DD3C7",
                "packageName": "nl.tudelft.jpacman.game",
                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.level.Level getLevel() {\r\n    return this.level;\r\n}",
                "visibility": "public",
                "simpleName": "getLevel()",
                "qualifiedName": "nl.tudelft.jpacman.game.SinglePlayerGame.getLevel()",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "",
                "reason": "",
                "howToUse": "",
                "howItWorks": "",
                "assertions": "",
                "layer": "",
                "time": "1",
                "selfTime": "1",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          },
          {
            "id": "355",
            "parentId": "330",
            "label": "nl.tudelft.jpacman.game.Game.stop()",
            "className": "nl.tudelft.jpacman.game.Game",
            "methodName": "stop",
            "color": "#8DD3C7",
            "packageName": "nl.tudelft.jpacman.game",
            "sourceCode": "/**\r\n * Pauses the game.\r\n */\r\npublic void stop() {\r\n    synchronized(this.progressLock) {\r\n        if (!this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.inProgress = false;\r\n        this.getLevel().stop();\r\n    }\r\n}",
            "visibility": "public",
            "simpleName": "stop()",
            "qualifiedName": "nl.tudelft.jpacman.game.Game.stop()",
            "kind": "method",
            "docComment": "Pauses the game.\r\n",
            "metaSrc": "source code",
            "description": "Stops the game by setting the inProgress flag to false and stopping the level.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "Void. The method does not return any value.",
            "reason": "This method is necessary for stopping the game when a player chooses to end it or when an error occurs.",
            "howToUse": "Call the stop() method on an instance of nl.tudelft.jpacman.game.Game to stop the game.",
            "howItWorks": "The method uses a synchronized block to ensure thread safety. It checks if the game is currently in progress using the isInProgress() method. If it is, it sets the inProgress flag to false and calls the stop() method on the current level.",
            "assertions": "",
            "layer": "Logic",
            "time": "229",
            "selfTime": "3",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 1,
              "totalDescendants": 2,
              "subtreeDepth": 3,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "356",
                "parentId": "355",
                "label": "nl.tudelft.jpacman.level.Level.stop()",
                "className": "nl.tudelft.jpacman.level.Level",
                "methodName": "stop",
                "color": "#E41A1C",
                "packageName": "nl.tudelft.jpacman.level",
                "sourceCode": "/**\r\n * Stops or pauses this level, no longer allowing any movement on the board\r\n * and stopping all NPCs.\r\n */\r\npublic void stop() {\r\n    synchronized(this.startStopLock) {\r\n        if (!this.isInProgress()) {\r\n            return;\r\n        }\r\n        this.stopNPCs();\r\n        this.inProgress = false;\r\n    }\r\n}",
                "visibility": "public",
                "simpleName": "stop()",
                "qualifiedName": "nl.tudelft.jpacman.level.Level.stop()",
                "kind": "method",
                "docComment": "Stops or pauses this level, no longer allowing any movement on the board\r\nand stopping all NPCs.\r\n",
                "metaSrc": "source code",
                "description": "Stops the level by stopping all non-player characters (NPCs) and setting the inProgress flag to false.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "Void. The method does not return any value.",
                "reason": "This method is part of the game logic, specifically handling the state transition when a level ends or is paused.",
                "howToUse": "Call this method on an instance of the Level class to stop the level and all NPCs within it.",
                "howItWorks": "The method uses a synchronized block to ensure thread safety. It checks if the level is in progress; if not, it returns immediately. If the level is in progress, it calls stopNPCs() to halt NPC movements and sets the inProgress flag to false.",
                "assertions": "",
                "layer": "Logic",
                "time": "226",
                "selfTime": "2",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "357",
                    "parentId": "356",
                    "label": "nl.tudelft.jpacman.level.Level.stopNPCs()",
                    "className": "nl.tudelft.jpacman.level.Level",
                    "methodName": "stopNPCs",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Stops all NPC movement scheduling and interrupts any movements being\r\n * executed.\r\n */\r\nprivate void stopNPCs() {\r\n    for (java.util.Map.Entry<nl.tudelft.jpacman.npc.Ghost, java.util.concurrent.ScheduledExecutorService> entry : this.npcs.entrySet()) {\r\n        java.util.concurrent.ScheduledExecutorService schedule = entry.getValue();\r\n        assert schedule != null;\r\n        schedule.shutdownNow();\r\n    }\r\n}",
                    "visibility": "private",
                    "simpleName": "stopNPCs()",
                    "qualifiedName": "nl.tudelft.jpacman.level.Level.stopNPCs()",
                    "kind": "method",
                    "docComment": "Stops all NPC movement scheduling and interrupts any movements being\r\nexecuted.\r\n",
                    "metaSrc": "source code",
                    "description": "Stops all non-player characters (NPCs) in the game level.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "void",
                    "reason": "This method is necessary to properly clean up resources when the game level is no longer active.",
                    "howToUse": "Call this method on an instance of Level to stop all NPCs.",
                    "howItWorks": "Iterates over a map of NPCs and their ScheduledExecutorServices, shutting down each service immediately.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "224",
                    "selfTime": "4",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "id": "358",
        "parentId": "256",
        "label": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased()",
        "className": "nl.tudelft.jpacman.ui.PacKeyListener",
        "methodName": "keyReleased",
        "color": "#FF7F00",
        "packageName": "nl.tudelft.jpacman.ui",
        "sourceCode": "@java.lang.Override\r\npublic void keyReleased(java.awt.event.KeyEvent event) {\r\n    // do nothing\r\n}",
        "visibility": "public",
        "simpleName": "keyReleased(java.awt.event.KeyEvent)",
        "qualifiedName": "nl.tudelft.jpacman.ui.PacKeyListener.keyReleased(java.awt.event.KeyEvent)",
        "kind": "method",
        "docComment": "",
        "metaSrc": "source code",
        "description": "",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "",
        "reason": "",
        "howToUse": "",
        "howItWorks": "",
        "assertions": "",
        "layer": "",
        "time": "60",
        "selfTime": "60",
        "percent": "0.0",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 0,
          "totalDescendants": 0,
          "subtreeDepth": 1,
          "level": 2
        },
        "status": {
          "fanOut": false,
          "implementationEntryPoint": false,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": []
      }
    ]
  },
  "nl.tudelft.jpacman.Launcher.main()": {
    "id": "359",
    "parentId": "0",
    "label": "nl.tudelft.jpacman.Launcher.main()",
    "className": "nl.tudelft.jpacman.Launcher",
    "methodName": "main",
    "color": "#ECC94B",
    "packageName": "nl.tudelft.jpacman",
    "sourceCode": "/**\r\n * Main execution method for the Launcher.\r\n *\r\n * @param args\r\n * \t\tThe command line arguments - which are ignored.\r\n * @throws IOException\r\n * \t\tWhen a resource could not be read.\r\n */\r\npublic static void main(java.lang.String[] args) throws java.io.IOException {\r\n    new nl.tudelft.jpacman.Launcher().launch();\r\n}",
    "visibility": "public",
    "simpleName": "main(java.lang.String[])",
    "qualifiedName": "nl.tudelft.jpacman.Launcher.main(java.lang.String[])",
    "kind": "static method",
    "docComment": "Main execution method for the Launcher.\r\n\r\n@param args\r\n\t\tThe command line arguments - which are ignored.\r\n@throws IOException\r\n\t\tWhen a resource could not be read.\r\n",
    "metaSrc": "source code",
    "description": "Initializes and starts a single-player Pac-Man game.",
    "detailedBehavior": "",
    "flowRepresentation": "",
    "briefSummary": "",
    "returns": "Void.",
    "reason": "This method is responsible for starting the game, which involves both application logic and user interface elements.",
    "howToUse": "Call this method to start a new Pac-Man game.",
    "howItWorks": "Creates an instance of nl.tudelft.jpacman.Launcher and calls its launch() method to initialize and start the game.",
    "assertions": "",
    "layer": "UI",
    "time": "635474",
    "selfTime": "5",
    "percent": "2.9",
    "isRoot": false,
    "collapsed": true,
    "selected": false,
    "treeStats": {
      "directChildrenCount": 1,
      "totalDescendants": 56,
      "subtreeDepth": 10,
      "level": 1
    },
    "status": {
      "fanOut": false,
      "implementationEntryPoint": false,
      "chainStartPoint": false,
      "recursiveEntryPoint": false,
      "isSummarised": false
    },
    "children": [
      {
        "id": "360",
        "parentId": "359",
        "label": "nl.tudelft.jpacman.Launcher.launch()",
        "className": "nl.tudelft.jpacman.Launcher",
        "methodName": "launch",
        "color": "#ECC94B",
        "packageName": "nl.tudelft.jpacman",
        "sourceCode": "/**\r\n * Creates and starts a JPac-Man game.\r\n */\r\npublic void launch() {\r\n    this.makeGame();\r\n    nl.tudelft.jpacman.ui.PacManUiBuilder builder = new nl.tudelft.jpacman.ui.PacManUiBuilder().withDefaultButtons();\r\n    this.addSinglePlayerKeys(builder);\r\n    this.pacManUI = builder.build(this.getGame());\r\n    this.pacManUI.start();\r\n}",
        "visibility": "public",
        "simpleName": "launch()",
        "qualifiedName": "nl.tudelft.jpacman.Launcher.launch()",
        "kind": "method",
        "docComment": "Creates and starts a JPac-Man game.\r\n",
        "metaSrc": "source code",
        "description": "Initializes and starts a single-player Pac-Man game.",
        "detailedBehavior": "",
        "flowRepresentation": "",
        "briefSummary": "",
        "returns": "void",
        "reason": "This method is responsible for setting up the game environment, creating the UI, and starting the game loop.",
        "howToUse": "Call this method to start a new single-player Pac-Man game.",
        "howItWorks": "The method creates a game instance, configures the user interface with default buttons and key mappings, and then starts the UI.",
        "assertions": "",
        "layer": "UI",
        "time": "635465",
        "selfTime": "506",
        "percent": "2.9",
        "isRoot": false,
        "collapsed": true,
        "selected": false,
        "treeStats": {
          "directChildrenCount": 5,
          "totalDescendants": 55,
          "subtreeDepth": 9,
          "level": 2
        },
        "status": {
          "fanOut": true,
          "implementationEntryPoint": false,
          "chainStartPoint": false,
          "recursiveEntryPoint": false,
          "isSummarised": false
        },
        "children": [
          {
            "id": "361",
            "parentId": "360",
            "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.build()",
            "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "methodName": "build",
            "color": "#FF7F00",
            "packageName": "nl.tudelft.jpacman.ui",
            "sourceCode": "/**\r\n * Creates a new Pac-Man UI with the set keys and buttons.\r\n *\r\n * @param game\r\n * \t\tThe game to build the UI for.\r\n * @return A new Pac-Man UI with the set keys and buttons.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUI build(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    if (this.defaultButtons) {\r\n        this.addStartButton(game);\r\n        this.addStopButton(game);\r\n    }\r\n    return new nl.tudelft.jpacman.ui.PacManUI(game, this.buttons, this.keyMappings, this.scoreFormatter);\r\n}",
            "visibility": "public",
            "simpleName": "build(nl.tudelft.jpacman.game.Game)",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.build(nl.tudelft.jpacman.game.Game)",
            "kind": "method",
            "docComment": "Creates a new Pac-Man UI with the set keys and buttons.\r\n\r\n@param game\r\n\t\tThe game to build the UI for.\r\n@return A new Pac-Man UI with the set keys and buttons.\r\n",
            "metaSrc": "source code",
            "description": "Builds a PacManUI instance with the provided game object.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "nl.tudelft.jpacman.ui.PacManUI",
            "reason": "This method is responsible for creating and configuring a user interface for the PacMan game, which involves setting up buttons and other UI components.",
            "howToUse": "Call this method with an instance of nl.tudelft.jpacman.game.Game to get a configured PacManUI object.",
            "howItWorks": "The method checks if default buttons should be added. If so, it adds start and stop buttons. It then creates and returns a new PacManUI instance with the provided game and other UI components.",
            "assertions": "",
            "layer": "UI",
            "time": "315699",
            "selfTime": "6369",
            "percent": "1.4",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 2,
              "totalDescendants": 2,
              "subtreeDepth": 2,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": true,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "362",
                "parentId": "361",
                "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton()",
                "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
                "methodName": "addStartButton",
                "color": "#FF7F00",
                "packageName": "nl.tudelft.jpacman.ui",
                "sourceCode": "/**\r\n * Adds a button with the caption {@value #START_CAPTION} that starts the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to start.\r\n */\r\nprivate void addStartButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, game::start);\r\n}",
                "visibility": "private",
                "simpleName": "addStartButton(nl.tudelft.jpacman.game.Game)",
                "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton(nl.tudelft.jpacman.game.Game)",
                "kind": "method",
                "docComment": "Adds a button with the caption {@value #START_CAPTION} that starts the\r\ngame.\r\n\r\n@param game\r\n\t\tThe game to start.\r\n",
                "metaSrc": "source code",
                "description": "Adds a start button to the PacMan UI that starts the game when clicked.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method is responsible for adding a start button to the UI, which triggers the game's start action.",
                "howToUse": "Call this method with an instance of Game to add a start button that will begin the game when clicked.",
                "howItWorks": "The method checks if the game object is not null, then adds a button labeled 'START' to the UI. Clicking this button invokes the start method on the provided game instance.",
                "assertions": "",
                "layer": "UI",
                "time": "304",
                "selfTime": "220",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "363",
                "parentId": "361",
                "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton()",
                "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
                "methodName": "addStopButton",
                "color": "#FF7F00",
                "packageName": "nl.tudelft.jpacman.ui",
                "sourceCode": "/**\r\n * Adds a button with the caption {@value #STOP_CAPTION} that stops the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to stop.\r\n */\r\nprivate void addStopButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, game::stop);\r\n}",
                "visibility": "private",
                "simpleName": "addStopButton(nl.tudelft.jpacman.game.Game)",
                "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton(nl.tudelft.jpacman.game.Game)",
                "kind": "method",
                "docComment": "Adds a button with the caption {@value #STOP_CAPTION} that stops the\r\ngame.\r\n\r\n@param game\r\n\t\tThe game to stop.\r\n",
                "metaSrc": "source code",
                "description": "Adds a stop button to the PacMan UI that stops the game when clicked.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "void",
                "reason": "This method is responsible for adding a stop button to the UI, which allows users to pause or stop the game.",
                "howToUse": "Call this method with an instance of Game to add a stop button that will stop the game when clicked.",
                "howItWorks": "The method checks if the game is not null, then adds a button labeled 'STOP' to the UI. The button's action listener calls the game's stop method.",
                "assertions": "",
                "layer": "UI",
                "time": "104",
                "selfTime": "104",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          },
          {
            "id": "364",
            "parentId": "360",
            "label": "nl.tudelft.jpacman.Launcher.makeGame()",
            "className": "nl.tudelft.jpacman.Launcher",
            "methodName": "makeGame",
            "color": "#ECC94B",
            "packageName": "nl.tudelft.jpacman",
            "sourceCode": "/**\r\n * Creates a new game using the level from {@link #makeLevel()}.\r\n *\r\n * @return a new Game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game makeGame() {\r\n    nl.tudelft.jpacman.game.GameFactory gf = this.getGameFactory();\r\n    nl.tudelft.jpacman.level.Level level = this.makeLevel();\r\n    this.game = gf.createSinglePlayerGame(level, this.loadPointCalculator());\r\n    return this.game;\r\n}",
            "visibility": "public",
            "simpleName": "makeGame()",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.makeGame()",
            "kind": "method",
            "docComment": "Creates a new game using the level from {@link #makeLevel()}.\r\n\r\n@return a new Game.\r\n",
            "metaSrc": "source code",
            "description": "Creates a single-player game instance.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
            "reason": "This method is responsible for creating a game with a single player and a specific level, which falls under the Logic layer as it involves application logic rather than user interface or data access.",
            "howToUse": "Call this method with a Level object and a PointCalculator object to create a new single-player game.",
            "howItWorks": "The method retrieves a GameFactory instance, creates a level using makeLevel(), loads a point calculator, and then uses the factory to create a single-player game.",
            "assertions": "",
            "layer": "Logic",
            "time": "297124",
            "selfTime": "6",
            "percent": "1.4",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 4,
              "totalDescendants": 46,
              "subtreeDepth": 8,
              "level": 3
            },
            "status": {
              "fanOut": true,
              "implementationEntryPoint": true,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "365",
                "parentId": "364",
                "label": "nl.tudelft.jpacman.Launcher.makeLevel()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "makeLevel",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "/**\r\n * Creates a new level. By default this method will use the map parser to\r\n * parse the default board stored in the <code>board.txt</code> resource.\r\n *\r\n * @return A new level.\r\n */\r\npublic nl.tudelft.jpacman.level.Level makeLevel() {\r\n    try {\r\n        return this.getMapParser().parseMap(this.getLevelMap());\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to create level, name = \" + this.getLevelMap(), e);\r\n    }\r\n}",
                "visibility": "public",
                "simpleName": "makeLevel()",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.makeLevel()",
                "kind": "method",
                "docComment": "Creates a new level. By default this method will use the map parser to\r\nparse the default board stored in the <code>board.txt</code> resource.\r\n\r\n@return A new level.\r\n",
                "metaSrc": "source code",
                "description": "Creates a game level by parsing a map string.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "nl.tudelft.jpacman.level.Level",
                "reason": "This method is responsible for creating a game level using the provided map data. It delegates to other methods to retrieve the necessary components and handle exceptions.",
                "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to create a new game level.",
                "howItWorks": "The method retrieves a MapParser and uses it to parse a map string into a Level object. It handles IOExceptions by throwing a PacmanConfigurationException with the name of the level map.",
                "assertions": "",
                "layer": "Logic",
                "time": "291834",
                "selfTime": "3",
                "percent": "1.3",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 2,
                  "totalDescendants": 13,
                  "subtreeDepth": 7,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "366",
                    "parentId": "365",
                    "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                    "className": "nl.tudelft.jpacman.level.MapParser",
                    "methodName": "parseMap",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                    "visibility": "public",
                    "simpleName": "parseMap(char[][])",
                    "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
                    "kind": "method",
                    "docComment": "Parses the text representation of the board into an actual level.\r\n\r\n<ul>\r\n<li>Supported characters:\r\n<li>' ' (space) an empty square.\r\n<li>'#' (bracket) a wall.\r\n<li>'.' (period) a square with a pellet.\r\n<li>'P' (capital P) a starting square for players.\r\n<li>'G' (capital G) a square with a ghost.\r\n</ul>\r\n\r\n@param map\r\n\t\tThe text representation of the board, with map[x][y]\r\n\t\trepresenting the square at position x,y.\r\n@return The level as represented by this text.\r\n",
                    "metaSrc": "source code",
                    "description": "Parses a character map to create a game level in Pacman.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "nl.tudelft.jpacman.level.Level",
                    "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                    "howToUse": "Call this method with a two-dimensional character array representing the map. The method will return a Level object ready to be used in the game.",
                    "howItWorks": "The method initializes a grid based on the input map, identifies ghost and start positions, creates a board, and then constructs a level using these components.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "280457",
                    "selfTime": "3",
                    "percent": "1.3",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 2,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": true,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "367",
                        "parentId": "366",
                        "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                        "className": "nl.tudelft.jpacman.level.MapParser",
                        "methodName": "parseMap",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                        "visibility": "public",
                        "simpleName": "parseMap(char[][])",
                        "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
                        "kind": "method",
                        "docComment": "Parses the text representation of the board into an actual level.\r\n\r\n<ul>\r\n<li>Supported characters:\r\n<li>' ' (space) an empty square.\r\n<li>'#' (bracket) a wall.\r\n<li>'.' (period) a square with a pellet.\r\n<li>'P' (capital P) a starting square for players.\r\n<li>'G' (capital G) a square with a ghost.\r\n</ul>\r\n\r\n@param map\r\n\t\tThe text representation of the board, with map[x][y]\r\n\t\trepresenting the square at position x,y.\r\n@return The level as represented by this text.\r\n",
                        "metaSrc": "source code",
                        "description": "Parses a character map to create a game level in Pacman.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.level.Level",
                        "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                        "howToUse": "Call this method with a two-dimensional character array representing the map. The method will return a Level object ready to be used in the game.",
                        "howItWorks": "The method initializes a grid based on the input map, identifies ghost and start positions, creates a board, and then constructs a level using these components.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "280022",
                        "selfTime": "501",
                        "percent": "1.3",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 3,
                          "subtreeDepth": 2,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "368",
                            "parentId": "367",
                            "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                            "className": "nl.tudelft.jpacman.level.MapParser",
                            "methodName": "parseMap",
                            "color": "#E41A1C",
                            "packageName": "nl.tudelft.jpacman.level",
                            "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                            "visibility": "public",
                            "simpleName": "parseMap(char[][])",
                            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
                            "kind": "method",
                            "docComment": "Parses the text representation of the board into an actual level.\r\n\r\n<ul>\r\n<li>Supported characters:\r\n<li>' ' (space) an empty square.\r\n<li>'#' (bracket) a wall.\r\n<li>'.' (period) a square with a pellet.\r\n<li>'P' (capital P) a starting square for players.\r\n<li>'G' (capital G) a square with a ghost.\r\n</ul>\r\n\r\n@param map\r\n\t\tThe text representation of the board, with map[x][y]\r\n\t\trepresenting the square at position x,y.\r\n@return The level as represented by this text.\r\n",
                            "metaSrc": "source code",
                            "description": "Parses a character map to create a game level in Pacman.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.level.Level",
                            "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                            "howToUse": "Call this method with a two-dimensional character array representing the map. The method will return a Level object ready to be used in the game.",
                            "howItWorks": "The method initializes a grid based on the input map, identifies ghost and start positions, creates a board, and then constructs a level using these components.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "278071",
                            "selfTime": "833",
                            "percent": "1.3",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 5,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "369",
                                "parentId": "368",
                                "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                                "className": "nl.tudelft.jpacman.level.MapParser",
                                "methodName": "parseMap",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                                "visibility": "public",
                                "simpleName": "parseMap(char[][])",
                                "qualifiedName": "nl.tudelft.jpacman.level.MapParser.parseMap(char[][])",
                                "kind": "method",
                                "docComment": "Parses the text representation of the board into an actual level.\r\n\r\n<ul>\r\n<li>Supported characters:\r\n<li>' ' (space) an empty square.\r\n<li>'#' (bracket) a wall.\r\n<li>'.' (period) a square with a pellet.\r\n<li>'P' (capital P) a starting square for players.\r\n<li>'G' (capital G) a square with a ghost.\r\n</ul>\r\n\r\n@param map\r\n\t\tThe text representation of the board, with map[x][y]\r\n\t\trepresenting the square at position x,y.\r\n@return The level as represented by this text.\r\n",
                                "metaSrc": "source code",
                                "description": "Parses a character map to create a game level in Pacman.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "nl.tudelft.jpacman.level.Level",
                                "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                                "howToUse": "Call this method with a two-dimensional character array representing the map. The method will return a Level object ready to be used in the game.",
                                "howItWorks": "The method initializes a grid based on the input map, identifies ghost and start positions, creates a board, and then constructs a level using these components.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "276382",
                                "selfTime": "109",
                                "percent": "1.3",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 3,
                                  "totalDescendants": 97,
                                  "subtreeDepth": 10,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "370",
                                    "parentId": "369",
                                    "label": "nl.tudelft.jpacman.level.MapParser.makeGrid()",
                                    "className": "nl.tudelft.jpacman.level.MapParser",
                                    "methodName": "makeGrid",
                                    "color": "#E41A1C",
                                    "packageName": "nl.tudelft.jpacman.level",
                                    "sourceCode": "private void makeGrid(char[][] map, int width, int height, nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            char c = map[x][y];\r\n            this.addSquare(grid, ghosts, startPositions, x, y, c);\r\n        }\r\n    }\r\n}",
                                    "visibility": "private",
                                    "simpleName": "makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
                                    "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGrid(char[][],int,int,nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Adds squares to the grid based on a given character from a map file.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "void",
                                    "reason": "This method is responsible for populating the game board with squares based on a character map, which is part of the game logic.",
                                    "howToUse": "Call this method with the appropriate parameters to populate the game board.",
                                    "howItWorks": "Iterates through each cell in the grid and calls addSquare to handle the creation and placement of squares.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "273876",
                                    "selfTime": "68",
                                    "percent": "1.2",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 1,
                                      "totalDescendants": 90,
                                      "subtreeDepth": 9,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "371",
                                        "parentId": "370",
                                        "label": "nl.tudelft.jpacman.level.MapParser.addSquare()",
                                        "className": "nl.tudelft.jpacman.level.MapParser",
                                        "methodName": "addSquare",
                                        "color": "#E41A1C",
                                        "packageName": "nl.tudelft.jpacman.level",
                                        "sourceCode": "/**\r\n * Adds a square to the grid based on a given character. These\r\n * character come from the map files and describe the type\r\n * of square.\r\n *\r\n * @param grid\r\n * \t\tThe grid of squares with board[x][y] being the\r\n * \t\tsquare at column x, row y.\r\n * @param ghosts\r\n * \t\tList of all ghosts that were added to the map.\r\n * @param startPositions\r\n * \t\tList of all start positions that were added\r\n * \t\tto the map.\r\n * @param x\r\n * \t\tx coordinate of the square.\r\n * @param y\r\n * \t\ty coordinate of the square.\r\n * @param c\r\n * \t\tCharacter describing the square type.\r\n */\r\nprotected void addSquare(nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions, int x, int y, char c) {\r\n    switch (c) {\r\n        case ' ' :\r\n            grid[x][y] = this.boardCreator.createGround();\r\n            break;\r\n        case '#' :\r\n            grid[x][y] = this.boardCreator.createWall();\r\n            break;\r\n        case '.' :\r\n            nl.tudelft.jpacman.board.Square pelletSquare = this.boardCreator.createGround();\r\n            grid[x][y] = pelletSquare;\r\n            this.levelCreator.createPellet().occupy(pelletSquare);\r\n            break;\r\n        case 'G' :\r\n            nl.tudelft.jpacman.board.Square ghostSquare = this.makeGhostSquare(ghosts, this.levelCreator.createGhost());\r\n            grid[x][y] = ghostSquare;\r\n            break;\r\n        case 'P' :\r\n            nl.tudelft.jpacman.board.Square playerSquare = this.boardCreator.createGround();\r\n            grid[x][y] = playerSquare;\r\n            startPositions.add(playerSquare);\r\n            break;\r\n        default :\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(((((\"Invalid character at \" + x) + \",\") + y) + \": \") + c);\r\n    }\r\n}",
                                        "visibility": "protected",
                                        "simpleName": "addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
                                        "qualifiedName": "nl.tudelft.jpacman.level.MapParser.addSquare(nl.tudelft.jpacman.board.Square[][],java.util.List,java.util.List,int,int,char)",
                                        "kind": "method",
                                        "docComment": "Adds a square to the grid based on a given character. These\r\ncharacter come from the map files and describe the type\r\nof square.\r\n\r\n@param grid\r\n\t\tThe grid of squares with board[x][y] being the\r\n\t\tsquare at column x, row y.\r\n@param ghosts\r\n\t\tList of all ghosts that were added to the map.\r\n@param startPositions\r\n\t\tList of all start positions that were added\r\n\t\tto the map.\r\n@param x\r\n\t\tx coordinate of the square.\r\n@param y\r\n\t\ty coordinate of the square.\r\n@param c\r\n\t\tCharacter describing the square type.\r\n",
                                        "metaSrc": "source code",
                                        "description": "(no description)",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "",
                                        "reason": "",
                                        "howToUse": "",
                                        "howItWorks": "",
                                        "assertions": "",
                                        "layer": "",
                                        "time": "273808",
                                        "selfTime": "521",
                                        "percent": "1.2",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 7,
                                          "totalDescendants": 89,
                                          "subtreeDepth": 8,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": true,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": [
                                          {
                                            "id": "372",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
                                            "className": "nl.tudelft.jpacman.level.LevelFactory",
                                            "methodName": "createGhost",
                                            "color": "#E41A1C",
                                            "packageName": "nl.tudelft.jpacman.level",
                                            "sourceCode": "/**\r\n * Creates a new ghost.\r\n *\r\n * @return The new ghost.\r\n */\r\nnl.tudelft.jpacman.npc.Ghost createGhost() {\r\n    this.ghostIndex++;\r\n    this.ghostIndex %= nl.tudelft.jpacman.level.LevelFactory.GHOSTS;\r\n    switch (this.ghostIndex) {\r\n        case nl.tudelft.jpacman.level.LevelFactory.BLINKY :\r\n            return this.ghostFact.createBlinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.INKY :\r\n            return this.ghostFact.createInky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.PINKY :\r\n            return this.ghostFact.createPinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.CLYDE :\r\n            return this.ghostFact.createClyde();\r\n        default :\r\n            return new nl.tudelft.jpacman.level.LevelFactory.RandomGhost(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n    }\r\n}",
                                            "visibility": "default",
                                            "simpleName": "createGhost()",
                                            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
                                            "kind": "method",
                                            "docComment": "Creates a new ghost.\r\n\r\n@return The new ghost.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a ghost using the provided sprite factory.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a ghost.",
                                            "reason": "This method is responsible for creating different types of ghosts in the game, which falls under the logic layer as it involves application and domain logic.",
                                            "howToUse": "Call this method to create a ghost. It will return an instance of Ghost based on the current ghost index.",
                                            "howItWorks": "The method increments the ghostIndex and uses a switch statement to determine which type of ghost to create. It then calls the appropriate method from the ghostFact object to create the ghost.",
                                            "assertions": "",
                                            "layer": "",
                                            "time": "197671",
                                            "selfTime": "10",
                                            "percent": "0.9",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 4,
                                              "totalDescendants": 60,
                                              "subtreeDepth": 7,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": true,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "373",
                                                "parentId": "372",
                                                "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                                "methodName": "createBlinky",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Creates a new Blinky / Shadow, the red Ghost.\r\n *\r\n * @see Blinky\r\n * @return A new Blinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createBlinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Blinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n}",
                                                "visibility": "public",
                                                "simpleName": "createBlinky()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
                                                "kind": "method",
                                                "docComment": "Creates a new Blinky / Shadow, the red Ghost.\r\n\r\n@see Blinky\r\n@return A new Blinky.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Creates a new Blinky ghost using the sprite factory.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.npc.Ghost",
                                                "reason": "This method is responsible for creating an instance of Blinky, which is a type of ghost in the game. It uses the sprite factory to obtain the appropriate sprite and then creates a new Blinky object with that sprite.",
                                                "howToUse": "Call this method on an instance of GhostFactory to create a new Blinky ghost.",
                                                "howItWorks": "The method retrieves the sprite for the red color using the sprite factory's getGhostSprite method. It then uses this sprite to create and return a new Blinky object.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "193296",
                                                "selfTime": "434",
                                                "percent": "0.9",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 13,
                                                  "subtreeDepth": 6,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": true,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "374",
                                                    "parentId": "373",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "getGhostSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "kind": "method",
                                                    "docComment": "Returns a map of animated ghost sprites for all directions.\r\n\r\n@param color\r\n\t\tThe colour of the ghost.\r\n@return The Sprite for the ghost.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Retrieves the sprite for a given ghost color.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                    "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                    "howToUse": "Call this method with a GhostColor enum value to get a map of direction sprites for that ghost.",
                                                    "howItWorks": "The method first asserts that the input color is not null. It then constructs the resource path based on the ghost color and calls another method `directionSprite` to create the sprite map.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "192838",
                                                    "selfTime": "2842",
                                                    "percent": "0.9",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 12,
                                                      "subtreeDepth": 5,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "375",
                                                        "parentId": "374",
                                                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                        "methodName": "directionSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "directionSprite(java.lang.String,int)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
                                                        "kind": "method",
                                                        "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
                                                        "metaSrc": "source code",
                                                        "description": "Creates a map of direction sprites from a resource file.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                        "reason": "",
                                                        "howToUse": "",
                                                        "howItWorks": "",
                                                        "assertions": "",
                                                        "layer": "",
                                                        "time": "189992",
                                                        "selfTime": "20",
                                                        "percent": "0.9",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 3,
                                                          "totalDescendants": 11,
                                                          "subtreeDepth": 4,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "376",
                                                            "parentId": "375",
                                                            "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                            "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                            "methodName": "split",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "split(int,int,int,int)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                            "kind": "method",
                                                            "docComment": "",
                                                            "metaSrc": "source code",
                                                            "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                            "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                            "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                            "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "187297",
                                                            "selfTime": "12",
                                                            "percent": "0.9",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "377",
                                                                "parentId": "376",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "newImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "newImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Creates a new BufferedImage with the specified width and height.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                "assertions": "",
                                                                "layer": "UI",
                                                                "time": "185093",
                                                                "selfTime": "10",
                                                                "percent": "0.8",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "378",
                                                                "parentId": "376",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "withinImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "withinImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "9",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "379",
                                                            "parentId": "375",
                                                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                            "methodName": "loadSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "loadSprite(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1538",
                                                            "selfTime": "8",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 1,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "380",
                                                                "parentId": "379",
                                                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                "methodName": "loadSprite",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "loadSprite(java.lang.String)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                                "kind": "method",
                                                                "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "1530",
                                                                "selfTime": "14",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 1,
                                                                  "totalDescendants": 1,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "381",
                                                                    "parentId": "380",
                                                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                    "methodName": "loadSpriteFromResource",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                                    "kind": "method",
                                                                    "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Loads a sprite from a resource file.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                    "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                    "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                                    "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "1498",
                                                                    "selfTime": "4",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "382",
                                                            "parentId": "375",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "createAnimatedSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "kind": "method",
                                                            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                                                            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1129",
                                                            "selfTime": "508",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 4,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "383",
                                                                "parentId": "382",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "split",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "split(int,int,int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "351",
                                                                "selfTime": "14",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 2,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "384",
                                                                    "parentId": "383",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "newImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "newImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                    "assertions": "",
                                                                    "layer": "UI",
                                                                    "time": "114",
                                                                    "selfTime": "5",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "id": "385",
                                                                    "parentId": "383",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "withinImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "withinImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "",
                                                                    "metaSrc": "source code",
                                                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "6",
                                                                    "selfTime": "5",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "386",
                                                                "parentId": "382",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getWidth",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getWidth()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "3",
                                                                "selfTime": "0",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "387",
                                                "parentId": "372",
                                                "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                                "methodName": "createInky",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Creates a new Inky / Bashful, the cyan Ghost.\r\n *\r\n * @see Inky\r\n * @return A new Inky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createInky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Inky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN));\r\n}",
                                                "visibility": "public",
                                                "simpleName": "createInky()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
                                                "kind": "method",
                                                "docComment": "Creates a new Inky / Bashful, the cyan Ghost.\r\n\r\n@see Inky\r\n@return A new Inky.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Creates an instance of the Inky ghost using a sprite from the GhostFactory.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A new instance of the Inky ghost.",
                                                "reason": "This method is necessary for initializing the game by creating an Inky ghost, which is part of the game's logic.",
                                                "howToUse": "Call createInky() on an instance of GhostFactory to obtain a new Inky ghost object.",
                                                "howItWorks": "The method retrieves a sprite for the cyan color using the getGhostSprite method and then creates a new Inky ghost with that sprite.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1679",
                                                "selfTime": "36",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 15,
                                                  "subtreeDepth": 6,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": true,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "388",
                                                    "parentId": "387",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "getGhostSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "kind": "method",
                                                    "docComment": "Returns a map of animated ghost sprites for all directions.\r\n\r\n@param color\r\n\t\tThe colour of the ghost.\r\n@return The Sprite for the ghost.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Retrieves the sprite for a given ghost color.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                    "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                    "howToUse": "Call this method with a GhostColor enum value to get a map of direction sprites for that ghost.",
                                                    "howItWorks": "The method first asserts that the input color is not null. It then constructs the resource path based on the ghost color and calls another method `directionSprite` to create the sprite map.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1638",
                                                    "selfTime": "11",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 14,
                                                      "subtreeDepth": 5,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "389",
                                                        "parentId": "388",
                                                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                        "methodName": "directionSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "directionSprite(java.lang.String,int)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
                                                        "kind": "method",
                                                        "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
                                                        "metaSrc": "source code",
                                                        "description": "Creates a map of direction sprites from a resource file.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                        "reason": "",
                                                        "howToUse": "",
                                                        "howItWorks": "",
                                                        "assertions": "",
                                                        "layer": "",
                                                        "time": "1624",
                                                        "selfTime": "3",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 4,
                                                          "totalDescendants": 13,
                                                          "subtreeDepth": 4,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": true,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "390",
                                                            "parentId": "389",
                                                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                            "methodName": "loadSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "loadSprite(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1140",
                                                            "selfTime": "0",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 1,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": true,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "391",
                                                                "parentId": "390",
                                                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                "methodName": "loadSprite",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "loadSprite(java.lang.String)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                                "kind": "method",
                                                                "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "1140",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 1,
                                                                  "totalDescendants": 1,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "392",
                                                                    "parentId": "391",
                                                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                    "methodName": "loadSpriteFromResource",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                                    "kind": "method",
                                                                    "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Loads a sprite from a resource file.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                    "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                    "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                                    "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "1130",
                                                                    "selfTime": "1",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "393",
                                                            "parentId": "389",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "createAnimatedSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "kind": "method",
                                                            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                                                            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "299",
                                                            "selfTime": "5",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 3,
                                                              "totalDescendants": 5,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": true,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "394",
                                                                "parentId": "393",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "split",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "split(int,int,int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "286",
                                                                "selfTime": "9",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 2,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "395",
                                                                    "parentId": "394",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "newImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "newImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                    "assertions": "",
                                                                    "layer": "UI",
                                                                    "time": "108",
                                                                    "selfTime": "4",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "id": "396",
                                                                    "parentId": "394",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "withinImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "withinImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "",
                                                                    "metaSrc": "source code",
                                                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "5",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "397",
                                                                "parentId": "393",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getHeight",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getHeight()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "2",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "398",
                                                                "parentId": "393",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getWidth",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getWidth()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "2",
                                                                "selfTime": "0",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "399",
                                                            "parentId": "389",
                                                            "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                            "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                            "methodName": "split",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "split(int,int,int,int)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                            "kind": "method",
                                                            "docComment": "",
                                                            "metaSrc": "source code",
                                                            "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                            "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                            "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                            "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "180",
                                                            "selfTime": "3",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": true,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "400",
                                                                "parentId": "399",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "newImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "newImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Creates a new BufferedImage with the specified width and height.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                "assertions": "",
                                                                "layer": "UI",
                                                                "time": "60",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "401",
                                                                "parentId": "399",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "withinImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "withinImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "5",
                                                                "selfTime": "1",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "402",
                                                            "parentId": "389",
                                                            "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating()",
                                                            "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                                                            "methodName": "setAnimating",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Starts or stops the animation of this sprite.\r\n *\r\n * @param isAnimating\r\n * \t\t<code>true</code> to animate this sprite or <code>false</code>\r\n * \t\tto stop animating this sprite.\r\n */\r\npublic void setAnimating(boolean isAnimating) {\r\n    this.animating = isAnimating;\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "setAnimating(boolean)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
                                                            "kind": "method",
                                                            "docComment": "Starts or stops the animation of this sprite.\r\n\r\n@param isAnimating\r\n\t\t<code>true</code> to animate this sprite or <code>false</code>\r\n\t\tto stop animating this sprite.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Sets whether the sprite is currently animating.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "void",
                                                            "reason": "This method allows control over the animation state of a sprite, which is essential for rendering in the UI layer.",
                                                            "howToUse": "Call this method with `true` to start animation or `false` to stop it.",
                                                            "howItWorks": "The method takes a boolean parameter `isAnimating` and assigns it to the instance variable `animating`.",
                                                            "assertions": "",
                                                            "layer": "UI",
                                                            "time": "1",
                                                            "selfTime": "1",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "403",
                                                "parentId": "372",
                                                "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                                "methodName": "createClyde",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Creates a new Clyde / Pokey, the orange Ghost.\r\n *\r\n * @see Clyde\r\n * @return A new Clyde.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createClyde() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Clyde(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE));\r\n}",
                                                "visibility": "public",
                                                "simpleName": "createClyde()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
                                                "kind": "method",
                                                "docComment": "Creates a new Clyde / Pokey, the orange Ghost.\r\n\r\n@see Clyde\r\n@return A new Clyde.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Creates a new Clyde ghost object.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.npc.Ghost",
                                                "reason": "This method is responsible for creating an instance of the Clyde ghost, which is part of the game logic.",
                                                "howToUse": "Call this method to obtain a new Clyde ghost object.",
                                                "howItWorks": "The method retrieves the sprite for the orange-colored ghost and uses it to create a new Clyde object.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1410",
                                                "selfTime": "29",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 14,
                                                  "subtreeDepth": 6,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": true,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "404",
                                                    "parentId": "403",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "getGhostSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "kind": "method",
                                                    "docComment": "Returns a map of animated ghost sprites for all directions.\r\n\r\n@param color\r\n\t\tThe colour of the ghost.\r\n@return The Sprite for the ghost.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Retrieves the sprite for a given ghost color.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                    "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                    "howToUse": "Call this method with a GhostColor enum value to get a map of direction sprites for that ghost.",
                                                    "howItWorks": "The method first asserts that the input color is not null. It then constructs the resource path based on the ghost color and calls another method `directionSprite` to create the sprite map.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1375",
                                                    "selfTime": "3",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 13,
                                                      "subtreeDepth": 5,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "405",
                                                        "parentId": "404",
                                                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                        "methodName": "directionSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "directionSprite(java.lang.String,int)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
                                                        "kind": "method",
                                                        "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
                                                        "metaSrc": "source code",
                                                        "description": "Creates a map of direction sprites from a resource file.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                        "reason": "",
                                                        "howToUse": "",
                                                        "howItWorks": "",
                                                        "assertions": "",
                                                        "layer": "",
                                                        "time": "1369",
                                                        "selfTime": "6",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 3,
                                                          "totalDescendants": 12,
                                                          "subtreeDepth": 4,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "406",
                                                            "parentId": "405",
                                                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                            "methodName": "loadSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "loadSprite(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "908",
                                                            "selfTime": "0",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 1,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "407",
                                                                "parentId": "406",
                                                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                "methodName": "loadSprite",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "loadSprite(java.lang.String)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                                "kind": "method",
                                                                "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "908",
                                                                "selfTime": "0",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 1,
                                                                  "totalDescendants": 1,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "408",
                                                                    "parentId": "407",
                                                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                    "methodName": "loadSpriteFromResource",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                                    "kind": "method",
                                                                    "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Loads a sprite from a resource file.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                    "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                    "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                                    "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "906",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "409",
                                                            "parentId": "405",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "createAnimatedSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "kind": "method",
                                                            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                                                            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "287",
                                                            "selfTime": "3",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 3,
                                                              "totalDescendants": 5,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "410",
                                                                "parentId": "409",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "split",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "split(int,int,int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "274",
                                                                "selfTime": "8",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 2,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "411",
                                                                    "parentId": "410",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "newImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "newImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                    "assertions": "",
                                                                    "layer": "UI",
                                                                    "time": "101",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "id": "412",
                                                                    "parentId": "410",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "withinImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "withinImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "",
                                                                    "metaSrc": "source code",
                                                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "9",
                                                                    "selfTime": "4",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "413",
                                                                "parentId": "409",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getHeight",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getHeight()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "3",
                                                                "selfTime": "1",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "414",
                                                                "parentId": "409",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getWidth",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getWidth()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "2",
                                                                "selfTime": "1",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "415",
                                                            "parentId": "405",
                                                            "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                            "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                            "methodName": "split",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "split(int,int,int,int)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                            "kind": "method",
                                                            "docComment": "",
                                                            "metaSrc": "source code",
                                                            "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                            "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                            "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                            "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "161",
                                                            "selfTime": "2",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "416",
                                                                "parentId": "415",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "newImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "newImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Creates a new BufferedImage with the specified width and height.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                "assertions": "",
                                                                "layer": "UI",
                                                                "time": "59",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "417",
                                                                "parentId": "415",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "withinImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "withinImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "5",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "418",
                                                "parentId": "372",
                                                "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
                                                "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                                "methodName": "createPinky",
                                                "color": "#4DAF4A",
                                                "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                "sourceCode": "/**\r\n * Creates a new Pinky / Speedy, the pink Ghost.\r\n *\r\n * @see Pinky\r\n * @return A new Pinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createPinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Pinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.PINK));\r\n}",
                                                "visibility": "public",
                                                "simpleName": "createPinky()",
                                                "qualifiedName": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
                                                "kind": "method",
                                                "docComment": "Creates a new Pinky / Speedy, the pink Ghost.\r\n\r\n@see Pinky\r\n@return A new Pinky.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Creates a Pinky ghost using the provided sprite factory.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a Pinky ghost.",
                                                "reason": "This method is necessary for creating a Pinky ghost, which is an essential part of the game logic.",
                                                "howToUse": "Call this method on an instance of GhostFactory to get a Pinky ghost.",
                                                "howItWorks": "The method retrieves the sprite for the Pink color from the sprite factory and uses it to create a new Pinky ghost object.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1276",
                                                "selfTime": "21",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 14,
                                                  "subtreeDepth": 6,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": true,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "419",
                                                    "parentId": "418",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "getGhostSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor)",
                                                    "kind": "method",
                                                    "docComment": "Returns a map of animated ghost sprites for all directions.\r\n\r\n@param color\r\n\t\tThe colour of the ghost.\r\n@return The Sprite for the ghost.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Retrieves the sprite for a given ghost color.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                    "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                    "howToUse": "Call this method with a GhostColor enum value to get a map of direction sprites for that ghost.",
                                                    "howItWorks": "The method first asserts that the input color is not null. It then constructs the resource path based on the ghost color and calls another method `directionSprite` to create the sprite map.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1249",
                                                    "selfTime": "4",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 13,
                                                      "subtreeDepth": 5,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "420",
                                                        "parentId": "419",
                                                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                        "methodName": "directionSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                        "visibility": "private",
                                                        "simpleName": "directionSprite(java.lang.String,int)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
                                                        "kind": "method",
                                                        "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
                                                        "metaSrc": "source code",
                                                        "description": "Creates a map of direction sprites from a resource file.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                        "reason": "",
                                                        "howToUse": "",
                                                        "howItWorks": "",
                                                        "assertions": "",
                                                        "layer": "",
                                                        "time": "1242",
                                                        "selfTime": "5",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 3,
                                                          "totalDescendants": 12,
                                                          "subtreeDepth": 4,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "421",
                                                            "parentId": "420",
                                                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                            "methodName": "loadSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "loadSprite(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "774",
                                                            "selfTime": "0",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 1,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "422",
                                                                "parentId": "421",
                                                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                "methodName": "loadSprite",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "loadSprite(java.lang.String)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                                "kind": "method",
                                                                "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "774",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 1,
                                                                  "totalDescendants": 1,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "423",
                                                                    "parentId": "422",
                                                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                    "methodName": "loadSpriteFromResource",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                                    "kind": "method",
                                                                    "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Loads a sprite from a resource file.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                    "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                    "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                                    "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "771",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "424",
                                                            "parentId": "420",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "createAnimatedSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                                            "kind": "method",
                                                            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                                                            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "293",
                                                            "selfTime": "4",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 3,
                                                              "totalDescendants": 5,
                                                              "subtreeDepth": 3,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "425",
                                                                "parentId": "424",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "split",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "split(int,int,int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "280",
                                                                "selfTime": "9",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 2,
                                                                  "totalDescendants": 2,
                                                                  "subtreeDepth": 2,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": [
                                                                  {
                                                                    "id": "426",
                                                                    "parentId": "425",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "newImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "newImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                    "metaSrc": "source code",
                                                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                    "assertions": "",
                                                                    "layer": "UI",
                                                                    "time": "100",
                                                                    "selfTime": "4",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  },
                                                                  {
                                                                    "id": "427",
                                                                    "parentId": "425",
                                                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                    "methodName": "withinImage",
                                                                    "color": "#F781BF",
                                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                    "visibility": "private",
                                                                    "simpleName": "withinImage(int,int)",
                                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                    "kind": "method",
                                                                    "docComment": "",
                                                                    "metaSrc": "source code",
                                                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                    "detailedBehavior": "",
                                                                    "flowRepresentation": "",
                                                                    "briefSummary": "",
                                                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                    "assertions": "",
                                                                    "layer": "Logic",
                                                                    "time": "6",
                                                                    "selfTime": "3",
                                                                    "percent": "0.0",
                                                                    "isRoot": false,
                                                                    "collapsed": true,
                                                                    "selected": false,
                                                                    "treeStats": {
                                                                      "directChildrenCount": 0,
                                                                      "totalDescendants": 0,
                                                                      "subtreeDepth": 1,
                                                                      "level": 17
                                                                    },
                                                                    "status": {
                                                                      "fanOut": false,
                                                                      "implementationEntryPoint": false,
                                                                      "chainStartPoint": false,
                                                                      "recursiveEntryPoint": false,
                                                                      "isSummarised": false
                                                                    },
                                                                    "children": []
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "id": "428",
                                                                "parentId": "424",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getHeight",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getHeight()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "2",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "429",
                                                                "parentId": "424",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "getWidth",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                                "visibility": "public",
                                                                "simpleName": "getWidth()",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "",
                                                                "reason": "",
                                                                "howToUse": "",
                                                                "howItWorks": "",
                                                                "assertions": "",
                                                                "layer": "",
                                                                "time": "2",
                                                                "selfTime": "1",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": "430",
                                                            "parentId": "420",
                                                            "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                            "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                            "methodName": "split",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "split(int,int,int,int)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                                            "kind": "method",
                                                            "docComment": "",
                                                            "metaSrc": "source code",
                                                            "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                            "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                            "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                                            "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "167",
                                                            "selfTime": "3",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 2,
                                                              "totalDescendants": 2,
                                                              "subtreeDepth": 2,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": [
                                                              {
                                                                "id": "431",
                                                                "parentId": "430",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "newImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "newImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                                                "metaSrc": "source code",
                                                                "description": "Creates a new BufferedImage with the specified width and height.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                                                "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                                                "assertions": "",
                                                                "layer": "UI",
                                                                "time": "57",
                                                                "selfTime": "2",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              },
                                                              {
                                                                "id": "432",
                                                                "parentId": "430",
                                                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                "methodName": "withinImage",
                                                                "color": "#F781BF",
                                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                                "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                "visibility": "private",
                                                                "simpleName": "withinImage(int,int)",
                                                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                                                "kind": "method",
                                                                "docComment": "",
                                                                "metaSrc": "source code",
                                                                "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                "detailedBehavior": "",
                                                                "flowRepresentation": "",
                                                                "briefSummary": "",
                                                                "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                                                "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                                                "assertions": "",
                                                                "layer": "Logic",
                                                                "time": "5",
                                                                "selfTime": "3",
                                                                "percent": "0.0",
                                                                "isRoot": false,
                                                                "collapsed": true,
                                                                "selected": false,
                                                                "treeStats": {
                                                                  "directChildrenCount": 0,
                                                                  "totalDescendants": 0,
                                                                  "subtreeDepth": 1,
                                                                  "level": 16
                                                                },
                                                                "status": {
                                                                  "fanOut": false,
                                                                  "implementationEntryPoint": false,
                                                                  "chainStartPoint": false,
                                                                  "recursiveEntryPoint": false,
                                                                  "isSummarised": false
                                                                },
                                                                "children": []
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "id": "433",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
                                            "className": "nl.tudelft.jpacman.board.BoardFactory",
                                            "methodName": "createWall",
                                            "color": "#984EA3",
                                            "packageName": "nl.tudelft.jpacman.board",
                                            "sourceCode": "/**\r\n * Creates a new square that cannot be occupied by any unit.\r\n *\r\n * @return A new square that cannot be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createWall() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Wall(this.sprites.getWallSprite());\r\n}",
                                            "visibility": "public",
                                            "simpleName": "createWall()",
                                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
                                            "kind": "method",
                                            "docComment": "Creates a new square that cannot be occupied by any unit.\r\n\r\n@return A new square that cannot be occupied by any unit.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a wall in the Pacman game board.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "nl.tudelft.jpacman.board.Square",
                                            "reason": "This method is responsible for creating a wall object, which is part of the game's logic layer. It uses a sprite to represent the wall visually.",
                                            "howToUse": "Call this method on an instance of BoardFactory to create a new wall square in the board.",
                                            "howItWorks": "The method retrieves a wall sprite using PacManSprites.getWallSprite() and then creates a new Wall object with that sprite. The Wall object is returned as a Square.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "72106",
                                            "selfTime": "233",
                                            "percent": "0.3",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 5,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "434",
                                                "parentId": "433",
                                                "label": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
                                                "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                "methodName": "getWallSprite",
                                                "color": "#F781BF",
                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                "sourceCode": "/**\r\n *\r\n * @return The sprite for the wall.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getWallSprite() {\r\n    return this.loadSprite(\"/sprite/wall.png\");\r\n}",
                                                "visibility": "public",
                                                "simpleName": "getWallSprite()",
                                                "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The sprite for the wall.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Loads a sprite representing a wall in Pacman.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                "reason": "This method is responsible for loading a specific sprite, which is part of the game's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method to get the sprite that represents walls in the Pacman game.",
                                                "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the wall sprite.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "71522",
                                                "selfTime": "43",
                                                "percent": "0.3",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 3,
                                                  "subtreeDepth": 4,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "435",
                                                    "parentId": "434",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "loadSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "loadSprite(java.lang.String)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                    "kind": "method",
                                                    "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                    "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                    "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                    "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "71479",
                                                    "selfTime": "40",
                                                    "percent": "0.3",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 2,
                                                      "subtreeDepth": 3,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "436",
                                                        "parentId": "435",
                                                        "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                        "methodName": "loadSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                        "visibility": "public",
                                                        "simpleName": "loadSprite(java.lang.String)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                        "kind": "method",
                                                        "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                        "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                        "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                        "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "71439",
                                                        "selfTime": "29",
                                                        "percent": "0.3",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 1,
                                                          "totalDescendants": 1,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "437",
                                                            "parentId": "436",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "loadSpriteFromResource",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                            "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "71370",
                                                            "selfTime": "555",
                                                            "percent": "0.3",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "id": "438",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                            "className": "nl.tudelft.jpacman.board.BoardFactory",
                                            "methodName": "createGround",
                                            "color": "#984EA3",
                                            "packageName": "nl.tudelft.jpacman.board",
                                            "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                            "visibility": "public",
                                            "simpleName": "createGround()",
                                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                            "kind": "method",
                                            "docComment": "Creates a new square that can be occupied by any unit.\r\n\r\n@return A new square that can be occupied by any unit.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a ground square in the board.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "nl.tudelft.jpacman.board.Square",
                                            "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                            "howToUse": "Call this method on an instance of BoardFactory to get a new ground square.",
                                            "howItWorks": "The method retrieves a ground sprite using PacManSprites.getGroundSprite() and then creates a new Ground object with this sprite. The newly created ground square is returned.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "1725",
                                            "selfTime": "54",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 5,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "439",
                                                "parentId": "438",
                                                "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                "methodName": "getGroundSprite",
                                                "color": "#F781BF",
                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                                "visibility": "public",
                                                "simpleName": "getGroundSprite()",
                                                "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The sprite for the ground.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Loads a sprite representing the ground from a resource file.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method to get the sprite representing the ground in the game.",
                                                "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the sprite.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1438",
                                                "selfTime": "45",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 3,
                                                  "subtreeDepth": 4,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "440",
                                                    "parentId": "439",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "loadSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "loadSprite(java.lang.String)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                    "kind": "method",
                                                    "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                    "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                    "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                    "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1393",
                                                    "selfTime": "31",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 2,
                                                      "subtreeDepth": 3,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "441",
                                                        "parentId": "440",
                                                        "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                        "methodName": "loadSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                        "visibility": "public",
                                                        "simpleName": "loadSprite(java.lang.String)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                        "kind": "method",
                                                        "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                        "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                        "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                        "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "1362",
                                                        "selfTime": "35",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 1,
                                                          "totalDescendants": 1,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "442",
                                                            "parentId": "441",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "loadSpriteFromResource",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                            "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1299",
                                                            "selfTime": "2",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "id": "443",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
                                            "className": "nl.tudelft.jpacman.level.LevelFactory",
                                            "methodName": "createPellet",
                                            "color": "#E41A1C",
                                            "packageName": "nl.tudelft.jpacman.level",
                                            "sourceCode": "/**\r\n * Creates a new pellet.\r\n *\r\n * @return The new pellet.\r\n */\r\npublic nl.tudelft.jpacman.level.Pellet createPellet() {\r\n    return new nl.tudelft.jpacman.level.Pellet(nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE, this.sprites.getPelletSprite());\r\n}",
                                            "visibility": "public",
                                            "simpleName": "createPellet()",
                                            "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
                                            "kind": "method",
                                            "docComment": "Creates a new pellet.\r\n\r\n@return The new pellet.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a new pellet in the game.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "nl.tudelft.jpacman.level.Pellet",
                                            "reason": "This method is responsible for creating pellets, which are collectible items in Pacman. It needs to be part of the logic layer as it involves game mechanics and object creation.",
                                            "howToUse": "Call this method on an instance of LevelFactory to create a new pellet.",
                                            "howItWorks": "The method creates a new Pellet object with a predefined value and sprite using the PelletSprite obtained from PacManSprites.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "1644",
                                            "selfTime": "476",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 4,
                                              "subtreeDepth": 5,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "444",
                                                "parentId": "443",
                                                "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
                                                "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                "methodName": "getPelletSprite",
                                                "color": "#F781BF",
                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                "sourceCode": "/**\r\n *\r\n * @return The sprite for the\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getPelletSprite() {\r\n    return this.loadSprite(\"/sprite/pellet.png\");\r\n}",
                                                "visibility": "public",
                                                "simpleName": "getPelletSprite()",
                                                "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The sprite for the\r\n",
                                                "metaSrc": "source code",
                                                "description": "Loads a sprite for pellets in Pacman.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                "reason": "This method is responsible for loading the sprite image for pellets, which is part of the game's visual representation. It does not interact with user input or data access, making it a candidate for the Logic layer.",
                                                "howToUse": "Call this method to get the sprite for pellets in Pacman.",
                                                "howItWorks": "The method calls another method `loadSprite` with the path to the pellet sprite image file.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1096",
                                                "selfTime": "31",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 3,
                                                  "subtreeDepth": 4,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "445",
                                                    "parentId": "444",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "loadSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "loadSprite(java.lang.String)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                    "kind": "method",
                                                    "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                    "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                    "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                    "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1065",
                                                    "selfTime": "20",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 2,
                                                      "subtreeDepth": 3,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "446",
                                                        "parentId": "445",
                                                        "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                        "methodName": "loadSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                        "visibility": "public",
                                                        "simpleName": "loadSprite(java.lang.String)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                        "kind": "method",
                                                        "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                        "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                        "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                        "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "1045",
                                                        "selfTime": "20",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 1,
                                                          "totalDescendants": 1,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "447",
                                                            "parentId": "446",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "loadSpriteFromResource",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                            "visibility": "private",
                                                            "simpleName": "loadSpriteFromResource(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                            "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                                            "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "1005",
                                                            "selfTime": "2",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "id": "448",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                                            "className": "nl.tudelft.jpacman.board.Unit",
                                            "methodName": "occupy",
                                            "color": "#984EA3",
                                            "packageName": "nl.tudelft.jpacman.board",
                                            "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                                            "visibility": "public",
                                            "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
                                            "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
                                            "kind": "method",
                                            "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Moves the unit to a new square.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "Void",
                                            "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                                            "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
                                            "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "92",
                                            "selfTime": "31",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 1,
                                              "subtreeDepth": 2,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "449",
                                                "parentId": "448",
                                                "label": "nl.tudelft.jpacman.board.Square.put()",
                                                "className": "nl.tudelft.jpacman.board.Square",
                                                "methodName": "put",
                                                "color": "#984EA3",
                                                "packageName": "nl.tudelft.jpacman.board",
                                                "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                                                "visibility": "default",
                                                "simpleName": "put(nl.tudelft.jpacman.board.Unit)",
                                                "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
                                                "kind": "method",
                                                "docComment": "Adds a new occupant to this square.\r\n\r\n@param occupant\r\n\t\tThe unit to occupy this square.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Adds an occupant to the square.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "void",
                                                "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                                                "howToUse": "Call put with a Unit object as the parameter.",
                                                "howItWorks": "Checks if the occupant is not null and not already present in the occupants list, then adds the occupant to the list.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "61",
                                                "selfTime": "40",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 0,
                                                  "totalDescendants": 0,
                                                  "subtreeDepth": 1,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": []
                                              }
                                            ]
                                          },
                                          {
                                            "id": "450",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare()",
                                            "className": "nl.tudelft.jpacman.level.MapParser",
                                            "methodName": "makeGhostSquare",
                                            "color": "#E41A1C",
                                            "packageName": "nl.tudelft.jpacman.level",
                                            "sourceCode": "/**\r\n * creates a Square with the specified ghost on it\r\n * and appends the placed ghost into the ghost list.\r\n *\r\n * @param ghosts\r\n * \t\tall the ghosts in the level so far, the new ghost will be appended\r\n * @param ghost\r\n * \t\tthe newly created ghost to be placed\r\n * @return a square with the ghost on it.\r\n */\r\nprotected nl.tudelft.jpacman.board.Square makeGhostSquare(java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    nl.tudelft.jpacman.board.Square ghostSquare = this.boardCreator.createGround();\r\n    ghosts.add(ghost);\r\n    ghost.occupy(ghostSquare);\r\n    return ghostSquare;\r\n}",
                                            "visibility": "protected",
                                            "simpleName": "makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
                                            "qualifiedName": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare(java.util.List,nl.tudelft.jpacman.npc.Ghost)",
                                            "kind": "method",
                                            "docComment": "creates a Square with the specified ghost on it\r\nand appends the placed ghost into the ghost list.\r\n\r\n@param ghosts\r\n\t\tall the ghosts in the level so far, the new ghost will be appended\r\n@param ghost\r\n\t\tthe newly created ghost to be placed\r\n@return a square with the ghost on it.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a square for a ghost in the game board.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "nl.tudelft.jpacman.board.Square",
                                            "reason": "This method is responsible for creating a square where a ghost can occupy, which involves setting up the square and adding the ghost to it.",
                                            "howToUse": "Call this method with a list of all ghosts on the board and the specific ghost you want to place. It will return the square where the ghost is placed.",
                                            "howItWorks": "The method creates a ground square using `boardCreator.createGround()`, adds the ghost to the list, and then occupies the square with the ghost using `ghost.occupy(ghostSquare)`. Finally, it returns the created square.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "43",
                                            "selfTime": "7",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 2,
                                              "totalDescendants": 6,
                                              "subtreeDepth": 5,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "451",
                                                "parentId": "450",
                                                "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                                "className": "nl.tudelft.jpacman.board.BoardFactory",
                                                "methodName": "createGround",
                                                "color": "#984EA3",
                                                "packageName": "nl.tudelft.jpacman.board",
                                                "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                                "visibility": "public",
                                                "simpleName": "createGround()",
                                                "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                                "kind": "method",
                                                "docComment": "Creates a new square that can be occupied by any unit.\r\n\r\n@return A new square that can be occupied by any unit.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Creates a ground square in the board.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.board.Square",
                                                "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                                "howToUse": "Call this method on an instance of BoardFactory to get a new ground square.",
                                                "howItWorks": "The method retrieves a ground sprite using PacManSprites.getGroundSprite() and then creates a new Ground object with this sprite. The newly created ground square is returned.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "31",
                                                "selfTime": "2",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 3,
                                                  "subtreeDepth": 4,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "452",
                                                    "parentId": "451",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "getGroundSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "getGroundSprite()",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                    "kind": "method",
                                                    "docComment": "\r\n@return The sprite for the ground.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Loads a sprite representing the ground from a resource file.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                    "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                                    "howToUse": "Call this method to get the sprite representing the ground in the game.",
                                                    "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the sprite.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "13",
                                                    "selfTime": "2",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 2,
                                                      "subtreeDepth": 3,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "453",
                                                        "parentId": "452",
                                                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                        "methodName": "loadSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                        "visibility": "public",
                                                        "simpleName": "loadSprite(java.lang.String)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                        "kind": "method",
                                                        "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                        "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                        "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                        "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "11",
                                                        "selfTime": "3",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 1,
                                                          "totalDescendants": 1,
                                                          "subtreeDepth": 2,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": [
                                                          {
                                                            "id": "454",
                                                            "parentId": "453",
                                                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                            "methodName": "loadSprite",
                                                            "color": "#F781BF",
                                                            "packageName": "nl.tudelft.jpacman.sprite",
                                                            "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                            "visibility": "public",
                                                            "simpleName": "loadSprite(java.lang.String)",
                                                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                            "kind": "method",
                                                            "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                            "metaSrc": "source code",
                                                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                            "detailedBehavior": "",
                                                            "flowRepresentation": "",
                                                            "briefSummary": "",
                                                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                            "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                            "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                            "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                            "assertions": "",
                                                            "layer": "Logic",
                                                            "time": "8",
                                                            "selfTime": "5",
                                                            "percent": "0.0",
                                                            "isRoot": false,
                                                            "collapsed": true,
                                                            "selected": false,
                                                            "treeStats": {
                                                              "directChildrenCount": 0,
                                                              "totalDescendants": 0,
                                                              "subtreeDepth": 1,
                                                              "level": 15
                                                            },
                                                            "status": {
                                                              "fanOut": false,
                                                              "implementationEntryPoint": false,
                                                              "chainStartPoint": false,
                                                              "recursiveEntryPoint": false,
                                                              "isSummarised": false
                                                            },
                                                            "children": []
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              },
                                              {
                                                "id": "455",
                                                "parentId": "450",
                                                "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                                                "className": "nl.tudelft.jpacman.board.Unit",
                                                "methodName": "occupy",
                                                "color": "#984EA3",
                                                "packageName": "nl.tudelft.jpacman.board",
                                                "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                                                "visibility": "public",
                                                "simpleName": "occupy(nl.tudelft.jpacman.board.Square)",
                                                "qualifiedName": "nl.tudelft.jpacman.board.Unit.occupy(nl.tudelft.jpacman.board.Square)",
                                                "kind": "method",
                                                "docComment": "Occupies the target square iff this unit is allowed to as decided by\r\n{@link Square#isAccessibleTo(Unit)}.\r\n\r\n@param target\r\n\t\tThe square to occupy.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Moves the unit to a new square.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "Void",
                                                "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                                                "howToUse": "Call this method with a reference to the new square where you want the unit to move.",
                                                "howItWorks": "The method first asserts that the target square is not null. It then checks if the unit is currently on a square; if so, it removes itself from that square. The unit then moves to the target square and adds itself to it. Finally, it asserts that the invariant holds true.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "3",
                                                "selfTime": "2",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 1,
                                                  "subtreeDepth": 2,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "456",
                                                    "parentId": "455",
                                                    "label": "nl.tudelft.jpacman.board.Square.put()",
                                                    "className": "nl.tudelft.jpacman.board.Square",
                                                    "methodName": "put",
                                                    "color": "#984EA3",
                                                    "packageName": "nl.tudelft.jpacman.board",
                                                    "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                                                    "visibility": "default",
                                                    "simpleName": "put(nl.tudelft.jpacman.board.Unit)",
                                                    "qualifiedName": "nl.tudelft.jpacman.board.Square.put(nl.tudelft.jpacman.board.Unit)",
                                                    "kind": "method",
                                                    "docComment": "Adds a new occupant to this square.\r\n\r\n@param occupant\r\n\t\tThe unit to occupy this square.\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Adds an occupant to the square.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "void",
                                                    "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                                                    "howToUse": "Call put with a Unit object as the parameter.",
                                                    "howItWorks": "Checks if the occupant is not null and not already present in the occupants list, then adds the occupant to the list.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1",
                                                    "selfTime": "0",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 0,
                                                      "totalDescendants": 0,
                                                      "subtreeDepth": 1,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": []
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "id": "457",
                                            "parentId": "371",
                                            "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                            "className": "nl.tudelft.jpacman.board.BoardFactory",
                                            "methodName": "createGround",
                                            "color": "#984EA3",
                                            "packageName": "nl.tudelft.jpacman.board",
                                            "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                            "visibility": "public",
                                            "simpleName": "createGround()",
                                            "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                            "kind": "method",
                                            "docComment": "Creates a new square that can be occupied by any unit.\r\n\r\n@return A new square that can be occupied by any unit.\r\n",
                                            "metaSrc": "source code",
                                            "description": "Creates a ground square in the board.",
                                            "detailedBehavior": "",
                                            "flowRepresentation": "",
                                            "briefSummary": "",
                                            "returns": "nl.tudelft.jpacman.board.Square",
                                            "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                            "howToUse": "Call this method on an instance of BoardFactory to get a new ground square.",
                                            "howItWorks": "The method retrieves a ground sprite using PacManSprites.getGroundSprite() and then creates a new Ground object with this sprite. The newly created ground square is returned.",
                                            "assertions": "",
                                            "layer": "Logic",
                                            "time": "5",
                                            "selfTime": "0",
                                            "percent": "0.0",
                                            "isRoot": false,
                                            "collapsed": true,
                                            "selected": false,
                                            "treeStats": {
                                              "directChildrenCount": 1,
                                              "totalDescendants": 3,
                                              "subtreeDepth": 4,
                                              "level": 11
                                            },
                                            "status": {
                                              "fanOut": false,
                                              "implementationEntryPoint": true,
                                              "chainStartPoint": false,
                                              "recursiveEntryPoint": false,
                                              "isSummarised": false
                                            },
                                            "children": [
                                              {
                                                "id": "458",
                                                "parentId": "457",
                                                "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                "methodName": "getGroundSprite",
                                                "color": "#F781BF",
                                                "packageName": "nl.tudelft.jpacman.sprite",
                                                "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                                "visibility": "public",
                                                "simpleName": "getGroundSprite()",
                                                "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                "kind": "method",
                                                "docComment": "\r\n@return The sprite for the ground.\r\n",
                                                "metaSrc": "source code",
                                                "description": "Loads a sprite representing the ground from a resource file.",
                                                "detailedBehavior": "",
                                                "flowRepresentation": "",
                                                "briefSummary": "",
                                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                                "howToUse": "Call this method to get the sprite representing the ground in the game.",
                                                "howItWorks": "The method calls another method `loadSprite` with a specific file path to retrieve the sprite.",
                                                "assertions": "",
                                                "layer": "Logic",
                                                "time": "1",
                                                "selfTime": "0",
                                                "percent": "0.0",
                                                "isRoot": false,
                                                "collapsed": true,
                                                "selected": false,
                                                "treeStats": {
                                                  "directChildrenCount": 1,
                                                  "totalDescendants": 2,
                                                  "subtreeDepth": 3,
                                                  "level": 12
                                                },
                                                "status": {
                                                  "fanOut": false,
                                                  "implementationEntryPoint": false,
                                                  "chainStartPoint": false,
                                                  "recursiveEntryPoint": false,
                                                  "isSummarised": false
                                                },
                                                "children": [
                                                  {
                                                    "id": "459",
                                                    "parentId": "458",
                                                    "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                    "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                    "methodName": "loadSprite",
                                                    "color": "#F781BF",
                                                    "packageName": "nl.tudelft.jpacman.sprite",
                                                    "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                    "visibility": "public",
                                                    "simpleName": "loadSprite(java.lang.String)",
                                                    "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                                    "kind": "method",
                                                    "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                                    "metaSrc": "source code",
                                                    "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                    "detailedBehavior": "",
                                                    "flowRepresentation": "",
                                                    "briefSummary": "",
                                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                    "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                    "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                                    "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                                    "assertions": "",
                                                    "layer": "Logic",
                                                    "time": "1",
                                                    "selfTime": "0",
                                                    "percent": "0.0",
                                                    "isRoot": false,
                                                    "collapsed": true,
                                                    "selected": false,
                                                    "treeStats": {
                                                      "directChildrenCount": 1,
                                                      "totalDescendants": 1,
                                                      "subtreeDepth": 2,
                                                      "level": 13
                                                    },
                                                    "status": {
                                                      "fanOut": false,
                                                      "implementationEntryPoint": false,
                                                      "chainStartPoint": false,
                                                      "recursiveEntryPoint": false,
                                                      "isSummarised": false
                                                    },
                                                    "children": [
                                                      {
                                                        "id": "460",
                                                        "parentId": "459",
                                                        "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                        "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                        "methodName": "loadSprite",
                                                        "color": "#F781BF",
                                                        "packageName": "nl.tudelft.jpacman.sprite",
                                                        "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                        "visibility": "public",
                                                        "simpleName": "loadSprite(java.lang.String)",
                                                        "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                                        "kind": "method",
                                                        "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                                        "metaSrc": "source code",
                                                        "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                        "detailedBehavior": "",
                                                        "flowRepresentation": "",
                                                        "briefSummary": "",
                                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                        "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                        "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                                        "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                                        "assertions": "",
                                                        "layer": "Logic",
                                                        "time": "1",
                                                        "selfTime": "1",
                                                        "percent": "0.0",
                                                        "isRoot": false,
                                                        "collapsed": true,
                                                        "selected": false,
                                                        "treeStats": {
                                                          "directChildrenCount": 0,
                                                          "totalDescendants": 0,
                                                          "subtreeDepth": 1,
                                                          "level": 14
                                                        },
                                                        "status": {
                                                          "fanOut": false,
                                                          "implementationEntryPoint": false,
                                                          "chainStartPoint": false,
                                                          "recursiveEntryPoint": false,
                                                          "isSummarised": false
                                                        },
                                                        "children": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "id": "461",
                                    "parentId": "369",
                                    "label": "nl.tudelft.jpacman.board.BoardFactory.createBoard()",
                                    "className": "nl.tudelft.jpacman.board.BoardFactory",
                                    "methodName": "createBoard",
                                    "color": "#984EA3",
                                    "packageName": "nl.tudelft.jpacman.board",
                                    "sourceCode": "/**\r\n * Creates a new board from a grid of cells and connects it.\r\n *\r\n * @param grid\r\n * \t\tThe square grid of cells, in which grid[x][y] corresponds to\r\n * \t\tthe square at position x,y.\r\n * @return A new board, wrapping a grid of connected cells.\r\n */\r\npublic nl.tudelft.jpacman.board.Board createBoard(nl.tudelft.jpacman.board.Square[][] grid) {\r\n    assert grid != null;\r\n    nl.tudelft.jpacman.board.Board board = new nl.tudelft.jpacman.board.Board(grid);\r\n    int width = board.getWidth();\r\n    int height = board.getHeight();\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            nl.tudelft.jpacman.board.Square square = grid[x][y];\r\n            for (nl.tudelft.jpacman.board.Direction dir : nl.tudelft.jpacman.board.Direction.values()) {\r\n                int dirX = ((width + x) + dir.getDeltaX()) % width;\r\n                int dirY = ((height + y) + dir.getDeltaY()) % height;\r\n                nl.tudelft.jpacman.board.Square neighbour = grid[dirX][dirY];\r\n                square.link(neighbour, dir);\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}",
                                    "visibility": "public",
                                    "simpleName": "createBoard(nl.tudelft.jpacman.board.Square[][])",
                                    "qualifiedName": "nl.tudelft.jpacman.board.BoardFactory.createBoard(nl.tudelft.jpacman.board.Square[][])",
                                    "kind": "method",
                                    "docComment": "Creates a new board from a grid of cells and connects it.\r\n\r\n@param grid\r\n\t\tThe square grid of cells, in which grid[x][y] corresponds to\r\n\t\tthe square at position x,y.\r\n@return A new board, wrapping a grid of connected cells.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Creates a board in the Pacman game using a given grid of squares.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "nl.tudelft.jpacman.board.Board",
                                    "reason": "This method initializes a new board with the provided grid and sets up the connections between adjacent squares.",
                                    "howToUse": "Call this method with a two-dimensional array of Square objects to create a new Board instance.",
                                    "howItWorks": "The method first validates that the grid is not null. It then creates a new Board object using the provided grid. After obtaining the board's width and height, it iterates through each square in the grid, linking it with its neighboring squares in all four directions (up, down, left, right).",
                                    "assertions": [
                                      {
                                        "description": "The grid parameter must not be null.",
                                        "type": "precondition"
                                      }
                                    ],
                                    "layer": "Logic",
                                    "time": "1828",
                                    "selfTime": "948",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 4,
                                      "totalDescendants": 4,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": true,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "462",
                                        "parentId": "461",
                                        "label": "nl.tudelft.jpacman.board.Square.link()",
                                        "className": "nl.tudelft.jpacman.board.Square",
                                        "methodName": "link",
                                        "color": "#984EA3",
                                        "packageName": "nl.tudelft.jpacman.board",
                                        "sourceCode": "/**\r\n * Links this square to a neighbour in the given direction. Note that this\r\n * is a one-way connection.\r\n *\r\n * @param neighbour\r\n * \t\tThe neighbour to link.\r\n * @param direction\r\n * \t\tThe direction the new neighbour is in, as seen from this cell.\r\n */\r\npublic void link(nl.tudelft.jpacman.board.Square neighbour, nl.tudelft.jpacman.board.Direction direction) {\r\n    this.neighbours.put(direction, neighbour);\r\n    assert this.invariant();\r\n}",
                                        "visibility": "public",
                                        "simpleName": "link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
                                        "qualifiedName": "nl.tudelft.jpacman.board.Square.link(nl.tudelft.jpacman.board.Square,nl.tudelft.jpacman.board.Direction)",
                                        "kind": "method",
                                        "docComment": "Links this square to a neighbour in the given direction. Note that this\r\nis a one-way connection.\r\n\r\n@param neighbour\r\n\t\tThe neighbour to link.\r\n@param direction\r\n\t\tThe direction the new neighbour is in, as seen from this cell.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Links a neighboring square in a specific direction.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "void",
                                        "reason": "This method is used to establish connections between squares in a grid, which is essential for the game logic.",
                                        "howToUse": "Call this method on an instance of Square with a neighboring Square and a Direction enum value.",
                                        "howItWorks": "The method stores the neighbor in a map using the direction as the key. It then asserts that the object's invariant holds true.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "557",
                                        "selfTime": "198",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      },
                                      {
                                        "id": "463",
                                        "parentId": "461",
                                        "label": "nl.tudelft.jpacman.board.Direction.values()",
                                        "className": "nl.tudelft.jpacman.board.Direction",
                                        "methodName": "values",
                                        "color": "#984EA3",
                                        "packageName": "nl.tudelft.jpacman.board",
                                        "sourceCode": "",
                                        "visibility": "",
                                        "simpleName": "",
                                        "qualifiedName": "",
                                        "kind": "",
                                        "docComment": "",
                                        "metaSrc": "",
                                        "description": "",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "",
                                        "reason": "",
                                        "howToUse": "",
                                        "howItWorks": "",
                                        "assertions": "",
                                        "layer": "",
                                        "time": "127",
                                        "selfTime": "55",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      },
                                      {
                                        "id": "464",
                                        "parentId": "461",
                                        "label": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
                                        "className": "nl.tudelft.jpacman.board.Direction",
                                        "methodName": "getDeltaX",
                                        "color": "#984EA3",
                                        "packageName": "nl.tudelft.jpacman.board",
                                        "sourceCode": "/**\r\n *\r\n * @return The delta x (width difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaX() {\r\n    return this.deltaX;\r\n}",
                                        "visibility": "public",
                                        "simpleName": "getDeltaX()",
                                        "qualifiedName": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The delta x (width difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the horizontal movement delta for a direction.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "An integer representing the horizontal movement delta for the direction.",
                                        "reason": "This method is necessary for determining how a character should move horizontally on the board based on its current direction.",
                                        "howToUse": "Call this method on an instance of Direction to get its horizontal movement delta.",
                                        "howItWorks": "The method simply returns the value of the private field 'deltaX'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "98",
                                        "selfTime": "98",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      },
                                      {
                                        "id": "465",
                                        "parentId": "461",
                                        "label": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
                                        "className": "nl.tudelft.jpacman.board.Direction",
                                        "methodName": "getDeltaY",
                                        "color": "#984EA3",
                                        "packageName": "nl.tudelft.jpacman.board",
                                        "sourceCode": "/**\r\n *\r\n * @return The delta y (height difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaY() {\r\n    return this.deltaY;\r\n}",
                                        "visibility": "public",
                                        "simpleName": "getDeltaY()",
                                        "qualifiedName": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
                                        "kind": "method",
                                        "docComment": "\r\n@return The delta y (height difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Returns the vertical movement delta for a direction.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "An integer representing the vertical movement delta for the direction.",
                                        "reason": "This method is necessary for determining vertical movement based on a direction, which is part of the game logic.",
                                        "howToUse": "Call this method on an instance of Direction to get its vertical movement delta.",
                                        "howItWorks": "The method simply returns the value of the private field 'deltaY'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "92",
                                        "selfTime": "92",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "466",
                                    "parentId": "369",
                                    "label": "nl.tudelft.jpacman.level.LevelFactory.createLevel()",
                                    "className": "nl.tudelft.jpacman.level.LevelFactory",
                                    "methodName": "createLevel",
                                    "color": "#E41A1C",
                                    "packageName": "nl.tudelft.jpacman.level",
                                    "sourceCode": "/**\r\n * Creates a new level from the provided data.\r\n *\r\n * @param board\r\n * \t\tThe board with all ghosts and pellets occupying their squares.\r\n * @param ghosts\r\n * \t\tA list of all ghosts on the board.\r\n * @param startPositions\r\n * \t\tA list of squares from which players may start the game.\r\n * @return A new level for the board.\r\n */\r\npublic nl.tudelft.jpacman.level.Level createLevel(nl.tudelft.jpacman.board.Board board, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    // We'll adopt the simple collision map for now.\r\n    nl.tudelft.jpacman.level.CollisionMap collisionMap = new nl.tudelft.jpacman.level.PlayerCollisions(this.pointCalculator);\r\n    return new nl.tudelft.jpacman.level.Level(board, ghosts, startPositions, collisionMap);\r\n}",
                                    "visibility": "public",
                                    "simpleName": "createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
                                    "qualifiedName": "nl.tudelft.jpacman.level.LevelFactory.createLevel(nl.tudelft.jpacman.board.Board,java.util.List,java.util.List)",
                                    "kind": "method",
                                    "docComment": "Creates a new level from the provided data.\r\n\r\n@param board\r\n\t\tThe board with all ghosts and pellets occupying their squares.\r\n@param ghosts\r\n\t\tA list of all ghosts on the board.\r\n@param startPositions\r\n\t\tA list of squares from which players may start the game.\r\n@return A new level for the board.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Creates a new level in the game Pacman.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "nl.tudelft.jpacman.level.Level",
                                    "reason": "This method is responsible for creating a new level in the game, setting up the board, placing ghosts and defining their starting positions.",
                                    "howToUse": "Call this method with a board object, a list of ghost objects, and a list of start position squares to create a new level.",
                                    "howItWorks": "The method initializes a collision map for player collisions and then creates a new Level object with the provided parameters.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "565",
                                    "selfTime": "534",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "467",
                                "parentId": "368",
                                "label": "nl.tudelft.jpacman.level.MapParser.checkMapFormat()",
                                "className": "nl.tudelft.jpacman.level.MapParser",
                                "methodName": "checkMapFormat",
                                "color": "#E41A1C",
                                "packageName": "nl.tudelft.jpacman.level",
                                "sourceCode": "/**\r\n * Check the correctness of the map lines in the text.\r\n *\r\n * @param text\r\n * \t\tMap to be checked\r\n * @throws PacmanConfigurationException\r\n * \t\tif map is not OK.\r\n */\r\nprivate void checkMapFormat(java.util.List<java.lang.String> text) {\r\n    if (text == null) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text cannot be null.\");\r\n    }\r\n    if (text.isEmpty()) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text must consist of at least 1 row.\");\r\n    }\r\n    int width = text.get(0).length();\r\n    if (width == 0) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines cannot be empty.\");\r\n    }\r\n    for (java.lang.String line : text) {\r\n        if (line.length() != width) {\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines are not of equal width.\");\r\n        }\r\n    }\r\n}",
                                "visibility": "private",
                                "simpleName": "checkMapFormat(java.util.List)",
                                "qualifiedName": "nl.tudelft.jpacman.level.MapParser.checkMapFormat(java.util.List)",
                                "kind": "method",
                                "docComment": "Check the correctness of the map lines in the text.\r\n\r\n@param text\r\n\t\tMap to be checked\r\n@throws PacmanConfigurationException\r\n\t\tif map is not OK.\r\n",
                                "metaSrc": "source code",
                                "description": "Checks the format of a map text input for a Pacman game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "void",
                                "reason": "Ensures that the input map text is properly formatted to avoid runtime errors during game initialization.",
                                "howToUse": "Call this method with a list of strings where each string represents a line of the map. The method will validate the format and throw exceptions if any issues are found.",
                                "howItWorks": "The method checks for null input, empty input, equal width lines, and throws appropriate exceptions if any conditions are not met.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "87",
                                "selfTime": "36",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": "468",
                    "parentId": "365",
                    "label": "nl.tudelft.jpacman.Launcher.getMapParser()",
                    "className": "nl.tudelft.jpacman.Launcher",
                    "methodName": "getMapParser",
                    "color": "#ECC94B",
                    "packageName": "nl.tudelft.jpacman",
                    "sourceCode": "/**\r\n *\r\n * @return A new map parser object using the factories from\r\n{@link #getLevelFactory()} and {@link #getBoardFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.MapParser getMapParser() {\r\n    return new nl.tudelft.jpacman.level.MapParser(this.getLevelFactory(), this.getBoardFactory());\r\n}",
                    "visibility": "protected",
                    "simpleName": "getMapParser()",
                    "qualifiedName": "nl.tudelft.jpacman.Launcher.getMapParser()",
                    "kind": "method",
                    "docComment": "\r\n@return A new map parser object using the factories from\r\n{@link #getLevelFactory()} and {@link #getBoardFactory()}.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the MapParser used in the game.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An instance of nl.tudelft.jpacman.level.MapParser.",
                    "reason": "This method is responsible for creating a MapParser, which is essential for parsing levels in the game. It uses other factory methods to obtain necessary components like LevelFactory and BoardFactory.",
                    "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to get the MapParser used by the game.",
                    "howItWorks": "The method creates a new MapParser object, passing in instances of LevelFactory and BoardFactory obtained from other methods within the same class.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "11374",
                    "selfTime": "1602",
                    "percent": "0.1",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 2,
                      "totalDescendants": 9,
                      "subtreeDepth": 6,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "469",
                        "parentId": "468",
                        "label": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
                        "className": "nl.tudelft.jpacman.Launcher",
                        "methodName": "getLevelFactory",
                        "color": "#ECC94B",
                        "packageName": "nl.tudelft.jpacman",
                        "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}\r\nand the ghosts from {@link #getGhostFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.LevelFactory getLevelFactory() {\r\n    return new nl.tudelft.jpacman.level.LevelFactory(this.getSpriteStore(), this.getGhostFactory(), this.loadPointCalculator());\r\n}",
                        "visibility": "protected",
                        "simpleName": "getLevelFactory()",
                        "qualifiedName": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
                        "kind": "method",
                        "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}\r\nand the ghosts from {@link #getGhostFactory()}.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the level factory used in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An instance of nl.tudelft.jpacman.level.LevelFactory.",
                        "reason": "This method is responsible for creating the level factory, which is essential for setting up levels in the game. It depends on other components like sprite store, ghost factory, and point calculator to provide a complete level setup.",
                        "howToUse": "Call this method from an instance of nl.tudelft.jpacman.Launcher to retrieve the level factory needed for creating game levels.",
                        "howItWorks": "The method initializes a new LevelFactory object by passing instances of SpriteStore, GhostFactory, and PointCalculator to its constructor.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "8194",
                        "selfTime": "1874",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 3,
                          "totalDescendants": 7,
                          "subtreeDepth": 5,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "470",
                            "parentId": "469",
                            "label": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
                            "className": "nl.tudelft.jpacman.Launcher",
                            "methodName": "loadPointCalculator",
                            "color": "#ECC94B",
                            "packageName": "nl.tudelft.jpacman",
                            "sourceCode": "private nl.tudelft.jpacman.points.PointCalculator loadPointCalculator() {\r\n    return new nl.tudelft.jpacman.points.PointCalculatorLoader().load();\r\n}",
                            "visibility": "private",
                            "simpleName": "loadPointCalculator()",
                            "qualifiedName": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
                            "kind": "method",
                            "docComment": "",
                            "metaSrc": "source code",
                            "description": "Loads a PointCalculator instance dynamically from a file.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                            "reason": "This method is responsible for loading a PointCalculator, which is part of the application logic. It does not interact with the user interface or handle data access directly.",
                            "howToUse": "Call this method to obtain an instance of PointCalculator that can be used to calculate points in the game.",
                            "howItWorks": "The method uses a PointCalculatorLoader to dynamically load and return a PointCalculator object.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "4307",
                            "selfTime": "291",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 3,
                              "subtreeDepth": 4,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "471",
                                "parentId": "470",
                                "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                                "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                                "methodName": "load",
                                "color": "#BEBADA",
                                "packageName": "nl.tudelft.jpacman.points",
                                "sourceCode": "/**\r\n * Load a points calculator and return it.\r\n *\r\n * @return The (dynamically loaded) points calculator.\r\n */\r\npublic nl.tudelft.jpacman.points.PointCalculator load() {\r\n    try {\r\n        if (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz == null) {\r\n            nl.tudelft.jpacman.points.PointCalculatorLoader.clazz = this.loadClassFromFile();\r\n        }\r\n        return ((nl.tudelft.jpacman.points.PointCalculator) (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz.newInstance()));\r\n    } catch (java.lang.Exception e) {\r\n        throw new java.lang.RuntimeException(\"Could not dynamically load the points calculator.\", e);\r\n    }\r\n}",
                                "visibility": "public",
                                "simpleName": "load()",
                                "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                                "kind": "method",
                                "docComment": "Load a points calculator and return it.\r\n\r\n@return The (dynamically loaded) points calculator.\r\n",
                                "metaSrc": "source code",
                                "description": "Loads a PointCalculator instance dynamically from a file.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                                "reason": "This method is responsible for loading a specific implementation of the PointCalculator interface, which is crucial for calculating points in the game. It ensures that the correct calculator is instantiated based on the strategy defined in the application.",
                                "howToUse": "Call this method to obtain an instance of PointCalculator without knowing its concrete class at compile time.",
                                "howItWorks": "The method checks if a class has already been loaded and, if not, loads it from a file. It then creates a new instance of the loaded class and returns it.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "4013",
                                "selfTime": "3",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 1,
                                  "totalDescendants": 2,
                                  "subtreeDepth": 3,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "472",
                                    "parentId": "471",
                                    "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
                                    "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                                    "methodName": "loadClassFromFile",
                                    "color": "#BEBADA",
                                    "packageName": "nl.tudelft.jpacman.points",
                                    "sourceCode": "private java.lang.Class loadClassFromFile() throws java.io.IOException, java.lang.ClassNotFoundException {\r\n    java.lang.String strategyToLoad = this.getCalculatorClassName();\r\n    if (\"DefaultPointCalculator\".equals(strategyToLoad)) {\r\n        return nl.tudelft.jpacman.points.DefaultPointCalculator.class;\r\n    }\r\n    java.net.URL[] urls = new java.net.URL[]{ this.getClass().getClassLoader().getResource(\"scoreplugins/\") };\r\n    try (java.net.URLClassLoader classLoader = new java.net.URLClassLoader(urls, this.getClass().getClassLoader())) {\r\n        return classLoader.loadClass(strategyToLoad);\r\n    }\r\n}",
                                    "visibility": "private",
                                    "simpleName": "loadClassFromFile()",
                                    "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Loads a class from a file based on the strategy to load.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A Class object representing the loaded class.",
                                    "reason": "This method is responsible for dynamically loading a point calculator class based on a configuration strategy, which falls under application logic as it involves decision-making and dynamic behavior.",
                                    "howToUse": "Call this method with the name of the class to load. It will return the Class object for that class.",
                                    "howItWorks": "The method first checks if the strategy is 'DefaultPointCalculator'. If so, it returns the DefaultPointCalculator class directly. Otherwise, it creates a custom URLClassLoader to load the class from a specified directory.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "3959",
                                    "selfTime": "474",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 1,
                                      "totalDescendants": 1,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "473",
                                        "parentId": "472",
                                        "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
                                        "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                                        "methodName": "getCalculatorClassName",
                                        "color": "#BEBADA",
                                        "packageName": "nl.tudelft.jpacman.points",
                                        "sourceCode": "private java.lang.String getCalculatorClassName() throws java.io.IOException {\r\n    java.util.Properties properties = new java.util.Properties();\r\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"scorecalc.properties\"));\r\n    return properties.getProperty(\"scorecalculator.name\");\r\n}",
                                        "visibility": "private",
                                        "simpleName": "getCalculatorClassName()",
                                        "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
                                        "kind": "method",
                                        "docComment": "",
                                        "metaSrc": "source code",
                                        "description": "Retrieves the class name of the point calculator from a properties file.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A string representing the fully qualified name of the point calculator class.",
                                        "reason": "This method is used to dynamically load the point calculator based on configuration, which is part of the application logic.",
                                        "howToUse": "Call this method to get the class name of the point calculator used in the game.",
                                        "howItWorks": "Loads properties from 'scorecalc.properties' and returns the value associated with 'scorecalculator.name'.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "3483",
                                        "selfTime": "410",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "id": "474",
                            "parentId": "469",
                            "label": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
                            "className": "nl.tudelft.jpacman.Launcher",
                            "methodName": "getGhostFactory",
                            "color": "#ECC94B",
                            "packageName": "nl.tudelft.jpacman",
                            "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.npc.ghost.GhostFactory getGhostFactory() {\r\n    return new nl.tudelft.jpacman.npc.ghost.GhostFactory(this.getSpriteStore());\r\n}",
                            "visibility": "protected",
                            "simpleName": "getGhostFactory()",
                            "qualifiedName": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
                            "kind": "method",
                            "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the ghost factory used in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An instance of nl.tudelft.jpacman.npc.ghost.GhostFactory.",
                            "reason": "This method is responsible for creating ghost objects, which are a key component of the game logic.",
                            "howToUse": "Call this method to obtain an instance of GhostFactory that can be used to create ghost entities in the game.",
                            "howItWorks": "The method creates a new GhostFactory object by passing the sprite store obtained from getSpriteStore() as a parameter.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "2005",
                            "selfTime": "2001",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 1,
                              "subtreeDepth": 2,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "475",
                                "parentId": "474",
                                "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                                "className": "nl.tudelft.jpacman.Launcher",
                                "methodName": "getSpriteStore",
                                "color": "#ECC94B",
                                "packageName": "nl.tudelft.jpacman",
                                "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                                "visibility": "protected",
                                "simpleName": "getSpriteStore()",
                                "qualifiedName": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                                "kind": "method",
                                "docComment": "\r\n@return The default {@link PacManSprites}.\r\n",
                                "metaSrc": "source code",
                                "description": "Retrieves the sprite store used in the game.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                                "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                                "howToUse": "Call this method to obtain the sprite store for rendering game elements like Pac-Man and ghosts.",
                                "howItWorks": "The method returns a pre-initialized instance of PacManSprites, which is stored as a static field in the Launcher class.",
                                "assertions": "",
                                "layer": "UI",
                                "time": "2",
                                "selfTime": "2",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          },
                          {
                            "id": "476",
                            "parentId": "469",
                            "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                            "className": "nl.tudelft.jpacman.Launcher",
                            "methodName": "getSpriteStore",
                            "color": "#ECC94B",
                            "packageName": "nl.tudelft.jpacman",
                            "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                            "visibility": "protected",
                            "simpleName": "getSpriteStore()",
                            "qualifiedName": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                            "kind": "method",
                            "docComment": "\r\n@return The default {@link PacManSprites}.\r\n",
                            "metaSrc": "source code",
                            "description": "Retrieves the sprite store used in the game.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                            "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                            "howToUse": "Call this method to obtain the sprite store for rendering game elements like Pac-Man and ghosts.",
                            "howItWorks": "The method returns a pre-initialized instance of PacManSprites, which is stored as a static field in the Launcher class.",
                            "assertions": "",
                            "layer": "UI",
                            "time": "2",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 0,
                              "totalDescendants": 0,
                              "subtreeDepth": 1,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": []
                          }
                        ]
                      },
                      {
                        "id": "477",
                        "parentId": "468",
                        "label": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
                        "className": "nl.tudelft.jpacman.Launcher",
                        "methodName": "getBoardFactory",
                        "color": "#ECC94B",
                        "packageName": "nl.tudelft.jpacman",
                        "sourceCode": "/**\r\n *\r\n * @return A new board factory using the sprite store from\r\n{@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.board.BoardFactory getBoardFactory() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory(this.getSpriteStore());\r\n}",
                        "visibility": "protected",
                        "simpleName": "getBoardFactory()",
                        "qualifiedName": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
                        "kind": "method",
                        "docComment": "\r\n@return A new board factory using the sprite store from\r\n{@link #getSpriteStore()}.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the board factory used in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An instance of nl.tudelft.jpacman.board.BoardFactory.",
                        "reason": "This method is responsible for creating a board factory, which is essential for setting up the game's board. It depends on the sprite store to provide necessary visual elements.",
                        "howToUse": "Call this method from an instance of Launcher to obtain a BoardFactory object.",
                        "howItWorks": "The method creates a new BoardFactory by passing the sprite store obtained from `this.getSpriteStore()` to its constructor.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "1575",
                        "selfTime": "1565",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "478",
                "parentId": "364",
                "label": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame()",
                "className": "nl.tudelft.jpacman.game.GameFactory",
                "methodName": "createSinglePlayerGame",
                "color": "#8DD3C7",
                "packageName": "nl.tudelft.jpacman.game",
                "sourceCode": "/**\r\n * Creates a game for a single level with one player.\r\n *\r\n * @param level\r\n * \t\tThe level to create a game for.\r\n * @param pointCalculator\r\n * \t\tThe way to calculate points upon collisions.\r\n * @return A new single player game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game createSinglePlayerGame(nl.tudelft.jpacman.level.Level level, nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    return new nl.tudelft.jpacman.game.SinglePlayerGame(this.playerFactory.createPacMan(), level, pointCalculator);\r\n}",
                "visibility": "public",
                "simpleName": "createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
                "qualifiedName": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame(nl.tudelft.jpacman.level.Level,nl.tudelft.jpacman.points.PointCalculator)",
                "kind": "method",
                "docComment": "Creates a game for a single level with one player.\r\n\r\n@param level\r\n\t\tThe level to create a game for.\r\n@param pointCalculator\r\n\t\tThe way to calculate points upon collisions.\r\n@return A new single player game.\r\n",
                "metaSrc": "source code",
                "description": "Creates a single-player game instance.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
                "reason": "This method is responsible for setting up a single-player game environment, which involves creating a PacMan player and combining it with a level and point calculator to form a complete game instance.",
                "howToUse": "Call this method with a Level object and a PointCalculator object to create a new single-player game.",
                "howItWorks": "The method instantiates a new SinglePlayerGame using the provided Level and PointCalculator, along with a PacMan player created by calling PlayerFactory.createPacMan().",
                "assertions": "",
                "layer": "Logic",
                "time": "2972",
                "selfTime": "46",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 26,
                  "subtreeDepth": 7,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "479",
                    "parentId": "478",
                    "label": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
                    "className": "nl.tudelft.jpacman.level.PlayerFactory",
                    "methodName": "createPacMan",
                    "color": "#E41A1C",
                    "packageName": "nl.tudelft.jpacman.level",
                    "sourceCode": "/**\r\n * Creates a new player with the classic Pac-Man sprites.\r\n *\r\n * @return A new player.\r\n */\r\npublic nl.tudelft.jpacman.level.Player createPacMan() {\r\n    return new nl.tudelft.jpacman.level.Player(this.getSprites().getPacmanSprites(), this.getSprites().getPacManDeathAnimation());\r\n}",
                    "visibility": "public",
                    "simpleName": "createPacMan()",
                    "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
                    "kind": "method",
                    "docComment": "Creates a new player with the classic Pac-Man sprites.\r\n\r\n@return A new player.\r\n",
                    "metaSrc": "source code",
                    "description": "Creates a new PacMan player instance.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A newly created instance of nl.tudelft.jpacman.level.Player.",
                    "reason": "This method is responsible for creating a new PacMan player, which involves setting up the necessary sprites and death animation.",
                    "howToUse": "Call this method to obtain a new Player object that can be used in the game.",
                    "howItWorks": "The method retrieves the required sprites and death animation from the PlayerFactory's Sprites instance and uses them to create a new Player object.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "2903",
                    "selfTime": "29",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 3,
                      "totalDescendants": 25,
                      "subtreeDepth": 6,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "480",
                        "parentId": "479",
                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                        "methodName": "getPacmanSprites",
                        "color": "#F781BF",
                        "packageName": "nl.tudelft.jpacman.sprite",
                        "sourceCode": "/**\r\n *\r\n * @return A map of animated Pac-Man sprites for all directions.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getPacmanSprites() {\r\n    return this.directionSprite(\"/sprite/pacman.png\", nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES);\r\n}",
                        "visibility": "public",
                        "simpleName": "getPacmanSprites()",
                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
                        "kind": "method",
                        "docComment": "\r\n@return A map of animated Pac-Man sprites for all directions.\r\n",
                        "metaSrc": "source code",
                        "description": "Creates a map of direction sprites for PacMan from a resource file.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                        "reason": "This method is responsible for loading and creating direction-specific sprites for PacMan, which are essential for rendering the game's visual elements.",
                        "howToUse": "Call this method with the path to the sprite image file and the number of animation frames. It will return a map where each key is a direction and each value is the corresponding animated sprite.",
                        "howItWorks": "The method reads the sprite image from the specified resource path, splits it into multiple frames based on the provided number of animation frames, and creates an animated sprite for each direction using these frames. The resulting map is then returned.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "1687",
                        "selfTime": "2",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 1,
                          "totalDescendants": 14,
                          "subtreeDepth": 5,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "481",
                            "parentId": "480",
                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                            "methodName": "directionSprite",
                            "color": "#F781BF",
                            "packageName": "nl.tudelft.jpacman.sprite",
                            "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                            "visibility": "private",
                            "simpleName": "directionSprite(java.lang.String,int)",
                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite(java.lang.String,int)",
                            "kind": "method",
                            "docComment": "Creates a map of direction sprites from a resource file. Each direction sprite is an animated sprite created by splitting the base image into multiple frames.",
                            "metaSrc": "source code",
                            "description": "Creates a map of direction sprites from a resource file.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                            "reason": "",
                            "howToUse": "",
                            "howItWorks": "",
                            "assertions": "",
                            "layer": "",
                            "time": "1685",
                            "selfTime": "2",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 4,
                              "totalDescendants": 13,
                              "subtreeDepth": 4,
                              "level": 7
                            },
                            "status": {
                              "fanOut": true,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "482",
                                "parentId": "481",
                                "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                "methodName": "loadSprite",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                "visibility": "public",
                                "simpleName": "loadSprite(java.lang.String)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                                "kind": "method",
                                "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                                "metaSrc": "source code",
                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                                "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "883",
                                "selfTime": "1",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 1,
                                  "totalDescendants": 2,
                                  "subtreeDepth": 3,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": true,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "483",
                                    "parentId": "482",
                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                    "methodName": "loadSprite",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                    "visibility": "public",
                                    "simpleName": "loadSprite(java.lang.String)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                    "kind": "method",
                                    "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                    "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                    "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                    "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "882",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 1,
                                      "totalDescendants": 1,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "484",
                                        "parentId": "483",
                                        "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                        "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                        "methodName": "loadSpriteFromResource",
                                        "color": "#F781BF",
                                        "packageName": "nl.tudelft.jpacman.sprite",
                                        "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                        "visibility": "private",
                                        "simpleName": "loadSpriteFromResource(java.lang.String)",
                                        "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                        "kind": "method",
                                        "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Loads a sprite from a resource file.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                        "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                        "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                        "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "880",
                                        "selfTime": "1",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "id": "485",
                                "parentId": "481",
                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                "methodName": "createAnimatedSprite",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                "visibility": "public",
                                "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                                "kind": "method",
                                "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                                "metaSrc": "source code",
                                "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                                "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "574",
                                "selfTime": "8",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 3,
                                  "totalDescendants": 5,
                                  "subtreeDepth": 3,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": true,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "486",
                                    "parentId": "485",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "split",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                    "visibility": "public",
                                    "simpleName": "split(int,int,int,int)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                    "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                    "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                    "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "553",
                                    "selfTime": "14",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 2,
                                      "totalDescendants": 2,
                                      "subtreeDepth": 2,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": [
                                      {
                                        "id": "487",
                                        "parentId": "486",
                                        "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                        "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                        "methodName": "newImage",
                                        "color": "#F781BF",
                                        "packageName": "nl.tudelft.jpacman.sprite",
                                        "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                        "visibility": "private",
                                        "simpleName": "newImage(int,int)",
                                        "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                        "kind": "method",
                                        "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                        "metaSrc": "source code",
                                        "description": "Creates a new BufferedImage with the specified width and height.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                        "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                        "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                        "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                        "assertions": "",
                                        "layer": "UI",
                                        "time": "198",
                                        "selfTime": "5",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      },
                                      {
                                        "id": "488",
                                        "parentId": "486",
                                        "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                        "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                        "methodName": "withinImage",
                                        "color": "#F781BF",
                                        "packageName": "nl.tudelft.jpacman.sprite",
                                        "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                        "visibility": "private",
                                        "simpleName": "withinImage(int,int)",
                                        "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                        "kind": "method",
                                        "docComment": "",
                                        "metaSrc": "source code",
                                        "description": "Checks if a given coordinate is within the bounds of an image.",
                                        "detailedBehavior": "",
                                        "flowRepresentation": "",
                                        "briefSummary": "",
                                        "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                        "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                        "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                        "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                        "assertions": "",
                                        "layer": "Logic",
                                        "time": "14",
                                        "selfTime": "6",
                                        "percent": "0.0",
                                        "isRoot": false,
                                        "collapsed": true,
                                        "selected": false,
                                        "treeStats": {
                                          "directChildrenCount": 0,
                                          "totalDescendants": 0,
                                          "subtreeDepth": 1,
                                          "level": 10
                                        },
                                        "status": {
                                          "fanOut": false,
                                          "implementationEntryPoint": false,
                                          "chainStartPoint": false,
                                          "recursiveEntryPoint": false,
                                          "isSummarised": false
                                        },
                                        "children": []
                                      }
                                    ]
                                  },
                                  {
                                    "id": "489",
                                    "parentId": "485",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "getHeight",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                    "visibility": "public",
                                    "simpleName": "getHeight()",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "",
                                    "reason": "",
                                    "howToUse": "",
                                    "howItWorks": "",
                                    "assertions": "",
                                    "layer": "",
                                    "time": "5",
                                    "selfTime": "2",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  },
                                  {
                                    "id": "490",
                                    "parentId": "485",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "getWidth",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                    "visibility": "public",
                                    "simpleName": "getWidth()",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "",
                                    "reason": "",
                                    "howToUse": "",
                                    "howItWorks": "",
                                    "assertions": "",
                                    "layer": "",
                                    "time": "2",
                                    "selfTime": "2",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "491",
                                "parentId": "481",
                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                "methodName": "split",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                "visibility": "public",
                                "simpleName": "split(int,int,int,int)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                "kind": "method",
                                "docComment": "",
                                "metaSrc": "source code",
                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "223",
                                "selfTime": "3",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 2,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": true,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "492",
                                    "parentId": "491",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "newImage",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                    "visibility": "private",
                                    "simpleName": "newImage(int,int)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                    "kind": "method",
                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                    "assertions": "",
                                    "layer": "UI",
                                    "time": "63",
                                    "selfTime": "3",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  },
                                  {
                                    "id": "493",
                                    "parentId": "491",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "withinImage",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                    "visibility": "private",
                                    "simpleName": "withinImage(int,int)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "2",
                                    "selfTime": "1",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "494",
                                "parentId": "481",
                                "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating()",
                                "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                                "methodName": "setAnimating",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "/**\r\n * Starts or stops the animation of this sprite.\r\n *\r\n * @param isAnimating\r\n * \t\t<code>true</code> to animate this sprite or <code>false</code>\r\n * \t\tto stop animating this sprite.\r\n */\r\npublic void setAnimating(boolean isAnimating) {\r\n    this.animating = isAnimating;\r\n}",
                                "visibility": "public",
                                "simpleName": "setAnimating(boolean)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating(boolean)",
                                "kind": "method",
                                "docComment": "Starts or stops the animation of this sprite.\r\n\r\n@param isAnimating\r\n\t\t<code>true</code> to animate this sprite or <code>false</code>\r\n\t\tto stop animating this sprite.\r\n",
                                "metaSrc": "source code",
                                "description": "Sets whether the sprite is currently animating.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "void",
                                "reason": "This method allows control over the animation state of a sprite, which is essential for rendering in the UI layer.",
                                "howToUse": "Call this method with `true` to start animation or `false` to stop it.",
                                "howItWorks": "The method takes a boolean parameter `isAnimating` and assigns it to the instance variable `animating`.",
                                "assertions": "",
                                "layer": "UI",
                                "time": "1",
                                "selfTime": "1",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "495",
                        "parentId": "479",
                        "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
                        "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                        "methodName": "getPacManDeathAnimation",
                        "color": "#F781BF",
                        "packageName": "nl.tudelft.jpacman.sprite",
                        "sourceCode": "/**\r\n *\r\n * @return The animation of a dying Pac-Man.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite getPacManDeathAnimation() {\r\n    java.lang.String resource = \"/sprite/dead.png\";\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(baseImage, nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, false);\r\n    animation.setAnimating(false);\r\n    return animation;\r\n}",
                        "visibility": "public",
                        "simpleName": "getPacManDeathAnimation()",
                        "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
                        "kind": "method",
                        "docComment": "\r\n@return The animation of a dying Pac-Man.\r\n",
                        "metaSrc": "source code",
                        "description": "Loads the death animation for PacMan.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The animated sprite representing PacMan's death animation.",
                        "reason": "This method is responsible for creating and returning an animated sprite that represents PacMan's death animation, which is part of the game logic rather than UI or data access.",
                        "howToUse": "Call this method to get the animated sprite for PacMan's death animation.",
                        "howItWorks": "The method loads a resource file containing the image for PacMan's death animation, creates an animated sprite from it using the specified frames and delay, sets the animation to not be animating, and returns the created sprite.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "1180",
                        "selfTime": "2",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 2,
                          "totalDescendants": 8,
                          "subtreeDepth": 4,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": [
                          {
                            "id": "496",
                            "parentId": "495",
                            "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                            "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                            "methodName": "loadSprite",
                            "color": "#F781BF",
                            "packageName": "nl.tudelft.jpacman.sprite",
                            "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                            "visibility": "public",
                            "simpleName": "loadSprite(java.lang.String)",
                            "qualifiedName": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite(java.lang.String)",
                            "kind": "method",
                            "docComment": "Overloads the default sprite loading, ignoring the exception. This class\r\nassumes all sprites are provided, hence the exception will be thrown as a\r\n{@link RuntimeException}.\r\n\r\n{@inheritDoc }\r\n",
                            "metaSrc": "source code",
                            "description": "Loads a sprite from a resource file if it's not already in the cache.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.sprite.Sprite",
                            "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                            "howToUse": "Call this method with the path to the resource file you want to load as a sprite.",
                            "howItWorks": "The method attempts to load a sprite using the superclass's `loadSprite` method. If an IOException occurs, it throws a custom PacmanConfigurationException with a descriptive error message.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "813",
                            "selfTime": "0",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 1,
                              "totalDescendants": 2,
                              "subtreeDepth": 3,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "497",
                                "parentId": "496",
                                "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                "methodName": "loadSprite",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                "visibility": "public",
                                "simpleName": "loadSprite(java.lang.String)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite(java.lang.String)",
                                "kind": "method",
                                "docComment": "Loads a sprite from a resource on the class path.\r\nSprites are loaded once, and then stored in the store\r\nso that they can be efficiently retrieved.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return The sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                "metaSrc": "source code",
                                "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                "howToUse": "Call this method with the path to a sprite resource file. It will return a Sprite object.",
                                "howItWorks": "The method first checks if the sprite is already in the cache (spriteMap). If not, it loads the sprite from the resource and caches it before returning it.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "813",
                                "selfTime": "0",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 1,
                                  "totalDescendants": 1,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "498",
                                    "parentId": "497",
                                    "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                    "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                    "methodName": "loadSpriteFromResource",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                    "visibility": "private",
                                    "simpleName": "loadSpriteFromResource(java.lang.String)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource(java.lang.String)",
                                    "kind": "method",
                                    "docComment": "Loads a sprite from a resource on the class path.\r\n\r\n@param resource\r\n\t\tThe resource path.\r\n@return A new sprite for the resource.\r\n@throws IOException\r\n\t\tWhen the resource could not be loaded.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Loads a sprite from a resource file.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                    "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                    "howToUse": "Call this method with the path to the resource file you want to load a sprite from.",
                                    "howItWorks": "The method attempts to open an input stream to the specified resource. If successful, it reads the image using ImageIO and returns an ImageSprite object. If the resource does not exist, it throws an IOException.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "811",
                                    "selfTime": "0",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "id": "499",
                            "parentId": "495",
                            "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                            "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                            "methodName": "createAnimatedSprite",
                            "color": "#F781BF",
                            "packageName": "nl.tudelft.jpacman.sprite",
                            "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                            "visibility": "public",
                            "simpleName": "createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                            "qualifiedName": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite,int,int,boolean)",
                            "kind": "method",
                            "docComment": "Creates a new {@link AnimatedSprite} from a base image.\r\n\r\n@param baseImage\r\n\t\tThe base image to convert into an animation.\r\n@param frames\r\n\t\tThe amount of frames of the animation.\r\n@param delay\r\n\t\tThe delay between frames.\r\n@param loop\r\n\t\tWhether this sprite is a looping animation or not.\r\n@return The animated sprite.\r\n",
                            "metaSrc": "source code",
                            "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                            "detailedBehavior": "",
                            "flowRepresentation": "",
                            "briefSummary": "",
                            "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                            "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                            "howToUse": "Call this method with a base image, number of frames, delay between frames, and whether the animation should loop to create an animated sprite.",
                            "howItWorks": "The method splits the base image into multiple frames based on the provided dimensions and then creates an AnimatedSprite object with these frames, the specified delay, and looping behavior.",
                            "assertions": "",
                            "layer": "Logic",
                            "time": "365",
                            "selfTime": "7",
                            "percent": "0.0",
                            "isRoot": false,
                            "collapsed": true,
                            "selected": false,
                            "treeStats": {
                              "directChildrenCount": 2,
                              "totalDescendants": 4,
                              "subtreeDepth": 3,
                              "level": 7
                            },
                            "status": {
                              "fanOut": false,
                              "implementationEntryPoint": false,
                              "chainStartPoint": false,
                              "recursiveEntryPoint": false,
                              "isSummarised": false
                            },
                            "children": [
                              {
                                "id": "500",
                                "parentId": "499",
                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                "methodName": "split",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                "visibility": "public",
                                "simpleName": "split(int,int,int,int)",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.split(int,int,int,int)",
                                "kind": "method",
                                "docComment": "",
                                "metaSrc": "source code",
                                "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                "howToUse": "Call this method with the desired x, y, width, and height to get a sub-sprite. Ensure that the coordinates are within the bounds of the current sprite to avoid errors.",
                                "howItWorks": "The method checks if the specified coordinates and dimensions are within the bounds of the current sprite. If they are, it creates a new BufferedImage with the specified dimensions and draws the relevant portion of the current sprite onto this new image. It then returns a new ImageSprite based on this new image. If the coordinates are out of bounds, it returns an EmptySprite.",
                                "assertions": "",
                                "layer": "Logic",
                                "time": "354",
                                "selfTime": "7",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 2,
                                  "totalDescendants": 2,
                                  "subtreeDepth": 2,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": [
                                  {
                                    "id": "501",
                                    "parentId": "500",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "newImage",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                    "visibility": "private",
                                    "simpleName": "newImage(int,int)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.newImage(int,int)",
                                    "kind": "method",
                                    "docComment": "Creates a new, empty image of the given width and height. Its\r\ntransparency will be a bitmask, so no try ARGB image.\r\n\r\n@param width\r\n\t\tThe width of the new image.\r\n@param height\r\n\t\tThe height of the new image.\r\n@return The new, empty image.\r\n",
                                    "metaSrc": "source code",
                                    "description": "Creates a new BufferedImage with the specified width and height.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                    "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                    "howToUse": "Call this method with the desired width and height to obtain a new BufferedImage.",
                                    "howItWorks": "Retrieves the default graphics configuration from the local graphics environment, then uses it to create a compatible image with the given dimensions and transparency type.",
                                    "assertions": "",
                                    "layer": "UI",
                                    "time": "130",
                                    "selfTime": "4",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  },
                                  {
                                    "id": "502",
                                    "parentId": "500",
                                    "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                    "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                    "methodName": "withinImage",
                                    "color": "#F781BF",
                                    "packageName": "nl.tudelft.jpacman.sprite",
                                    "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                    "visibility": "private",
                                    "simpleName": "withinImage(int,int)",
                                    "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage(int,int)",
                                    "kind": "method",
                                    "docComment": "",
                                    "metaSrc": "source code",
                                    "description": "Checks if a given coordinate is within the bounds of an image.",
                                    "detailedBehavior": "",
                                    "flowRepresentation": "",
                                    "briefSummary": "",
                                    "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                    "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                    "howToUse": "Call this method with x and y coordinates to check if they are within the image's boundaries.",
                                    "howItWorks": "The method checks if both x and y are greater than or equal to 0 and less than the width and height of the image, respectively.",
                                    "assertions": "",
                                    "layer": "Logic",
                                    "time": "8",
                                    "selfTime": "3",
                                    "percent": "0.0",
                                    "isRoot": false,
                                    "collapsed": true,
                                    "selected": false,
                                    "treeStats": {
                                      "directChildrenCount": 0,
                                      "totalDescendants": 0,
                                      "subtreeDepth": 1,
                                      "level": 9
                                    },
                                    "status": {
                                      "fanOut": false,
                                      "implementationEntryPoint": false,
                                      "chainStartPoint": false,
                                      "recursiveEntryPoint": false,
                                      "isSummarised": false
                                    },
                                    "children": []
                                  }
                                ]
                              },
                              {
                                "id": "503",
                                "parentId": "499",
                                "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                "methodName": "getHeight",
                                "color": "#F781BF",
                                "packageName": "nl.tudelft.jpacman.sprite",
                                "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                "visibility": "public",
                                "simpleName": "getHeight()",
                                "qualifiedName": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                "kind": "method",
                                "docComment": "",
                                "metaSrc": "source code",
                                "description": "",
                                "detailedBehavior": "",
                                "flowRepresentation": "",
                                "briefSummary": "",
                                "returns": "",
                                "reason": "",
                                "howToUse": "",
                                "howItWorks": "",
                                "assertions": "",
                                "layer": "",
                                "time": "3",
                                "selfTime": "2",
                                "percent": "0.0",
                                "isRoot": false,
                                "collapsed": true,
                                "selected": false,
                                "treeStats": {
                                  "directChildrenCount": 0,
                                  "totalDescendants": 0,
                                  "subtreeDepth": 1,
                                  "level": 8
                                },
                                "status": {
                                  "fanOut": false,
                                  "implementationEntryPoint": false,
                                  "chainStartPoint": false,
                                  "recursiveEntryPoint": false,
                                  "isSummarised": false
                                },
                                "children": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "504",
                        "parentId": "479",
                        "label": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
                        "className": "nl.tudelft.jpacman.level.PlayerFactory",
                        "methodName": "getSprites",
                        "color": "#E41A1C",
                        "packageName": "nl.tudelft.jpacman.level",
                        "sourceCode": "/**\r\n * The sprites created by the factory.\r\n *\r\n * @return The sprites for the player created.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSprites() {\r\n    return this.sprites;\r\n}",
                        "visibility": "protected",
                        "simpleName": "getSprites()",
                        "qualifiedName": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
                        "kind": "method",
                        "docComment": "The sprites created by the factory.\r\n\r\n@return The sprites for the player created.\r\n",
                        "metaSrc": "source code",
                        "description": "Returns the PacManSprites instance used by the PlayerFactory.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                        "reason": "This method provides a way to access the sprite resources needed for rendering Pacman and other game elements, which is part of the core game logic.",
                        "howToUse": "Call this method on an instance of PlayerFactory to get the PacManSprites object.",
                        "howItWorks": "The method simply returns a private member variable 'sprites' of type nl.tudelft.jpacman.sprite.PacManSprites.",
                        "assertions": "",
                        "layer": "Logic",
                        "time": "1",
                        "selfTime": "1",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "505",
                "parentId": "364",
                "label": "nl.tudelft.jpacman.Launcher.getGameFactory()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "getGameFactory",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "/**\r\n *\r\n * @return A new factory using the players from {@link #getPlayerFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.game.GameFactory getGameFactory() {\r\n    return new nl.tudelft.jpacman.game.GameFactory(this.getPlayerFactory());\r\n}",
                "visibility": "protected",
                "simpleName": "getGameFactory()",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.getGameFactory()",
                "kind": "method",
                "docComment": "\r\n@return A new factory using the players from {@link #getPlayerFactory()}.\r\n",
                "metaSrc": "source code",
                "description": "Retrieves the game factory used in the game.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "An instance of nl.tudelft.jpacman.game.GameFactory.",
                "reason": "This method is responsible for creating a GameFactory, which is essential for setting up the game logic. It depends on the PlayerFactory to be created first, indicating it's part of the application logic rather than data access or user interface.",
                "howToUse": "Call this method from an instance of nl.tudelft.jpacman.Launcher to get a GameFactory object.",
                "howItWorks": "The method instantiates a new GameFactory and passes the PlayerFactory obtained from getPlayerFactory() as a parameter.",
                "assertions": "",
                "layer": "Logic",
                "time": "2305",
                "selfTime": "1311",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 2,
                  "subtreeDepth": 3,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "506",
                    "parentId": "505",
                    "label": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
                    "className": "nl.tudelft.jpacman.Launcher",
                    "methodName": "getPlayerFactory",
                    "color": "#ECC94B",
                    "packageName": "nl.tudelft.jpacman",
                    "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.PlayerFactory getPlayerFactory() {\r\n    return new nl.tudelft.jpacman.level.PlayerFactory(this.getSpriteStore());\r\n}",
                    "visibility": "protected",
                    "simpleName": "getPlayerFactory()",
                    "qualifiedName": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
                    "kind": "method",
                    "docComment": "\r\n@return A new factory using the sprites from {@link #getSpriteStore()}.\r\n",
                    "metaSrc": "source code",
                    "description": "Retrieves the player factory used in the game.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "An instance of nl.tudelft.jpacman.level.PlayerFactory.",
                    "reason": "This method is responsible for creating player objects, which are essential for gameplay. It encapsulates the logic for player creation and retrieval, ensuring that all players share the same sprite store.",
                    "howToUse": "Call this method on an instance of nl.tudelft.jpacman.Launcher to get a PlayerFactory object.",
                    "howItWorks": "The method creates a new PlayerFactory by passing the result of getSpriteStore() as a parameter. This ensures that all players created by the factory use the same sprite store, maintaining consistency in their visual representation.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "992",
                    "selfTime": "989",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 1,
                      "totalDescendants": 1,
                      "subtreeDepth": 2,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": [
                      {
                        "id": "507",
                        "parentId": "506",
                        "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                        "className": "nl.tudelft.jpacman.Launcher",
                        "methodName": "getSpriteStore",
                        "color": "#ECC94B",
                        "packageName": "nl.tudelft.jpacman",
                        "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                        "visibility": "protected",
                        "simpleName": "getSpriteStore()",
                        "qualifiedName": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                        "kind": "method",
                        "docComment": "\r\n@return The default {@link PacManSprites}.\r\n",
                        "metaSrc": "source code",
                        "description": "Retrieves the sprite store used in the game.",
                        "detailedBehavior": "",
                        "flowRepresentation": "",
                        "briefSummary": "",
                        "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                        "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                        "howToUse": "Call this method to obtain the sprite store for rendering game elements like Pac-Man and ghosts.",
                        "howItWorks": "The method returns a pre-initialized instance of PacManSprites, which is stored as a static field in the Launcher class.",
                        "assertions": "",
                        "layer": "UI",
                        "time": "1",
                        "selfTime": "1",
                        "percent": "0.0",
                        "isRoot": false,
                        "collapsed": true,
                        "selected": false,
                        "treeStats": {
                          "directChildrenCount": 0,
                          "totalDescendants": 0,
                          "subtreeDepth": 1,
                          "level": 6
                        },
                        "status": {
                          "fanOut": false,
                          "implementationEntryPoint": false,
                          "chainStartPoint": false,
                          "recursiveEntryPoint": false,
                          "isSummarised": false
                        },
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "508",
                "parentId": "364",
                "label": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "loadPointCalculator",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "private nl.tudelft.jpacman.points.PointCalculator loadPointCalculator() {\r\n    return new nl.tudelft.jpacman.points.PointCalculatorLoader().load();\r\n}",
                "visibility": "private",
                "simpleName": "loadPointCalculator()",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "Loads a PointCalculator instance dynamically from a file.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                "reason": "This method is responsible for loading a PointCalculator, which is part of the application logic. It does not interact with the user interface or handle data access directly.",
                "howToUse": "Call this method to obtain an instance of PointCalculator that can be used to calculate points in the game.",
                "howItWorks": "The method uses a PointCalculatorLoader to dynamically load and return a PointCalculator object.",
                "assertions": "",
                "layer": "Logic",
                "time": "7",
                "selfTime": "1",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 1,
                  "totalDescendants": 1,
                  "subtreeDepth": 2,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": true,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": [
                  {
                    "id": "509",
                    "parentId": "508",
                    "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                    "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                    "methodName": "load",
                    "color": "#BEBADA",
                    "packageName": "nl.tudelft.jpacman.points",
                    "sourceCode": "/**\r\n * Load a points calculator and return it.\r\n *\r\n * @return The (dynamically loaded) points calculator.\r\n */\r\npublic nl.tudelft.jpacman.points.PointCalculator load() {\r\n    try {\r\n        if (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz == null) {\r\n            nl.tudelft.jpacman.points.PointCalculatorLoader.clazz = this.loadClassFromFile();\r\n        }\r\n        return ((nl.tudelft.jpacman.points.PointCalculator) (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz.newInstance()));\r\n    } catch (java.lang.Exception e) {\r\n        throw new java.lang.RuntimeException(\"Could not dynamically load the points calculator.\", e);\r\n    }\r\n}",
                    "visibility": "public",
                    "simpleName": "load()",
                    "qualifiedName": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                    "kind": "method",
                    "docComment": "Load a points calculator and return it.\r\n\r\n@return The (dynamically loaded) points calculator.\r\n",
                    "metaSrc": "source code",
                    "description": "Loads a PointCalculator instance dynamically from a file.",
                    "detailedBehavior": "",
                    "flowRepresentation": "",
                    "briefSummary": "",
                    "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                    "reason": "This method is responsible for loading a specific implementation of the PointCalculator interface, which is crucial for calculating points in the game. It ensures that the correct calculator is instantiated based on the strategy defined in the application.",
                    "howToUse": "Call this method to obtain an instance of PointCalculator without knowing its concrete class at compile time.",
                    "howItWorks": "The method checks if a class has already been loaded and, if not, loads it from a file. It then creates a new instance of the loaded class and returns it.",
                    "assertions": "",
                    "layer": "Logic",
                    "time": "6",
                    "selfTime": "1",
                    "percent": "0.0",
                    "isRoot": false,
                    "collapsed": true,
                    "selected": false,
                    "treeStats": {
                      "directChildrenCount": 0,
                      "totalDescendants": 0,
                      "subtreeDepth": 1,
                      "level": 5
                    },
                    "status": {
                      "fanOut": false,
                      "implementationEntryPoint": false,
                      "chainStartPoint": false,
                      "recursiveEntryPoint": false,
                      "isSummarised": false
                    },
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "id": "510",
            "parentId": "360",
            "label": "nl.tudelft.jpacman.ui.PacManUI.start()",
            "className": "nl.tudelft.jpacman.ui.PacManUI",
            "methodName": "start",
            "color": "#FF7F00",
            "packageName": "nl.tudelft.jpacman.ui",
            "sourceCode": "/**\r\n * Starts the \"engine\", the thread that redraws the interface at set\r\n * intervals.\r\n */\r\npublic void start() {\r\n    this.setVisible(true);\r\n    java.util.concurrent.ScheduledExecutorService service = java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\r\n    service.scheduleAtFixedRate(this::nextFrame, 0, nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
            "visibility": "public",
            "simpleName": "start()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUI.start()",
            "kind": "method",
            "docComment": "Starts the \"engine\", the thread that redraws the interface at set\r\nintervals.\r\n",
            "metaSrc": "source code",
            "description": "Sets the PacManUI to be visible and schedules a task to update the frame at fixed intervals.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "void",
            "reason": "This method initializes the user interface and sets up the game loop, which are core responsibilities of a UI component.",
            "howToUse": "Call this method on an instance of PacManUI to start the game loop.",
            "howItWorks": "The method sets the UI to be visible and creates a scheduled executor service that runs the `nextFrame` method every `FRAME_INTERVAL` milliseconds.",
            "assertions": "",
            "layer": "UI",
            "time": "21683",
            "selfTime": "19598",
            "percent": "0.1",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 0,
              "totalDescendants": 0,
              "subtreeDepth": 1,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": []
          },
          {
            "id": "511",
            "parentId": "360",
            "label": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys()",
            "className": "nl.tudelft.jpacman.Launcher",
            "methodName": "addSinglePlayerKeys",
            "color": "#ECC94B",
            "packageName": "nl.tudelft.jpacman",
            "sourceCode": "/**\r\n * Adds key events UP, DOWN, LEFT and RIGHT to a game.\r\n *\r\n * @param builder\r\n * \t\tThe {@link PacManUiBuilder} that will provide the UI.\r\n */\r\nprotected void addSinglePlayerKeys(final nl.tudelft.jpacman.ui.PacManUiBuilder builder) {\r\n    builder.addKey(java.awt.event.KeyEvent.VK_UP, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.NORTH)).addKey(java.awt.event.KeyEvent.VK_DOWN, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.SOUTH)).addKey(java.awt.event.KeyEvent.VK_LEFT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.WEST)).addKey(java.awt.event.KeyEvent.VK_RIGHT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.EAST));\r\n}",
            "visibility": "protected",
            "simpleName": "addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
            "qualifiedName": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys(nl.tudelft.jpacman.ui.PacManUiBuilder)",
            "kind": "method",
            "docComment": "Adds key events UP, DOWN, LEFT and RIGHT to a game.\r\n\r\n@param builder\r\n\t\tThe {@link PacManUiBuilder} that will provide the UI.\r\n",
            "metaSrc": "source code",
            "description": "Adds key mappings for single player controls in the Pacman game.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "void",
            "reason": "This method is responsible for setting up the keyboard controls for a single player game in Pacman.",
            "howToUse": "Call this method with an instance of PacManUiBuilder to configure the key bindings for moving the player character.",
            "howItWorks": "The method adds key mappings for the arrow keys (UP, DOWN, LEFT, RIGHT) to move the player character in the specified directions. It uses the moveTowardsDirection method to create actions that move the player.",
            "assertions": "",
            "layer": "UI",
            "time": "426",
            "selfTime": "5",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 2,
              "totalDescendants": 2,
              "subtreeDepth": 2,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": true,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": [
              {
                "id": "512",
                "parentId": "511",
                "label": "nl.tudelft.jpacman.Launcher.moveTowardsDirection()",
                "className": "nl.tudelft.jpacman.Launcher",
                "methodName": "moveTowardsDirection",
                "color": "#ECC94B",
                "packageName": "nl.tudelft.jpacman",
                "sourceCode": "private nl.tudelft.jpacman.ui.Action moveTowardsDirection(nl.tudelft.jpacman.board.Direction direction) {\r\n    return () -> {\r\n        assert this.game != null;\r\n        this.getGame().move(this.getSinglePlayer(this.getGame()), direction);\r\n    };\r\n}",
                "visibility": "private",
                "simpleName": "moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
                "qualifiedName": "nl.tudelft.jpacman.Launcher.moveTowardsDirection(nl.tudelft.jpacman.board.Direction)",
                "kind": "method",
                "docComment": "",
                "metaSrc": "source code",
                "description": "Moves a Pacman player in a given direction if the game is in progress.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "A nl.tudelft.jpacman.ui.Action object representing an action that moves the player.",
                "reason": "This method is part of the game logic layer, as it involves moving a player in the game based on user input or other events.",
                "howToUse": "Call this method with a Direction enum value to move the player in that direction.",
                "howItWorks": "The method asserts that the game is not null and then calls the move method of the game object, passing the single player and the given direction.",
                "assertions": "",
                "layer": "Logic",
                "time": "414",
                "selfTime": "414",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              },
              {
                "id": "513",
                "parentId": "511",
                "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey()",
                "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
                "methodName": "addKey",
                "color": "#FF7F00",
                "packageName": "nl.tudelft.jpacman.ui",
                "sourceCode": "/**\r\n * Adds a key listener to the UI.\r\n *\r\n * @param keyCode\r\n * \t\tThe key code of the key as used by {@link java.awt.event.KeyEvent}.\r\n * @param action\r\n * \t\tThe action to perform when the key is pressed.\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder addKey(java.lang.Integer keyCode, nl.tudelft.jpacman.ui.Action action) {\r\n    assert keyCode != null;\r\n    assert action != null;\r\n    this.keyMappings.put(keyCode, action);\r\n    return this;\r\n}",
                "visibility": "public",
                "simpleName": "addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
                "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey(java.lang.Integer,nl.tudelft.jpacman.ui.Action)",
                "kind": "method",
                "docComment": "Adds a key listener to the UI.\r\n\r\n@param keyCode\r\n\t\tThe key code of the key as used by {@link java.awt.event.KeyEvent}.\r\n@param action\r\n\t\tThe action to perform when the key is pressed.\r\n@return The builder.\r\n",
                "metaSrc": "source code",
                "description": "Adds a key mapping to the PacManUiBuilder.",
                "detailedBehavior": "",
                "flowRepresentation": "",
                "briefSummary": "",
                "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
                "reason": "This method allows for customizing user input handling in the Pacman game.",
                "howToUse": "Call this method with a key code and an action to map that key to a specific action in the game.",
                "howItWorks": "The method checks if the keyCode and action are not null, then adds them to the keyMappings map. It returns the current instance of PacManUiBuilder to allow for method chaining.",
                "assertions": "",
                "layer": "UI",
                "time": "2",
                "selfTime": "1",
                "percent": "0.0",
                "isRoot": false,
                "collapsed": true,
                "selected": false,
                "treeStats": {
                  "directChildrenCount": 0,
                  "totalDescendants": 0,
                  "subtreeDepth": 1,
                  "level": 4
                },
                "status": {
                  "fanOut": false,
                  "implementationEntryPoint": false,
                  "chainStartPoint": false,
                  "recursiveEntryPoint": false,
                  "isSummarised": false
                },
                "children": []
              }
            ]
          },
          {
            "id": "514",
            "parentId": "360",
            "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
            "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "methodName": "withDefaultButtons",
            "color": "#FF7F00",
            "packageName": "nl.tudelft.jpacman.ui",
            "sourceCode": "/**\r\n * Adds a start and stop button to the UI. The actual actions for these\r\n * buttons will be added upon building the UI.\r\n *\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder withDefaultButtons() {\r\n    this.defaultButtons = true;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, null);\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, null);\r\n    return this;\r\n}",
            "visibility": "public",
            "simpleName": "withDefaultButtons()",
            "qualifiedName": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
            "kind": "method",
            "docComment": "Adds a start and stop button to the UI. The actual actions for these\r\nbuttons will be added upon building the UI.\r\n\r\n@return The builder.\r\n",
            "metaSrc": "source code",
            "description": "Enables the default buttons in the PacManUiBuilder.",
            "detailedBehavior": "",
            "flowRepresentation": "",
            "briefSummary": "",
            "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
            "reason": "This method is used to configure the user interface by enabling default buttons.",
            "howToUse": "Call this method on an instance of PacManUiBuilder to enable default buttons.",
            "howItWorks": "The method sets the `defaultButtons` flag to true and adds start and stop button captions to the `buttons` map with null actions.",
            "assertions": "",
            "layer": "UI",
            "time": "13",
            "selfTime": "1",
            "percent": "0.0",
            "isRoot": false,
            "collapsed": true,
            "selected": false,
            "treeStats": {
              "directChildrenCount": 0,
              "totalDescendants": 0,
              "subtreeDepth": 1,
              "level": 3
            },
            "status": {
              "fanOut": false,
              "implementationEntryPoint": false,
              "chainStartPoint": false,
              "recursiveEntryPoint": false,
              "isSummarised": false
            },
            "children": []
          }
        ]
      }
    ]
  }
}