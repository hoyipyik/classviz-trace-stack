{
  "id": "2",
  "children": [
    {
      "id": "3",
      "children": [
        {
          "id": "4",
          "children": [
            {
              "id": "5",
              "children": [
                {
                  "id": "6",
                  "children": [
                    {
                      "id": "7",
                      "children": [
                        {
                          "id": "8",
                          "children": [],
                          "methodName": "getSquareAt",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the square adjacent to the current square in a given direction.",
                          "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.board.Square",
                          "time": "663639",
                          "value": "663639",
                          "percent": "3.0",
                          "selfTime": "461784",
                          "color": "#3182CE"
                        },
                        {
                          "id": "9",
                          "children": [],
                          "methodName": "values",
                          "className": "nl.tudelft.jpacman.board.Direction",
                          "visibility": "",
                          "label": "nl.tudelft.jpacman.board.Direction.values()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "",
                          "layer": "",
                          "returns": "",
                          "time": "178801",
                          "value": "178801",
                          "percent": "0.8",
                          "selfTime": "120215",
                          "color": "#3182CE"
                        },
                        {
                          "id": "10",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "421",
                          "value": "421",
                          "percent": "0.0",
                          "selfTime": "421",
                          "color": "#3182CE"
                        },
                        {
                          "id": "11",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "248",
                          "value": "248",
                          "percent": "0.0",
                          "selfTime": "248",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "addNewTargets",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Adds new targets to the list of targets for a ghost in the game.",
                      "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                      "layer": "Logic",
                      "returns": "void",
                      "time": "2176106",
                      "value": "2176106",
                      "percent": "9.9",
                      "selfTime": "868764",
                      "color": "#718096"
                    },
                    {
                      "id": "12",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Retrieves the square associated with a node.",
                      "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                      "time": "51939",
                      "value": "51939",
                      "percent": "0.2",
                      "selfTime": "51939",
                      "color": "#718096"
                    },
                    {
                      "id": "13",
                      "children": [
                        {
                          "id": "14",
                          "children": [
                            {
                              "id": "15",
                              "children": [
                                {
                                  "id": "16",
                                  "children": [
                                    {
                                      "id": "17",
                                      "children": [
                                        {
                                          "id": "18",
                                          "children": [
                                            {
                                              "id": "19",
                                              "children": [
                                                {
                                                  "id": "20",
                                                  "children": [
                                                    {
                                                      "id": "21",
                                                      "children": [
                                                        {
                                                          "id": "22",
                                                          "children": [
                                                            {
                                                              "id": "23",
                                                              "children": [
                                                                {
                                                                  "id": "24",
                                                                  "children": [
                                                                    {
                                                                      "id": "25",
                                                                      "children": [
                                                                        {
                                                                          "id": "26",
                                                                          "children": [
                                                                            {
                                                                              "id": "27",
                                                                              "children": [
                                                                                {
                                                                                  "id": "28",
                                                                                  "children": [
                                                                                    {
                                                                                      "id": "29",
                                                                                      "children": [
                                                                                        {
                                                                                          "id": "30",
                                                                                          "children": [],
                                                                                          "methodName": "getPath",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                          "time": "1",
                                                                                          "value": "1",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "1",
                                                                                          "color": "#718096"
                                                                                        }
                                                                                      ],
                                                                                      "methodName": "getPath",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                      "time": "4",
                                                                                      "value": "4",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "1",
                                                                                      "color": "#718096"
                                                                                    }
                                                                                  ],
                                                                                  "methodName": "getPath",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                  "time": "10",
                                                                                  "value": "10",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "5",
                                                                                  "color": "#718096"
                                                                                },
                                                                                {
                                                                                  "id": "31",
                                                                                  "children": [],
                                                                                  "methodName": "getDirection",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                  "time": "2",
                                                                                  "value": "2",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "2",
                                                                                  "color": "#718096"
                                                                                }
                                                                              ],
                                                                              "methodName": "getPath",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                              "time": "18",
                                                                              "value": "18",
                                                                              "percent": "0.0",
                                                                              "selfTime": "6",
                                                                              "color": "#718096"
                                                                            }
                                                                          ],
                                                                          "methodName": "getPath",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                          "time": "23",
                                                                          "value": "23",
                                                                          "percent": "0.0",
                                                                          "selfTime": "5",
                                                                          "color": "#718096"
                                                                        }
                                                                      ],
                                                                      "methodName": "getPath",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                      "time": "30",
                                                                      "value": "30",
                                                                      "percent": "0.0",
                                                                      "selfTime": "5",
                                                                      "color": "#718096"
                                                                    },
                                                                    {
                                                                      "id": "32",
                                                                      "children": [],
                                                                      "methodName": "getDirection",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                      "time": "1",
                                                                      "value": "1",
                                                                      "percent": "0.0",
                                                                      "selfTime": "1",
                                                                      "color": "#718096"
                                                                    }
                                                                  ],
                                                                  "methodName": "getPath",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                  "time": "41",
                                                                  "value": "41",
                                                                  "percent": "0.0",
                                                                  "selfTime": "8",
                                                                  "color": "#718096"
                                                                }
                                                              ],
                                                              "methodName": "getPath",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                              "time": "51",
                                                              "value": "51",
                                                              "percent": "0.0",
                                                              "selfTime": "8",
                                                              "color": "#718096"
                                                            }
                                                          ],
                                                          "methodName": "getPath",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                          "time": "58",
                                                          "value": "58",
                                                          "percent": "0.0",
                                                          "selfTime": "6",
                                                          "color": "#718096"
                                                        },
                                                        {
                                                          "id": "33",
                                                          "children": [],
                                                          "methodName": "getDirection",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the current direction of a ghost in the game.",
                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                          "time": "1",
                                                          "value": "1",
                                                          "percent": "0.0",
                                                          "selfTime": "1",
                                                          "color": "#718096"
                                                        }
                                                      ],
                                                      "methodName": "getPath",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                      "time": "69",
                                                      "value": "69",
                                                      "percent": "0.0",
                                                      "selfTime": "9",
                                                      "color": "#718096"
                                                    },
                                                    {
                                                      "id": "34",
                                                      "children": [],
                                                      "methodName": "getDirection",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the current direction of a ghost in the game.",
                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                      "time": "1",
                                                      "value": "1",
                                                      "percent": "0.0",
                                                      "selfTime": "1",
                                                      "color": "#718096"
                                                    }
                                                  ],
                                                  "methodName": "getPath",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                  "time": "77",
                                                  "value": "77",
                                                  "percent": "0.0",
                                                  "selfTime": "4",
                                                  "color": "#718096"
                                                }
                                              ],
                                              "methodName": "getPath",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                              "time": "87",
                                              "value": "87",
                                              "percent": "0.0",
                                              "selfTime": "9",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "35",
                                              "children": [],
                                              "methodName": "getDirection",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the current direction of a ghost in the game.",
                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A Direction object representing the current direction of the ghost.",
                                              "time": "2",
                                              "value": "2",
                                              "percent": "0.0",
                                              "selfTime": "2",
                                              "color": "#718096"
                                            }
                                          ],
                                          "methodName": "getPath",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                          "time": "96",
                                          "value": "96",
                                          "percent": "0.0",
                                          "selfTime": "6",
                                          "color": "#718096"
                                        },
                                        {
                                          "id": "36",
                                          "children": [],
                                          "methodName": "getDirection",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the current direction of a ghost in the game.",
                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A Direction object representing the current direction of the ghost.",
                                          "time": "1",
                                          "value": "1",
                                          "percent": "0.0",
                                          "selfTime": "1",
                                          "color": "#718096"
                                        }
                                      ],
                                      "methodName": "getPath",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                      "time": "104",
                                      "value": "104",
                                      "percent": "0.0",
                                      "selfTime": "6",
                                      "color": "#718096"
                                    },
                                    {
                                      "id": "37",
                                      "children": [],
                                      "methodName": "getDirection",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the current direction of a ghost in the game.",
                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A Direction object representing the current direction of the ghost.",
                                      "time": "1",
                                      "value": "1",
                                      "percent": "0.0",
                                      "selfTime": "1",
                                      "color": "#718096"
                                    }
                                  ],
                                  "methodName": "getPath",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                  "time": "112",
                                  "value": "112",
                                  "percent": "0.0",
                                  "selfTime": "6",
                                  "color": "#718096"
                                },
                                {
                                  "id": "38",
                                  "children": [],
                                  "methodName": "getDirection",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the current direction of a ghost in the game.",
                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A Direction object representing the current direction of the ghost.",
                                  "time": "2",
                                  "value": "2",
                                  "percent": "0.0",
                                  "selfTime": "2",
                                  "color": "#718096"
                                }
                              ],
                              "methodName": "getPath",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                              "layer": "Logic",
                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                              "time": "121",
                              "value": "121",
                              "percent": "0.0",
                              "selfTime": "6",
                              "color": "#718096"
                            }
                          ],
                          "methodName": "getPath",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                          "layer": "Logic",
                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                          "time": "131",
                          "value": "131",
                          "percent": "0.0",
                          "selfTime": "8",
                          "color": "#718096"
                        },
                        {
                          "id": "39",
                          "children": [],
                          "methodName": "getDirection",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the current direction of a ghost in the game.",
                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                          "layer": "Logic",
                          "returns": "A Direction object representing the current direction of the ghost.",
                          "time": "2",
                          "value": "2",
                          "percent": "0.0",
                          "selfTime": "2",
                          "color": "#718096"
                        }
                      ],
                      "methodName": "getPath",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                      "layer": "Logic",
                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                      "time": "143",
                      "value": "143",
                      "percent": "0.0",
                      "selfTime": "8",
                      "color": "#718096"
                    }
                  ],
                  "methodName": "shortestPath",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                  "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                  "layer": "Logic",
                  "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                  "time": "18638969",
                  "value": "18638969",
                  "percent": "84.8",
                  "selfTime": "430276",
                  "color": "#718096"
                },
                {
                  "id": "40",
                  "children": [
                    {
                      "id": "41",
                      "children": [
                        {
                          "id": "42",
                          "children": [],
                          "methodName": "getOccupants",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the list of units occupying a square in the game board.",
                          "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                          "layer": "Logic",
                          "returns": "An immutable list of units occupying the square.",
                          "time": "1387",
                          "value": "1387",
                          "percent": "0.0",
                          "selfTime": "873",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "findUnit",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Finds a unit of a specific type in a given square on the game board.",
                      "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                      "layer": "Logic",
                      "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                      "time": "4517",
                      "value": "4517",
                      "percent": "0.0",
                      "selfTime": "1963",
                      "color": "#718096"
                    },
                    {
                      "id": "43",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "4093",
                      "value": "4093",
                      "percent": "0.0",
                      "selfTime": "2817",
                      "color": "#3182CE"
                    },
                    {
                      "id": "44",
                      "children": [],
                      "methodName": "values",
                      "className": "nl.tudelft.jpacman.board.Direction",
                      "visibility": "",
                      "label": "nl.tudelft.jpacman.board.Direction.values()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "",
                      "layer": "",
                      "returns": "",
                      "time": "1215",
                      "value": "1215",
                      "percent": "0.0",
                      "selfTime": "630",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "findNearest",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                  "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                  "layer": "",
                  "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                  "time": "23121",
                  "value": "23121",
                  "percent": "0.1",
                  "selfTime": "7189",
                  "color": "#718096"
                },
                {
                  "id": "45",
                  "children": [
                    {
                      "id": "46",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "28",
                      "value": "28",
                      "percent": "0.0",
                      "selfTime": "21",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "followPath",
                  "className": "nl.tudelft.jpacman.npc.ghost.Inky",
                  "visibility": "private",
                  "label": "nl.tudelft.jpacman.npc.ghost.Inky.followPath()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Retrieves the destination square by following a list of directions from a starting square.",
                  "reason": "This method is part of the logic layer as it processes application and domain logic related to moving a ghost in Pacman.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "private nl.tudelft.jpacman.board.Square followPath(java.util.List<nl.tudelft.jpacman.board.Direction> directions, nl.tudelft.jpacman.board.Square start) {\r\n    nl.tudelft.jpacman.board.Square destination = start;\r\n    for (nl.tudelft.jpacman.board.Direction d : directions) {\r\n        destination = destination.getSquareAt(d);\r\n    }\r\n    return destination;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square",
                  "time": "106",
                  "value": "106",
                  "percent": "0.0",
                  "selfTime": "43",
                  "color": "#718096"
                },
                {
                  "id": "47",
                  "children": [
                    {
                      "id": "48",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "9",
                      "value": "9",
                      "percent": "0.0",
                      "selfTime": "8",
                      "color": "#3182CE"
                    },
                    {
                      "id": "49",
                      "children": [],
                      "methodName": "getDirection",
                      "className": "nl.tudelft.jpacman.board.Unit",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Returns the current direction of a unit in the game.",
                      "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                      "layer": "Logic",
                      "returns": "A Direction object representing the current direction of the unit.",
                      "time": "5",
                      "value": "5",
                      "percent": "0.0",
                      "selfTime": "5",
                      "color": "#3182CE"
                    },
                    {
                      "id": "50",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.board.Unit",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square that a unit is currently occupying.",
                      "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                      "time": "2",
                      "value": "2",
                      "percent": "0.0",
                      "selfTime": "2",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "squaresAheadOf",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.squaresAheadOf()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that is a specified number of steps ahead in the current direction.",
                  "reason": "This method is used to determine the next position a unit will move to based on its current direction and the number of squares it intends to move.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * A utility method for implementing the ghost AI.\r\n *\r\n * @param amountToLookAhead\r\n * \t\tthe amount of squares to follow this units direction in.\r\n * @return The square amountToLookAhead spaces in front of this unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square squaresAheadOf(int amountToLookAhead) {\r\n    nl.tudelft.jpacman.board.Direction targetDirection = this.getDirection();\r\n    nl.tudelft.jpacman.board.Square destination = this.getSquare();\r\n    for (int i = 0; i < amountToLookAhead; i++) {\r\n        destination = destination.getSquareAt(targetDirection);\r\n    }\r\n    return destination;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square that is a specified number of steps ahead in the current direction.",
                  "time": "53",
                  "value": "53",
                  "percent": "0.0",
                  "selfTime": "37",
                  "color": "#3182CE"
                },
                {
                  "id": "51",
                  "children": [],
                  "methodName": "getSquare",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that a unit is currently occupying.",
                  "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                  "time": "30",
                  "value": "30",
                  "percent": "0.0",
                  "selfTime": "30",
                  "color": "#3182CE"
                }
              ],
              "methodName": "nextAiMove",
              "className": "nl.tudelft.jpacman.npc.ghost.Inky",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.npc.ghost.Inky.nextAiMove()",
              "packageName": "nl.tudelft.jpacman.npc.ghost",
              "description": "(no description)",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Inky has the most complicated AI of all. Inky considers two things: Blinky's\r\n * location, and the location two grid spaces ahead of Pac-Man. Inky\r\n * draws a line from Blinky to the spot that is two squares in front of\r\n * Pac-Man and extends that line twice as far. Therefore, if Inky is\r\n * alongside Blinky when they are behind Pac-Man, Inky will usually\r\n * follow Blinky the whole time. But if Inky is in front of Pac-Man when\r\n * Blinky is far behind him, Inky tends to want to move away from Pac-Man\r\n * (in reality, to a point very far ahead of Pac-Man). Inky is affected\r\n * by a similar targeting bug that affects Speedy. When Pac-Man is moving or\r\n * facing up, the spot Inky uses to draw the line is two squares above\r\n * and left of Pac-Man.\r\n * </p>\r\n *\r\n * <p>\r\n * <b>Implementation:</b>\r\n * To actually implement this in jpacman we have the following approximation:\r\n * first determine the square of Blinky (A) and the square 2\r\n * squares away from Pac-Man (B). Then determine the shortest path from A to\r\n * B regardless of terrain and walk that same path from B. This is the\r\n * destination.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit blinky = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.npc.ghost.Blinky.class, this.getSquare());\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if ((blinky == null) || (player == null)) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square playerDestination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Inky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> firstHalf = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(blinky.getSquare(), playerDestination, null);\r\n    if (firstHalf == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    nl.tudelft.jpacman.board.Square destination = this.followPath(firstHalf, playerDestination);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
              "layer": "",
              "returns": "",
              "time": "18662464",
              "value": "18662464",
              "percent": "84.9",
              "selfTime": "153",
              "color": "#718096"
            },
            {
              "id": "52",
              "children": [
                {
                  "id": "53",
                  "children": [
                    {
                      "id": "54",
                      "children": [
                        {
                          "id": "55",
                          "children": [],
                          "methodName": "getSquareAt",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the square adjacent to the current square in a given direction.",
                          "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.board.Square",
                          "time": "17006",
                          "value": "17006",
                          "percent": "0.1",
                          "selfTime": "11568",
                          "color": "#3182CE"
                        },
                        {
                          "id": "56",
                          "children": [],
                          "methodName": "values",
                          "className": "nl.tudelft.jpacman.board.Direction",
                          "visibility": "",
                          "label": "nl.tudelft.jpacman.board.Direction.values()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "",
                          "layer": "",
                          "returns": "",
                          "time": "4546",
                          "value": "4546",
                          "percent": "0.0",
                          "selfTime": "2914",
                          "color": "#3182CE"
                        },
                        {
                          "id": "57",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "2477",
                          "value": "2477",
                          "percent": "0.0",
                          "selfTime": "2477",
                          "color": "#3182CE"
                        },
                        {
                          "id": "58",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "1457",
                          "value": "1457",
                          "percent": "0.0",
                          "selfTime": "1457",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "addNewTargets",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Adds new targets to the list of targets for a ghost in the game.",
                      "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                      "layer": "Logic",
                      "returns": "void",
                      "time": "59853",
                      "value": "59853",
                      "percent": "0.3",
                      "selfTime": "24154",
                      "color": "#718096"
                    },
                    {
                      "id": "59",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Retrieves the square associated with a node.",
                      "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                      "time": "1302",
                      "value": "1302",
                      "percent": "0.0",
                      "selfTime": "1302",
                      "color": "#718096"
                    },
                    {
                      "id": "60",
                      "children": [
                        {
                          "id": "61",
                          "children": [
                            {
                              "id": "62",
                              "children": [
                                {
                                  "id": "63",
                                  "children": [
                                    {
                                      "id": "64",
                                      "children": [
                                        {
                                          "id": "65",
                                          "children": [
                                            {
                                              "id": "66",
                                              "children": [
                                                {
                                                  "id": "67",
                                                  "children": [
                                                    {
                                                      "id": "68",
                                                      "children": [
                                                        {
                                                          "id": "69",
                                                          "children": [
                                                            {
                                                              "id": "70",
                                                              "children": [
                                                                {
                                                                  "id": "71",
                                                                  "children": [
                                                                    {
                                                                      "id": "72",
                                                                      "children": [
                                                                        {
                                                                          "id": "73",
                                                                          "children": [
                                                                            {
                                                                              "id": "74",
                                                                              "children": [
                                                                                {
                                                                                  "id": "75",
                                                                                  "children": [
                                                                                    {
                                                                                      "id": "76",
                                                                                      "children": [
                                                                                        {
                                                                                          "id": "77",
                                                                                          "children": [
                                                                                            {
                                                                                              "id": "78",
                                                                                              "children": [
                                                                                                {
                                                                                                  "id": "79",
                                                                                                  "children": [
                                                                                                    {
                                                                                                      "id": "80",
                                                                                                      "children": [
                                                                                                        {
                                                                                                          "id": "81",
                                                                                                          "children": [
                                                                                                            {
                                                                                                              "id": "82",
                                                                                                              "children": [
                                                                                                                {
                                                                                                                  "id": "83",
                                                                                                                  "children": [
                                                                                                                    {
                                                                                                                      "id": "84",
                                                                                                                      "children": [
                                                                                                                        {
                                                                                                                          "id": "85",
                                                                                                                          "children": [
                                                                                                                            {
                                                                                                                              "id": "86",
                                                                                                                              "children": [],
                                                                                                                              "methodName": "getPath",
                                                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                              "visibility": "private",
                                                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                              "detailedBehavior": "",
                                                                                                                              "flowRepresentation": "",
                                                                                                                              "briefSummary": "",
                                                                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                              "layer": "Logic",
                                                                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                              "time": "3",
                                                                                                                              "value": "3",
                                                                                                                              "percent": "0.0",
                                                                                                                              "selfTime": "1",
                                                                                                                              "color": "#718096"
                                                                                                                            },
                                                                                                                            {
                                                                                                                              "id": "87",
                                                                                                                              "children": [],
                                                                                                                              "methodName": "getDirection",
                                                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                              "visibility": "private",
                                                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                              "detailedBehavior": "",
                                                                                                                              "flowRepresentation": "",
                                                                                                                              "briefSummary": "",
                                                                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                              "layer": "Logic",
                                                                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                              "time": "1",
                                                                                                                              "value": "1",
                                                                                                                              "percent": "0.0",
                                                                                                                              "selfTime": "1",
                                                                                                                              "color": "#718096"
                                                                                                                            }
                                                                                                                          ],
                                                                                                                          "methodName": "getPath",
                                                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                          "visibility": "private",
                                                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                          "detailedBehavior": "",
                                                                                                                          "flowRepresentation": "",
                                                                                                                          "briefSummary": "",
                                                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                          "layer": "Logic",
                                                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                          "time": "10",
                                                                                                                          "value": "10",
                                                                                                                          "percent": "0.0",
                                                                                                                          "selfTime": "4",
                                                                                                                          "color": "#718096"
                                                                                                                        }
                                                                                                                      ],
                                                                                                                      "methodName": "getPath",
                                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                      "visibility": "private",
                                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                      "detailedBehavior": "",
                                                                                                                      "flowRepresentation": "",
                                                                                                                      "briefSummary": "",
                                                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                      "layer": "Logic",
                                                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                      "time": "22",
                                                                                                                      "value": "22",
                                                                                                                      "percent": "0.0",
                                                                                                                      "selfTime": "9",
                                                                                                                      "color": "#718096"
                                                                                                                    },
                                                                                                                    {
                                                                                                                      "id": "88",
                                                                                                                      "children": [],
                                                                                                                      "methodName": "getDirection",
                                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                      "visibility": "private",
                                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                      "detailedBehavior": "",
                                                                                                                      "flowRepresentation": "",
                                                                                                                      "briefSummary": "",
                                                                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                      "layer": "Logic",
                                                                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                      "time": "1",
                                                                                                                      "value": "1",
                                                                                                                      "percent": "0.0",
                                                                                                                      "selfTime": "1",
                                                                                                                      "color": "#718096"
                                                                                                                    }
                                                                                                                  ],
                                                                                                                  "methodName": "getPath",
                                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                  "visibility": "private",
                                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                                  "detailedBehavior": "",
                                                                                                                  "flowRepresentation": "",
                                                                                                                  "briefSummary": "",
                                                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                                  "layer": "Logic",
                                                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                                  "time": "30",
                                                                                                                  "value": "30",
                                                                                                                  "percent": "0.0",
                                                                                                                  "selfTime": "5",
                                                                                                                  "color": "#718096"
                                                                                                                },
                                                                                                                {
                                                                                                                  "id": "89",
                                                                                                                  "children": [],
                                                                                                                  "methodName": "getDirection",
                                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                                  "visibility": "private",
                                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                                  "detailedBehavior": "",
                                                                                                                  "flowRepresentation": "",
                                                                                                                  "briefSummary": "",
                                                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                                  "layer": "Logic",
                                                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                                  "time": "1",
                                                                                                                  "value": "1",
                                                                                                                  "percent": "0.0",
                                                                                                                  "selfTime": "1",
                                                                                                                  "color": "#718096"
                                                                                                                }
                                                                                                              ],
                                                                                                              "methodName": "getPath",
                                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                              "visibility": "private",
                                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                              "detailedBehavior": "",
                                                                                                              "flowRepresentation": "",
                                                                                                              "briefSummary": "",
                                                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                              "layer": "Logic",
                                                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                              "time": "41",
                                                                                                              "value": "41",
                                                                                                              "percent": "0.0",
                                                                                                              "selfTime": "8",
                                                                                                              "color": "#718096"
                                                                                                            },
                                                                                                            {
                                                                                                              "id": "90",
                                                                                                              "children": [],
                                                                                                              "methodName": "getDirection",
                                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                              "visibility": "private",
                                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                              "detailedBehavior": "",
                                                                                                              "flowRepresentation": "",
                                                                                                              "briefSummary": "",
                                                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                              "layer": "Logic",
                                                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                              "time": "2",
                                                                                                              "value": "2",
                                                                                                              "percent": "0.0",
                                                                                                              "selfTime": "2",
                                                                                                              "color": "#718096"
                                                                                                            }
                                                                                                          ],
                                                                                                          "methodName": "getPath",
                                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                          "visibility": "private",
                                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                          "detailedBehavior": "",
                                                                                                          "flowRepresentation": "",
                                                                                                          "briefSummary": "",
                                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                          "layer": "Logic",
                                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                          "time": "61",
                                                                                                          "value": "61",
                                                                                                          "percent": "0.0",
                                                                                                          "selfTime": "11",
                                                                                                          "color": "#718096"
                                                                                                        },
                                                                                                        {
                                                                                                          "id": "91",
                                                                                                          "children": [],
                                                                                                          "methodName": "getDirection",
                                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                          "visibility": "private",
                                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                          "detailedBehavior": "",
                                                                                                          "flowRepresentation": "",
                                                                                                          "briefSummary": "",
                                                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                          "layer": "Logic",
                                                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                          "time": "5",
                                                                                                          "value": "5",
                                                                                                          "percent": "0.0",
                                                                                                          "selfTime": "5",
                                                                                                          "color": "#718096"
                                                                                                        }
                                                                                                      ],
                                                                                                      "methodName": "getPath",
                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                      "visibility": "private",
                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                      "detailedBehavior": "",
                                                                                                      "flowRepresentation": "",
                                                                                                      "briefSummary": "",
                                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                      "layer": "Logic",
                                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                      "time": "92",
                                                                                                      "value": "92",
                                                                                                      "percent": "0.0",
                                                                                                      "selfTime": "18",
                                                                                                      "color": "#718096"
                                                                                                    },
                                                                                                    {
                                                                                                      "id": "92",
                                                                                                      "children": [],
                                                                                                      "methodName": "getDirection",
                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                      "visibility": "private",
                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                      "detailedBehavior": "",
                                                                                                      "flowRepresentation": "",
                                                                                                      "briefSummary": "",
                                                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                      "layer": "Logic",
                                                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                      "time": "1",
                                                                                                      "value": "1",
                                                                                                      "percent": "0.0",
                                                                                                      "selfTime": "1",
                                                                                                      "color": "#718096"
                                                                                                    }
                                                                                                  ],
                                                                                                  "methodName": "getPath",
                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                  "visibility": "private",
                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                  "detailedBehavior": "",
                                                                                                  "flowRepresentation": "",
                                                                                                  "briefSummary": "",
                                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                  "layer": "Logic",
                                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                  "time": "113",
                                                                                                  "value": "113",
                                                                                                  "percent": "0.0",
                                                                                                  "selfTime": "13",
                                                                                                  "color": "#718096"
                                                                                                },
                                                                                                {
                                                                                                  "id": "93",
                                                                                                  "children": [],
                                                                                                  "methodName": "getDirection",
                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                  "visibility": "private",
                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                                  "detailedBehavior": "",
                                                                                                  "flowRepresentation": "",
                                                                                                  "briefSummary": "",
                                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                                  "layer": "Logic",
                                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                                  "time": "2",
                                                                                                  "value": "2",
                                                                                                  "percent": "0.0",
                                                                                                  "selfTime": "2",
                                                                                                  "color": "#718096"
                                                                                                }
                                                                                              ],
                                                                                              "methodName": "getPath",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                              "time": "144",
                                                                                              "value": "144",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "23",
                                                                                              "color": "#718096"
                                                                                            },
                                                                                            {
                                                                                              "id": "94",
                                                                                              "children": [],
                                                                                              "methodName": "getDirection",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                                              "time": "1",
                                                                                              "value": "1",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "1",
                                                                                              "color": "#718096"
                                                                                            }
                                                                                          ],
                                                                                          "methodName": "getPath",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                          "time": "166",
                                                                                          "value": "166",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "15",
                                                                                          "color": "#718096"
                                                                                        },
                                                                                        {
                                                                                          "id": "95",
                                                                                          "children": [],
                                                                                          "methodName": "getDirection",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                                          "time": "3",
                                                                                          "value": "3",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "3",
                                                                                          "color": "#718096"
                                                                                        }
                                                                                      ],
                                                                                      "methodName": "getPath",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                      "time": "198",
                                                                                      "value": "198",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "23",
                                                                                      "color": "#718096"
                                                                                    },
                                                                                    {
                                                                                      "id": "96",
                                                                                      "children": [],
                                                                                      "methodName": "getDirection",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                                      "time": "4",
                                                                                      "value": "4",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "4",
                                                                                      "color": "#718096"
                                                                                    }
                                                                                  ],
                                                                                  "methodName": "getPath",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                  "time": "224",
                                                                                  "value": "224",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "15",
                                                                                  "color": "#718096"
                                                                                },
                                                                                {
                                                                                  "id": "97",
                                                                                  "children": [],
                                                                                  "methodName": "getDirection",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                  "time": "2",
                                                                                  "value": "2",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "2",
                                                                                  "color": "#718096"
                                                                                }
                                                                              ],
                                                                              "methodName": "getPath",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                              "time": "249",
                                                                              "value": "249",
                                                                              "percent": "0.0",
                                                                              "selfTime": "20",
                                                                              "color": "#718096"
                                                                            },
                                                                            {
                                                                              "id": "98",
                                                                              "children": [],
                                                                              "methodName": "getDirection",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                              "time": "3",
                                                                              "value": "3",
                                                                              "percent": "0.0",
                                                                              "selfTime": "3",
                                                                              "color": "#718096"
                                                                            }
                                                                          ],
                                                                          "methodName": "getPath",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                          "time": "283",
                                                                          "value": "283",
                                                                          "percent": "0.0",
                                                                          "selfTime": "22",
                                                                          "color": "#718096"
                                                                        },
                                                                        {
                                                                          "id": "99",
                                                                          "children": [],
                                                                          "methodName": "getDirection",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                          "time": "4",
                                                                          "value": "4",
                                                                          "percent": "0.0",
                                                                          "selfTime": "4",
                                                                          "color": "#718096"
                                                                        }
                                                                      ],
                                                                      "methodName": "getPath",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                      "time": "314",
                                                                      "value": "314",
                                                                      "percent": "0.0",
                                                                      "selfTime": "23",
                                                                      "color": "#718096"
                                                                    },
                                                                    {
                                                                      "id": "100",
                                                                      "children": [],
                                                                      "methodName": "getDirection",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                      "time": "1",
                                                                      "value": "1",
                                                                      "percent": "0.0",
                                                                      "selfTime": "1",
                                                                      "color": "#718096"
                                                                    }
                                                                  ],
                                                                  "methodName": "getPath",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                  "time": "340",
                                                                  "value": "340",
                                                                  "percent": "0.0",
                                                                  "selfTime": "18",
                                                                  "color": "#718096"
                                                                },
                                                                {
                                                                  "id": "101",
                                                                  "children": [],
                                                                  "methodName": "getDirection",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                  "time": "3",
                                                                  "value": "3",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#718096"
                                                                }
                                                              ],
                                                              "methodName": "getPath",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                              "time": "370",
                                                              "value": "370",
                                                              "percent": "0.0",
                                                              "selfTime": "23",
                                                              "color": "#718096"
                                                            },
                                                            {
                                                              "id": "102",
                                                              "children": [],
                                                              "methodName": "getDirection",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the current direction of a ghost in the game.",
                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#718096"
                                                            }
                                                          ],
                                                          "methodName": "getPath",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                          "time": "400",
                                                          "value": "400",
                                                          "percent": "0.0",
                                                          "selfTime": "21",
                                                          "color": "#718096"
                                                        },
                                                        {
                                                          "id": "103",
                                                          "children": [],
                                                          "methodName": "getDirection",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the current direction of a ghost in the game.",
                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                          "time": "4",
                                                          "value": "4",
                                                          "percent": "0.0",
                                                          "selfTime": "4",
                                                          "color": "#718096"
                                                        }
                                                      ],
                                                      "methodName": "getPath",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                      "time": "434",
                                                      "value": "434",
                                                      "percent": "0.0",
                                                      "selfTime": "27",
                                                      "color": "#718096"
                                                    },
                                                    {
                                                      "id": "104",
                                                      "children": [],
                                                      "methodName": "getDirection",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the current direction of a ghost in the game.",
                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                      "time": "3",
                                                      "value": "3",
                                                      "percent": "0.0",
                                                      "selfTime": "3",
                                                      "color": "#718096"
                                                    }
                                                  ],
                                                  "methodName": "getPath",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                  "time": "458",
                                                  "value": "458",
                                                  "percent": "0.0",
                                                  "selfTime": "17",
                                                  "color": "#718096"
                                                },
                                                {
                                                  "id": "105",
                                                  "children": [],
                                                  "methodName": "getDirection",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the current direction of a ghost in the game.",
                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                  "time": "2",
                                                  "value": "2",
                                                  "percent": "0.0",
                                                  "selfTime": "2",
                                                  "color": "#718096"
                                                }
                                              ],
                                              "methodName": "getPath",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                              "time": "496",
                                              "value": "496",
                                              "percent": "0.0",
                                              "selfTime": "27",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "106",
                                              "children": [],
                                              "methodName": "getDirection",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the current direction of a ghost in the game.",
                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A Direction object representing the current direction of the ghost.",
                                              "time": "3",
                                              "value": "3",
                                              "percent": "0.0",
                                              "selfTime": "3",
                                              "color": "#718096"
                                            }
                                          ],
                                          "methodName": "getPath",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                          "time": "527",
                                          "value": "527",
                                          "percent": "0.0",
                                          "selfTime": "25",
                                          "color": "#718096"
                                        },
                                        {
                                          "id": "107",
                                          "children": [],
                                          "methodName": "getDirection",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the current direction of a ghost in the game.",
                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A Direction object representing the current direction of the ghost.",
                                          "time": "2",
                                          "value": "2",
                                          "percent": "0.0",
                                          "selfTime": "2",
                                          "color": "#718096"
                                        }
                                      ],
                                      "methodName": "getPath",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                      "time": "557",
                                      "value": "557",
                                      "percent": "0.0",
                                      "selfTime": "18",
                                      "color": "#718096"
                                    },
                                    {
                                      "id": "108",
                                      "children": [],
                                      "methodName": "getDirection",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the current direction of a ghost in the game.",
                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A Direction object representing the current direction of the ghost.",
                                      "time": "4",
                                      "value": "4",
                                      "percent": "0.0",
                                      "selfTime": "4",
                                      "color": "#718096"
                                    }
                                  ],
                                  "methodName": "getPath",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                  "time": "585",
                                  "value": "585",
                                  "percent": "0.0",
                                  "selfTime": "21",
                                  "color": "#718096"
                                },
                                {
                                  "id": "109",
                                  "children": [],
                                  "methodName": "getDirection",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the current direction of a ghost in the game.",
                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A Direction object representing the current direction of the ghost.",
                                  "time": "1",
                                  "value": "1",
                                  "percent": "0.0",
                                  "selfTime": "1",
                                  "color": "#718096"
                                }
                              ],
                              "methodName": "getPath",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                              "layer": "Logic",
                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                              "time": "617",
                              "value": "617",
                              "percent": "0.0",
                              "selfTime": "24",
                              "color": "#718096"
                            },
                            {
                              "id": "110",
                              "children": [],
                              "methodName": "getDirection",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the current direction of a ghost in the game.",
                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                              "layer": "Logic",
                              "returns": "A Direction object representing the current direction of the ghost.",
                              "time": "2",
                              "value": "2",
                              "percent": "0.0",
                              "selfTime": "2",
                              "color": "#718096"
                            }
                          ],
                          "methodName": "getPath",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                          "layer": "Logic",
                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                          "time": "647",
                          "value": "647",
                          "percent": "0.0",
                          "selfTime": "21",
                          "color": "#718096"
                        },
                        {
                          "id": "111",
                          "children": [],
                          "methodName": "getDirection",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the current direction of a ghost in the game.",
                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                          "layer": "Logic",
                          "returns": "A Direction object representing the current direction of the ghost.",
                          "time": "5",
                          "value": "5",
                          "percent": "0.0",
                          "selfTime": "5",
                          "color": "#718096"
                        }
                      ],
                      "methodName": "getPath",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                      "layer": "Logic",
                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                      "time": "675",
                      "value": "675",
                      "percent": "0.0",
                      "selfTime": "20",
                      "color": "#718096"
                    }
                  ],
                  "methodName": "shortestPath",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                  "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                  "layer": "Logic",
                  "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                  "time": "80296",
                  "value": "80296",
                  "percent": "0.4",
                  "selfTime": "10875",
                  "color": "#718096"
                },
                {
                  "id": "112",
                  "children": [
                    {
                      "id": "113",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "12199",
                      "value": "12199",
                      "percent": "0.1",
                      "selfTime": "8345",
                      "color": "#3182CE"
                    },
                    {
                      "id": "114",
                      "children": [
                        {
                          "id": "115",
                          "children": [],
                          "methodName": "getOccupants",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the list of units occupying a square in the game board.",
                          "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                          "layer": "Logic",
                          "returns": "An immutable list of units occupying the square.",
                          "time": "3371",
                          "value": "3371",
                          "percent": "0.0",
                          "selfTime": "1992",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "findUnit",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Finds a unit of a specific type in a given square on the game board.",
                      "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                      "layer": "Logic",
                      "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                      "time": "11900",
                      "value": "11900",
                      "percent": "0.1",
                      "selfTime": "5499",
                      "color": "#718096"
                    },
                    {
                      "id": "116",
                      "children": [],
                      "methodName": "values",
                      "className": "nl.tudelft.jpacman.board.Direction",
                      "visibility": "",
                      "label": "nl.tudelft.jpacman.board.Direction.values()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "",
                      "layer": "",
                      "returns": "",
                      "time": "3282",
                      "value": "3282",
                      "percent": "0.0",
                      "selfTime": "2022",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "findNearest",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                  "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                  "layer": "",
                  "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                  "time": "64352",
                  "value": "64352",
                  "percent": "0.3",
                  "selfTime": "20150",
                  "color": "#718096"
                },
                {
                  "id": "117",
                  "children": [
                    {
                      "id": "118",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "59",
                      "value": "59",
                      "percent": "0.0",
                      "selfTime": "41",
                      "color": "#3182CE"
                    },
                    {
                      "id": "119",
                      "children": [],
                      "methodName": "getDirection",
                      "className": "nl.tudelft.jpacman.board.Unit",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Unit.getDirection()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Returns the current direction of a unit in the game.",
                      "reason": "This method provides necessary information for other logic components to determine the movement of units in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the current direction this unit is facing.\r\n *\r\n * @return The current direction this unit is facing.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                      "layer": "Logic",
                      "returns": "A Direction object representing the current direction of the unit.",
                      "time": "14",
                      "value": "14",
                      "percent": "0.0",
                      "selfTime": "14",
                      "color": "#3182CE"
                    },
                    {
                      "id": "120",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.board.Unit",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square that a unit is currently occupying.",
                      "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                      "time": "6",
                      "value": "6",
                      "percent": "0.0",
                      "selfTime": "6",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "squaresAheadOf",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.squaresAheadOf()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that is a specified number of steps ahead in the current direction.",
                  "reason": "This method is used to determine the next position a unit will move to based on its current direction and the number of squares it intends to move.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * A utility method for implementing the ghost AI.\r\n *\r\n * @param amountToLookAhead\r\n * \t\tthe amount of squares to follow this units direction in.\r\n * @return The square amountToLookAhead spaces in front of this unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square squaresAheadOf(int amountToLookAhead) {\r\n    nl.tudelft.jpacman.board.Direction targetDirection = this.getDirection();\r\n    nl.tudelft.jpacman.board.Square destination = this.getSquare();\r\n    for (int i = 0; i < amountToLookAhead; i++) {\r\n        destination = destination.getSquareAt(targetDirection);\r\n    }\r\n    return destination;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square that is a specified number of steps ahead in the current direction.",
                  "time": "191",
                  "value": "191",
                  "percent": "0.0",
                  "selfTime": "112",
                  "color": "#3182CE"
                },
                {
                  "id": "121",
                  "children": [],
                  "methodName": "getSquare",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that a unit is currently occupying.",
                  "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                  "time": "83",
                  "value": "83",
                  "percent": "0.0",
                  "selfTime": "83",
                  "color": "#3182CE"
                }
              ],
              "methodName": "nextAiMove",
              "className": "nl.tudelft.jpacman.npc.ghost.Pinky",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.npc.ghost.Pinky.nextAiMove()",
              "packageName": "nl.tudelft.jpacman.npc.ghost",
              "description": "(no description)",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling their home corners, Pinky wants to go\r\n * to the place that is four grid spaces ahead of Pac-Man in the direction\r\n * that Pac-Man is facing. If Pac-Man is facing down, Pinky wants to go to\r\n * the location exactly four spaces below Pac-Man. Moving towards this place\r\n * uses the same logic that Blinky uses to find Pac-Man's exact location.\r\n * Pinky is affected by a targeting bug if Pac-Man is facing up - when he\r\n * moves or faces up, Pinky tries moving towards a point up, and left, four\r\n * spaces.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit player = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (player == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert player.hasSquare();\r\n    nl.tudelft.jpacman.board.Square destination = player.squaresAheadOf(nl.tudelft.jpacman.npc.ghost.Pinky.SQUARES_AHEAD);\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), destination, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
              "layer": "",
              "returns": "",
              "time": "147250",
              "value": "147250",
              "percent": "0.7",
              "selfTime": "2140",
              "color": "#718096"
            },
            {
              "id": "122",
              "children": [
                {
                  "id": "123",
                  "children": [
                    {
                      "id": "124",
                      "children": [
                        {
                          "id": "125",
                          "children": [],
                          "methodName": "getOccupants",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the list of units occupying a square in the game board.",
                          "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                          "layer": "Logic",
                          "returns": "An immutable list of units occupying the square.",
                          "time": "2547",
                          "value": "2547",
                          "percent": "0.0",
                          "selfTime": "1556",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "findUnit",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Finds a unit of a specific type in a given square on the game board.",
                      "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                      "layer": "Logic",
                      "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                      "time": "9192",
                      "value": "9192",
                      "percent": "0.0",
                      "selfTime": "4421",
                      "color": "#718096"
                    },
                    {
                      "id": "126",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "8714",
                      "value": "8714",
                      "percent": "0.0",
                      "selfTime": "5958",
                      "color": "#3182CE"
                    },
                    {
                      "id": "127",
                      "children": [],
                      "methodName": "values",
                      "className": "nl.tudelft.jpacman.board.Direction",
                      "visibility": "",
                      "label": "nl.tudelft.jpacman.board.Direction.values()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "",
                      "layer": "",
                      "returns": "",
                      "time": "2154",
                      "value": "2154",
                      "percent": "0.0",
                      "selfTime": "1362",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "findNearest",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                  "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                  "layer": "",
                  "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                  "time": "47613",
                  "value": "47613",
                  "percent": "0.2",
                  "selfTime": "14759",
                  "color": "#718096"
                },
                {
                  "id": "128",
                  "children": [
                    {
                      "id": "129",
                      "children": [
                        {
                          "id": "130",
                          "children": [],
                          "methodName": "getSquareAt",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the square adjacent to the current square in a given direction.",
                          "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.board.Square",
                          "time": "7432",
                          "value": "7432",
                          "percent": "0.0",
                          "selfTime": "5115",
                          "color": "#3182CE"
                        },
                        {
                          "id": "131",
                          "children": [],
                          "methodName": "values",
                          "className": "nl.tudelft.jpacman.board.Direction",
                          "visibility": "",
                          "label": "nl.tudelft.jpacman.board.Direction.values()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "",
                          "layer": "",
                          "returns": "",
                          "time": "1905",
                          "value": "1905",
                          "percent": "0.0",
                          "selfTime": "1194",
                          "color": "#3182CE"
                        },
                        {
                          "id": "132",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "999",
                          "value": "999",
                          "percent": "0.0",
                          "selfTime": "999",
                          "color": "#3182CE"
                        },
                        {
                          "id": "133",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "682",
                          "value": "682",
                          "percent": "0.0",
                          "selfTime": "682",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "addNewTargets",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Adds new targets to the list of targets for a ghost in the game.",
                      "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                      "layer": "Logic",
                      "returns": "void",
                      "time": "26188",
                      "value": "26188",
                      "percent": "0.1",
                      "selfTime": "10681",
                      "color": "#718096"
                    },
                    {
                      "id": "134",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Retrieves the square associated with a node.",
                      "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                      "time": "603",
                      "value": "603",
                      "percent": "0.0",
                      "selfTime": "603",
                      "color": "#718096"
                    },
                    {
                      "id": "135",
                      "children": [
                        {
                          "id": "136",
                          "children": [
                            {
                              "id": "137",
                              "children": [
                                {
                                  "id": "138",
                                  "children": [
                                    {
                                      "id": "139",
                                      "children": [
                                        {
                                          "id": "140",
                                          "children": [
                                            {
                                              "id": "141",
                                              "children": [
                                                {
                                                  "id": "142",
                                                  "children": [
                                                    {
                                                      "id": "143",
                                                      "children": [
                                                        {
                                                          "id": "144",
                                                          "children": [
                                                            {
                                                              "id": "145",
                                                              "children": [
                                                                {
                                                                  "id": "146",
                                                                  "children": [
                                                                    {
                                                                      "id": "147",
                                                                      "children": [
                                                                        {
                                                                          "id": "148",
                                                                          "children": [
                                                                            {
                                                                              "id": "149",
                                                                              "children": [
                                                                                {
                                                                                  "id": "150",
                                                                                  "children": [
                                                                                    {
                                                                                      "id": "151",
                                                                                      "children": [
                                                                                        {
                                                                                          "id": "152",
                                                                                          "children": [
                                                                                            {
                                                                                              "id": "153",
                                                                                              "children": [
                                                                                                {
                                                                                                  "id": "154",
                                                                                                  "children": [
                                                                                                    {
                                                                                                      "id": "155",
                                                                                                      "children": [],
                                                                                                      "methodName": "getPath",
                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                      "visibility": "private",
                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                      "detailedBehavior": "",
                                                                                                      "flowRepresentation": "",
                                                                                                      "briefSummary": "",
                                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                      "layer": "Logic",
                                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                      "time": "1",
                                                                                                      "value": "1",
                                                                                                      "percent": "0.0",
                                                                                                      "selfTime": "1",
                                                                                                      "color": "#718096"
                                                                                                    }
                                                                                                  ],
                                                                                                  "methodName": "getPath",
                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                  "visibility": "private",
                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                  "detailedBehavior": "",
                                                                                                  "flowRepresentation": "",
                                                                                                  "briefSummary": "",
                                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                  "layer": "Logic",
                                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                  "time": "3",
                                                                                                  "value": "3",
                                                                                                  "percent": "0.0",
                                                                                                  "selfTime": "1",
                                                                                                  "color": "#718096"
                                                                                                }
                                                                                              ],
                                                                                              "methodName": "getPath",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                              "time": "8",
                                                                                              "value": "8",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "3",
                                                                                              "color": "#718096"
                                                                                            },
                                                                                            {
                                                                                              "id": "156",
                                                                                              "children": [],
                                                                                              "methodName": "getDirection",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                                              "time": "2",
                                                                                              "value": "2",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "2",
                                                                                              "color": "#718096"
                                                                                            }
                                                                                          ],
                                                                                          "methodName": "getPath",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                          "time": "17",
                                                                                          "value": "17",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "5",
                                                                                          "color": "#718096"
                                                                                        }
                                                                                      ],
                                                                                      "methodName": "getPath",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                      "time": "34",
                                                                                      "value": "34",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "12",
                                                                                      "color": "#718096"
                                                                                    },
                                                                                    {
                                                                                      "id": "157",
                                                                                      "children": [],
                                                                                      "methodName": "getDirection",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                                      "time": "2",
                                                                                      "value": "2",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "2",
                                                                                      "color": "#718096"
                                                                                    }
                                                                                  ],
                                                                                  "methodName": "getPath",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                  "time": "46",
                                                                                  "value": "46",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "9",
                                                                                  "color": "#718096"
                                                                                },
                                                                                {
                                                                                  "id": "158",
                                                                                  "children": [],
                                                                                  "methodName": "getDirection",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                  "time": "1",
                                                                                  "value": "1",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "1",
                                                                                  "color": "#718096"
                                                                                }
                                                                              ],
                                                                              "methodName": "getPath",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                              "time": "69",
                                                                              "value": "69",
                                                                              "percent": "0.0",
                                                                              "selfTime": "13",
                                                                              "color": "#718096"
                                                                            },
                                                                            {
                                                                              "id": "159",
                                                                              "children": [],
                                                                              "methodName": "getDirection",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                              "time": "4",
                                                                              "value": "4",
                                                                              "percent": "0.0",
                                                                              "selfTime": "4",
                                                                              "color": "#718096"
                                                                            }
                                                                          ],
                                                                          "methodName": "getPath",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                          "time": "92",
                                                                          "value": "92",
                                                                          "percent": "0.0",
                                                                          "selfTime": "12",
                                                                          "color": "#718096"
                                                                        },
                                                                        {
                                                                          "id": "160",
                                                                          "children": [],
                                                                          "methodName": "getDirection",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                          "time": "2",
                                                                          "value": "2",
                                                                          "percent": "0.0",
                                                                          "selfTime": "2",
                                                                          "color": "#718096"
                                                                        }
                                                                      ],
                                                                      "methodName": "getPath",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                      "time": "118",
                                                                      "value": "118",
                                                                      "percent": "0.0",
                                                                      "selfTime": "15",
                                                                      "color": "#718096"
                                                                    },
                                                                    {
                                                                      "id": "161",
                                                                      "children": [],
                                                                      "methodName": "getDirection",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                      "time": "3",
                                                                      "value": "3",
                                                                      "percent": "0.0",
                                                                      "selfTime": "3",
                                                                      "color": "#718096"
                                                                    }
                                                                  ],
                                                                  "methodName": "getPath",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                  "time": "157",
                                                                  "value": "157",
                                                                  "percent": "0.0",
                                                                  "selfTime": "26",
                                                                  "color": "#718096"
                                                                },
                                                                {
                                                                  "id": "162",
                                                                  "children": [],
                                                                  "methodName": "getDirection",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                  "time": "5",
                                                                  "value": "5",
                                                                  "percent": "0.0",
                                                                  "selfTime": "5",
                                                                  "color": "#718096"
                                                                }
                                                              ],
                                                              "methodName": "getPath",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                              "time": "189",
                                                              "value": "189",
                                                              "percent": "0.0",
                                                              "selfTime": "25",
                                                              "color": "#718096"
                                                            },
                                                            {
                                                              "id": "163",
                                                              "children": [],
                                                              "methodName": "getDirection",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the current direction of a ghost in the game.",
                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                              "time": "4",
                                                              "value": "4",
                                                              "percent": "0.0",
                                                              "selfTime": "4",
                                                              "color": "#718096"
                                                            }
                                                          ],
                                                          "methodName": "getPath",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                          "time": "218",
                                                          "value": "218",
                                                          "percent": "0.0",
                                                          "selfTime": "18",
                                                          "color": "#718096"
                                                        },
                                                        {
                                                          "id": "164",
                                                          "children": [],
                                                          "methodName": "getDirection",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the current direction of a ghost in the game.",
                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                          "time": "5",
                                                          "value": "5",
                                                          "percent": "0.0",
                                                          "selfTime": "5",
                                                          "color": "#718096"
                                                        }
                                                      ],
                                                      "methodName": "getPath",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                      "time": "245",
                                                      "value": "245",
                                                      "percent": "0.0",
                                                      "selfTime": "20",
                                                      "color": "#718096"
                                                    },
                                                    {
                                                      "id": "165",
                                                      "children": [],
                                                      "methodName": "getDirection",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the current direction of a ghost in the game.",
                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                      "time": "7",
                                                      "value": "7",
                                                      "percent": "0.0",
                                                      "selfTime": "7",
                                                      "color": "#718096"
                                                    }
                                                  ],
                                                  "methodName": "getPath",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                  "time": "288",
                                                  "value": "288",
                                                  "percent": "0.0",
                                                  "selfTime": "30",
                                                  "color": "#718096"
                                                },
                                                {
                                                  "id": "166",
                                                  "children": [],
                                                  "methodName": "getDirection",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the current direction of a ghost in the game.",
                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                  "time": "2",
                                                  "value": "2",
                                                  "percent": "0.0",
                                                  "selfTime": "2",
                                                  "color": "#718096"
                                                }
                                              ],
                                              "methodName": "getPath",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                              "time": "315",
                                              "value": "315",
                                              "percent": "0.0",
                                              "selfTime": "16",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "167",
                                              "children": [],
                                              "methodName": "getDirection",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the current direction of a ghost in the game.",
                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A Direction object representing the current direction of the ghost.",
                                              "time": "5",
                                              "value": "5",
                                              "percent": "0.0",
                                              "selfTime": "5",
                                              "color": "#718096"
                                            }
                                          ],
                                          "methodName": "getPath",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                          "time": "343",
                                          "value": "343",
                                          "percent": "0.0",
                                          "selfTime": "20",
                                          "color": "#718096"
                                        },
                                        {
                                          "id": "168",
                                          "children": [],
                                          "methodName": "getDirection",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the current direction of a ghost in the game.",
                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A Direction object representing the current direction of the ghost.",
                                          "time": "5",
                                          "value": "5",
                                          "percent": "0.0",
                                          "selfTime": "5",
                                          "color": "#718096"
                                        }
                                      ],
                                      "methodName": "getPath",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                      "time": "374",
                                      "value": "374",
                                      "percent": "0.0",
                                      "selfTime": "23",
                                      "color": "#718096"
                                    },
                                    {
                                      "id": "169",
                                      "children": [],
                                      "methodName": "getDirection",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the current direction of a ghost in the game.",
                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A Direction object representing the current direction of the ghost.",
                                      "time": "7",
                                      "value": "7",
                                      "percent": "0.0",
                                      "selfTime": "7",
                                      "color": "#718096"
                                    }
                                  ],
                                  "methodName": "getPath",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                  "time": "412",
                                  "value": "412",
                                  "percent": "0.0",
                                  "selfTime": "23",
                                  "color": "#718096"
                                },
                                {
                                  "id": "170",
                                  "children": [],
                                  "methodName": "getDirection",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the current direction of a ghost in the game.",
                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A Direction object representing the current direction of the ghost.",
                                  "time": "5",
                                  "value": "5",
                                  "percent": "0.0",
                                  "selfTime": "5",
                                  "color": "#718096"
                                }
                              ],
                              "methodName": "getPath",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                              "layer": "Logic",
                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                              "time": "444",
                              "value": "444",
                              "percent": "0.0",
                              "selfTime": "21",
                              "color": "#718096"
                            },
                            {
                              "id": "171",
                              "children": [],
                              "methodName": "getDirection",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the current direction of a ghost in the game.",
                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                              "layer": "Logic",
                              "returns": "A Direction object representing the current direction of the ghost.",
                              "time": "3",
                              "value": "3",
                              "percent": "0.0",
                              "selfTime": "3",
                              "color": "#718096"
                            }
                          ],
                          "methodName": "getPath",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                          "layer": "Logic",
                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                          "time": "462",
                          "value": "462",
                          "percent": "0.0",
                          "selfTime": "10",
                          "color": "#718096"
                        },
                        {
                          "id": "172",
                          "children": [],
                          "methodName": "getDirection",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the current direction of a ghost in the game.",
                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                          "layer": "Logic",
                          "returns": "A Direction object representing the current direction of the ghost.",
                          "time": "7",
                          "value": "7",
                          "percent": "0.0",
                          "selfTime": "7",
                          "color": "#718096"
                        }
                      ],
                      "methodName": "getPath",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                      "layer": "Logic",
                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                      "time": "486",
                      "value": "486",
                      "percent": "0.0",
                      "selfTime": "14",
                      "color": "#718096"
                    }
                  ],
                  "methodName": "shortestPath",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                  "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                  "layer": "Logic",
                  "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                  "time": "35512",
                  "value": "35512",
                  "percent": "0.2",
                  "selfTime": "4596",
                  "color": "#718096"
                },
                {
                  "id": "173",
                  "children": [],
                  "methodName": "opposite",
                  "className": "nl.tudelft.jpacman.board.Direction",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Direction.opposite()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Returns the opposite direction of the current direction.",
                  "reason": "This method is used to determine the opposite direction in a game like Pacman, where knowing the opposite direction is necessary for movement logic.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n *\r\n * @return The direction that is opposite to this direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction opposite() {\r\n    switch (this) {\r\n        case NORTH :\r\n            return nl.tudelft.jpacman.board.Direction.SOUTH;\r\n        case SOUTH :\r\n            return nl.tudelft.jpacman.board.Direction.NORTH;\r\n        case WEST :\r\n            return nl.tudelft.jpacman.board.Direction.EAST;\r\n        case EAST :\r\n            return nl.tudelft.jpacman.board.Direction.WEST;\r\n        default :\r\n            throw new java.lang.IllegalStateException(\"Received an unknown enum value.\");\r\n    }\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Direction - The opposite direction of the current direction.",
                  "time": "1107",
                  "value": "1107",
                  "percent": "0.0",
                  "selfTime": "1099",
                  "color": "#3182CE"
                },
                {
                  "id": "174",
                  "children": [],
                  "methodName": "getSquare",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that a unit is currently occupying.",
                  "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                  "time": "62",
                  "value": "62",
                  "percent": "0.0",
                  "selfTime": "62",
                  "color": "#3182CE"
                }
              ],
              "methodName": "nextAiMove",
              "className": "nl.tudelft.jpacman.npc.ghost.Clyde",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.npc.ghost.Clyde.nextAiMove()",
              "packageName": "nl.tudelft.jpacman.npc.ghost",
              "description": "(no description)",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * Clyde has two basic AIs, one for when he's far from Pac-Man, and one for\r\n * when he is near to Pac-Man.\r\n * When Clyde is far away from Pac-Man (beyond eight grid spaces),\r\n * Clyde behaves very much like Blinky, trying to move to Pac-Man's exact\r\n * location. However, when Clyde gets within eight grid spaces of Pac-Man,\r\n * he automatically changes his behavior and runs away\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        nl.tudelft.jpacman.board.Direction direction = path.get(0);\r\n        if (path.size() <= nl.tudelft.jpacman.npc.ghost.Clyde.SHYNESS) {\r\n            return java.util.Optional.of(direction.opposite());\r\n        }\r\n        return java.util.Optional.of(direction);\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
              "layer": "",
              "returns": "",
              "time": "84688",
              "value": "84688",
              "percent": "0.4",
              "selfTime": "251",
              "color": "#718096"
            },
            {
              "id": "175",
              "children": [
                {
                  "id": "176",
                  "children": [
                    {
                      "id": "177",
                      "children": [
                        {
                          "id": "178",
                          "children": [],
                          "methodName": "getOccupants",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the list of units occupying a square in the game board.",
                          "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                          "layer": "Logic",
                          "returns": "An immutable list of units occupying the square.",
                          "time": "2572",
                          "value": "2572",
                          "percent": "0.0",
                          "selfTime": "1588",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "findUnit",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findUnit()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Finds a unit of a specific type in a given square on the game board.",
                      "reason": "This method is used to locate specific types of units within a game board square, which is essential for collision detection and interaction logic in the game.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Determines whether a square has an occupant of a certain type.\r\n *\r\n * @param type\r\n * \t\tThe type to search for.\r\n * @param square\r\n * \t\tThe square to search.\r\n * @param <T>\r\n * \t\tthe type of unit we searched for.\r\n * @return A unit of type T, iff such a unit occupies this square, or\r\n<code>null</code> of none does.\r\n */\r\n@java.lang.SuppressWarnings(\"unchecked\")\r\npublic static <T extends nl.tudelft.jpacman.board.Unit> T findUnit(java.lang.Class<T> type, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Unit unit : square.getOccupants()) {\r\n        if (type.isInstance(unit)) {\r\n            assert unit.hasSquare();\r\n            return ((T) (unit));\r\n        }\r\n    }\r\n    return null;\r\n}",
                      "layer": "Logic",
                      "returns": "The first unit found that matches the specified type, or null if no such unit exists.",
                      "time": "8931",
                      "value": "8931",
                      "percent": "0.0",
                      "selfTime": "4079",
                      "color": "#718096"
                    },
                    {
                      "id": "179",
                      "children": [],
                      "methodName": "getSquareAt",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square adjacent to the current square in a given direction.",
                      "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "8806",
                      "value": "8806",
                      "percent": "0.0",
                      "selfTime": "6069",
                      "color": "#3182CE"
                    },
                    {
                      "id": "180",
                      "children": [],
                      "methodName": "values",
                      "className": "nl.tudelft.jpacman.board.Direction",
                      "visibility": "",
                      "label": "nl.tudelft.jpacman.board.Direction.values()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "",
                      "layer": "",
                      "returns": "",
                      "time": "2366",
                      "value": "2366",
                      "percent": "0.0",
                      "selfTime": "1531",
                      "color": "#3182CE"
                    }
                  ],
                  "methodName": "findNearest",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.findNearest()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Finds the nearest unit of a specific type from the current location on the game board.",
                  "reason": "This method is essential for ghost navigation in Pacman, determining the closest player or other units to facilitate movement and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Finds the nearest unit of the given type and returns its location. This\r\n * method will perform a breadth first search starting from the given\r\n * square.\r\n *\r\n * @param type\r\n * \t\tThe type of unit to search for.\r\n * @param currentLocation\r\n * \t\tThe starting location for the search.\r\n * @return The nearest unit of the given type, or <code>null</code> if no\r\nsuch unit could be found.\r\n */\r\npublic static nl.tudelft.jpacman.board.Unit findNearest(java.lang.Class<? extends nl.tudelft.jpacman.board.Unit> type, nl.tudelft.jpacman.board.Square currentLocation) {\r\n    java.util.List<nl.tudelft.jpacman.board.Square> toDo = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    toDo.add(currentLocation);\r\n    while (!toDo.isEmpty()) {\r\n        nl.tudelft.jpacman.board.Square square = toDo.remove(0);\r\n        nl.tudelft.jpacman.board.Unit unit = nl.tudelft.jpacman.npc.ghost.Navigation.findUnit(type, square);\r\n        if (unit != null) {\r\n            assert unit.hasSquare();\r\n            return unit;\r\n        }\r\n        visited.add(square);\r\n        for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n            nl.tudelft.jpacman.board.Square newTarget = square.getSquareAt(direction);\r\n            if ((!visited.contains(newTarget)) && (!toDo.contains(newTarget))) {\r\n                toDo.add(newTarget);\r\n            }\r\n        }\r\n    } \r\n    return null;\r\n}",
                  "layer": "",
                  "returns": "The nearest unit of the specified type, or null if no such unit exists.",
                  "time": "47138",
                  "value": "47138",
                  "percent": "0.2",
                  "selfTime": "14969",
                  "color": "#718096"
                },
                {
                  "id": "181",
                  "children": [
                    {
                      "id": "182",
                      "children": [
                        {
                          "id": "183",
                          "children": [],
                          "methodName": "getSquareAt",
                          "className": "nl.tudelft.jpacman.board.Square",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "Retrieves the square adjacent to the current square in a given direction.",
                          "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.board.Square",
                          "time": "7164",
                          "value": "7164",
                          "percent": "0.0",
                          "selfTime": "4923",
                          "color": "#3182CE"
                        },
                        {
                          "id": "184",
                          "children": [],
                          "methodName": "values",
                          "className": "nl.tudelft.jpacman.board.Direction",
                          "visibility": "",
                          "label": "nl.tudelft.jpacman.board.Direction.values()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "",
                          "layer": "",
                          "returns": "",
                          "time": "1923",
                          "value": "1923",
                          "percent": "0.0",
                          "selfTime": "1249",
                          "color": "#3182CE"
                        },
                        {
                          "id": "185",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Wall",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Wall.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return false;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "1051",
                          "value": "1051",
                          "percent": "0.0",
                          "selfTime": "1051",
                          "color": "#3182CE"
                        },
                        {
                          "id": "186",
                          "children": [],
                          "methodName": "isAccessibleTo",
                          "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
                          "packageName": "nl.tudelft.jpacman.board",
                          "description": "",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
                          "layer": "",
                          "returns": "",
                          "time": "674",
                          "value": "674",
                          "percent": "0.0",
                          "selfTime": "674",
                          "color": "#3182CE"
                        }
                      ],
                      "methodName": "addNewTargets",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Adds new targets to the list of targets for a ghost in the game.",
                      "reason": "This method is responsible for expanding the list of potential targets for a ghost during its pathfinding algorithm.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "private static void addNewTargets(nl.tudelft.jpacman.board.Unit traveller, java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets, java.util.Set<nl.tudelft.jpacman.board.Square> visited, nl.tudelft.jpacman.npc.ghost.Navigation.Node node, nl.tudelft.jpacman.board.Square square) {\r\n    for (nl.tudelft.jpacman.board.Direction direction : nl.tudelft.jpacman.board.Direction.values()) {\r\n        nl.tudelft.jpacman.board.Square target = square.getSquareAt(direction);\r\n        if ((!visited.contains(target)) && ((traveller == null) || target.isAccessibleTo(traveller))) {\r\n            targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(direction, target, node));\r\n        }\r\n    }\r\n}",
                      "layer": "Logic",
                      "returns": "void",
                      "time": "25623",
                      "value": "25623",
                      "percent": "0.1",
                      "selfTime": "10451",
                      "color": "#718096"
                    },
                    {
                      "id": "187",
                      "children": [],
                      "methodName": "getSquare",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getSquare()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Retrieves the square associated with a node.",
                      "reason": "This method provides access to the square associated with a node, which is part of the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The square for this node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Square getSquare() {\r\n    return this.square;\r\n}",
                      "layer": "Logic",
                      "returns": "A nl.tudelft.jpacman.board.Square object representing the square associated with the node.",
                      "time": "617",
                      "value": "617",
                      "percent": "0.0",
                      "selfTime": "617",
                      "color": "#718096"
                    },
                    {
                      "id": "188",
                      "children": [
                        {
                          "id": "189",
                          "children": [
                            {
                              "id": "190",
                              "children": [
                                {
                                  "id": "191",
                                  "children": [
                                    {
                                      "id": "192",
                                      "children": [
                                        {
                                          "id": "193",
                                          "children": [
                                            {
                                              "id": "194",
                                              "children": [
                                                {
                                                  "id": "195",
                                                  "children": [
                                                    {
                                                      "id": "196",
                                                      "children": [
                                                        {
                                                          "id": "197",
                                                          "children": [
                                                            {
                                                              "id": "198",
                                                              "children": [
                                                                {
                                                                  "id": "199",
                                                                  "children": [
                                                                    {
                                                                      "id": "200",
                                                                      "children": [
                                                                        {
                                                                          "id": "201",
                                                                          "children": [
                                                                            {
                                                                              "id": "202",
                                                                              "children": [
                                                                                {
                                                                                  "id": "203",
                                                                                  "children": [
                                                                                    {
                                                                                      "id": "204",
                                                                                      "children": [
                                                                                        {
                                                                                          "id": "205",
                                                                                          "children": [
                                                                                            {
                                                                                              "id": "206",
                                                                                              "children": [
                                                                                                {
                                                                                                  "id": "207",
                                                                                                  "children": [
                                                                                                    {
                                                                                                      "id": "208",
                                                                                                      "children": [
                                                                                                        {
                                                                                                          "id": "209",
                                                                                                          "children": [],
                                                                                                          "methodName": "getPath",
                                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                          "visibility": "private",
                                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                          "detailedBehavior": "",
                                                                                                          "flowRepresentation": "",
                                                                                                          "briefSummary": "",
                                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                          "layer": "Logic",
                                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                          "time": "1",
                                                                                                          "value": "1",
                                                                                                          "percent": "0.0",
                                                                                                          "selfTime": "1",
                                                                                                          "color": "#718096"
                                                                                                        }
                                                                                                      ],
                                                                                                      "methodName": "getPath",
                                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                      "visibility": "private",
                                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                      "detailedBehavior": "",
                                                                                                      "flowRepresentation": "",
                                                                                                      "briefSummary": "",
                                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                      "layer": "Logic",
                                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                      "time": "3",
                                                                                                      "value": "3",
                                                                                                      "percent": "0.0",
                                                                                                      "selfTime": "1",
                                                                                                      "color": "#718096"
                                                                                                    }
                                                                                                  ],
                                                                                                  "methodName": "getPath",
                                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                                  "visibility": "private",
                                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                                  "detailedBehavior": "",
                                                                                                  "flowRepresentation": "",
                                                                                                  "briefSummary": "",
                                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                                  "layer": "Logic",
                                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                                  "time": "8",
                                                                                                  "value": "8",
                                                                                                  "percent": "0.0",
                                                                                                  "selfTime": "3",
                                                                                                  "color": "#718096"
                                                                                                }
                                                                                              ],
                                                                                              "methodName": "getPath",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                              "time": "13",
                                                                                              "value": "13",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "2",
                                                                                              "color": "#718096"
                                                                                            },
                                                                                            {
                                                                                              "id": "210",
                                                                                              "children": [],
                                                                                              "methodName": "getDirection",
                                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                              "visibility": "private",
                                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                              "detailedBehavior": "",
                                                                                              "flowRepresentation": "",
                                                                                              "briefSummary": "",
                                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                              "layer": "Logic",
                                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                                              "time": "2",
                                                                                              "value": "2",
                                                                                              "percent": "0.0",
                                                                                              "selfTime": "2",
                                                                                              "color": "#718096"
                                                                                            }
                                                                                          ],
                                                                                          "methodName": "getPath",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                          "time": "21",
                                                                                          "value": "21",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "6",
                                                                                          "color": "#718096"
                                                                                        },
                                                                                        {
                                                                                          "id": "211",
                                                                                          "children": [],
                                                                                          "methodName": "getDirection",
                                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                          "visibility": "private",
                                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                          "detailedBehavior": "",
                                                                                          "flowRepresentation": "",
                                                                                          "briefSummary": "",
                                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                          "layer": "Logic",
                                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                                          "time": "3",
                                                                                          "value": "3",
                                                                                          "percent": "0.0",
                                                                                          "selfTime": "3",
                                                                                          "color": "#718096"
                                                                                        }
                                                                                      ],
                                                                                      "methodName": "getPath",
                                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                      "visibility": "private",
                                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                      "detailedBehavior": "",
                                                                                      "flowRepresentation": "",
                                                                                      "briefSummary": "",
                                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                      "layer": "Logic",
                                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                      "time": "36",
                                                                                      "value": "36",
                                                                                      "percent": "0.0",
                                                                                      "selfTime": "10",
                                                                                      "color": "#718096"
                                                                                    }
                                                                                  ],
                                                                                  "methodName": "getPath",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                                  "time": "63",
                                                                                  "value": "63",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "20",
                                                                                  "color": "#718096"
                                                                                },
                                                                                {
                                                                                  "id": "212",
                                                                                  "children": [],
                                                                                  "methodName": "getDirection",
                                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                                  "visibility": "private",
                                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                                  "detailedBehavior": "",
                                                                                  "flowRepresentation": "",
                                                                                  "briefSummary": "",
                                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                                  "layer": "Logic",
                                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                                  "time": "2",
                                                                                  "value": "2",
                                                                                  "percent": "0.0",
                                                                                  "selfTime": "2",
                                                                                  "color": "#718096"
                                                                                }
                                                                              ],
                                                                              "methodName": "getPath",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                              "time": "92",
                                                                              "value": "92",
                                                                              "percent": "0.0",
                                                                              "selfTime": "21",
                                                                              "color": "#718096"
                                                                            },
                                                                            {
                                                                              "id": "213",
                                                                              "children": [],
                                                                              "methodName": "getDirection",
                                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                              "visibility": "private",
                                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                              "description": "Returns the current direction of a ghost in the game.",
                                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                              "detailedBehavior": "",
                                                                              "flowRepresentation": "",
                                                                              "briefSummary": "",
                                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                              "layer": "Logic",
                                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                                              "time": "2",
                                                                              "value": "2",
                                                                              "percent": "0.0",
                                                                              "selfTime": "2",
                                                                              "color": "#718096"
                                                                            }
                                                                          ],
                                                                          "methodName": "getPath",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                          "time": "123",
                                                                          "value": "123",
                                                                          "percent": "0.0",
                                                                          "selfTime": "23",
                                                                          "color": "#718096"
                                                                        },
                                                                        {
                                                                          "id": "214",
                                                                          "children": [],
                                                                          "methodName": "getDirection",
                                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                          "visibility": "private",
                                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                          "description": "Returns the current direction of a ghost in the game.",
                                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                          "detailedBehavior": "",
                                                                          "flowRepresentation": "",
                                                                          "briefSummary": "",
                                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                          "layer": "Logic",
                                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                                          "time": "8",
                                                                          "value": "8",
                                                                          "percent": "0.0",
                                                                          "selfTime": "8",
                                                                          "color": "#718096"
                                                                        }
                                                                      ],
                                                                      "methodName": "getPath",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                      "time": "158",
                                                                      "value": "158",
                                                                      "percent": "0.0",
                                                                      "selfTime": "23",
                                                                      "color": "#718096"
                                                                    },
                                                                    {
                                                                      "id": "215",
                                                                      "children": [],
                                                                      "methodName": "getDirection",
                                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                      "visibility": "private",
                                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                      "description": "Returns the current direction of a ghost in the game.",
                                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                      "detailedBehavior": "",
                                                                      "flowRepresentation": "",
                                                                      "briefSummary": "",
                                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                      "layer": "Logic",
                                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                                      "time": "6",
                                                                      "value": "6",
                                                                      "percent": "0.0",
                                                                      "selfTime": "6",
                                                                      "color": "#718096"
                                                                    }
                                                                  ],
                                                                  "methodName": "getPath",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                                  "time": "191",
                                                                  "value": "191",
                                                                  "percent": "0.0",
                                                                  "selfTime": "22",
                                                                  "color": "#718096"
                                                                },
                                                                {
                                                                  "id": "216",
                                                                  "children": [],
                                                                  "methodName": "getDirection",
                                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                                  "description": "Returns the current direction of a ghost in the game.",
                                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                                  "time": "3",
                                                                  "value": "3",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#718096"
                                                                }
                                                              ],
                                                              "methodName": "getPath",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                              "time": "224",
                                                              "value": "224",
                                                              "percent": "0.0",
                                                              "selfTime": "20",
                                                              "color": "#718096"
                                                            },
                                                            {
                                                              "id": "217",
                                                              "children": [],
                                                              "methodName": "getDirection",
                                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                              "description": "Returns the current direction of a ghost in the game.",
                                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A Direction object representing the current direction of the ghost.",
                                                              "time": "3",
                                                              "value": "3",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#718096"
                                                            }
                                                          ],
                                                          "methodName": "getPath",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                          "time": "248",
                                                          "value": "248",
                                                          "percent": "0.0",
                                                          "selfTime": "15",
                                                          "color": "#718096"
                                                        },
                                                        {
                                                          "id": "218",
                                                          "children": [],
                                                          "methodName": "getDirection",
                                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                          "description": "Returns the current direction of a ghost in the game.",
                                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A Direction object representing the current direction of the ghost.",
                                                          "time": "5",
                                                          "value": "5",
                                                          "percent": "0.0",
                                                          "selfTime": "5",
                                                          "color": "#718096"
                                                        }
                                                      ],
                                                      "methodName": "getPath",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                      "time": "277",
                                                      "value": "277",
                                                      "percent": "0.0",
                                                      "selfTime": "18",
                                                      "color": "#718096"
                                                    },
                                                    {
                                                      "id": "219",
                                                      "children": [],
                                                      "methodName": "getDirection",
                                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                      "description": "Returns the current direction of a ghost in the game.",
                                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "A Direction object representing the current direction of the ghost.",
                                                      "time": "4",
                                                      "value": "4",
                                                      "percent": "0.0",
                                                      "selfTime": "4",
                                                      "color": "#718096"
                                                    }
                                                  ],
                                                  "methodName": "getPath",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                                  "time": "311",
                                                  "value": "311",
                                                  "percent": "0.0",
                                                  "selfTime": "22",
                                                  "color": "#718096"
                                                },
                                                {
                                                  "id": "220",
                                                  "children": [],
                                                  "methodName": "getDirection",
                                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                                  "visibility": "private",
                                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                                  "description": "Returns the current direction of a ghost in the game.",
                                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "A Direction object representing the current direction of the ghost.",
                                                  "time": "1",
                                                  "value": "1",
                                                  "percent": "0.0",
                                                  "selfTime": "1",
                                                  "color": "#718096"
                                                }
                                              ],
                                              "methodName": "getPath",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                              "time": "342",
                                              "value": "342",
                                              "percent": "0.0",
                                              "selfTime": "26",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "221",
                                              "children": [],
                                              "methodName": "getDirection",
                                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                              "visibility": "private",
                                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Returns the current direction of a ghost in the game.",
                                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                              "layer": "Logic",
                                              "returns": "A Direction object representing the current direction of the ghost.",
                                              "time": "7",
                                              "value": "7",
                                              "percent": "0.0",
                                              "selfTime": "7",
                                              "color": "#718096"
                                            }
                                          ],
                                          "methodName": "getPath",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                          "time": "367",
                                          "value": "367",
                                          "percent": "0.0",
                                          "selfTime": "14",
                                          "color": "#718096"
                                        },
                                        {
                                          "id": "222",
                                          "children": [],
                                          "methodName": "getDirection",
                                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                          "visibility": "private",
                                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                                          "description": "Returns the current direction of a ghost in the game.",
                                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                          "layer": "Logic",
                                          "returns": "A Direction object representing the current direction of the ghost.",
                                          "time": "6",
                                          "value": "6",
                                          "percent": "0.0",
                                          "selfTime": "6",
                                          "color": "#718096"
                                        }
                                      ],
                                      "methodName": "getPath",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                      "time": "400",
                                      "value": "400",
                                      "percent": "0.0",
                                      "selfTime": "16",
                                      "color": "#718096"
                                    },
                                    {
                                      "id": "223",
                                      "children": [],
                                      "methodName": "getDirection",
                                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                                      "description": "Returns the current direction of a ghost in the game.",
                                      "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                      "layer": "Logic",
                                      "returns": "A Direction object representing the current direction of the ghost.",
                                      "time": "3",
                                      "value": "3",
                                      "percent": "0.0",
                                      "selfTime": "3",
                                      "color": "#718096"
                                    }
                                  ],
                                  "methodName": "getPath",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                                  "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A List of Direction objects representing the path from the root node to the current node.",
                                  "time": "429",
                                  "value": "429",
                                  "percent": "0.0",
                                  "selfTime": "18",
                                  "color": "#718096"
                                },
                                {
                                  "id": "224",
                                  "children": [],
                                  "methodName": "getDirection",
                                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                                  "description": "Returns the current direction of a ghost in the game.",
                                  "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                                  "layer": "Logic",
                                  "returns": "A Direction object representing the current direction of the ghost.",
                                  "time": "5",
                                  "value": "5",
                                  "percent": "0.0",
                                  "selfTime": "5",
                                  "color": "#718096"
                                }
                              ],
                              "methodName": "getPath",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                              "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                              "layer": "Logic",
                              "returns": "A List of Direction objects representing the path from the root node to the current node.",
                              "time": "456",
                              "value": "456",
                              "percent": "0.0",
                              "selfTime": "19",
                              "color": "#718096"
                            },
                            {
                              "id": "225",
                              "children": [],
                              "methodName": "getDirection",
                              "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                              "description": "Returns the current direction of a ghost in the game.",
                              "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                              "layer": "Logic",
                              "returns": "A Direction object representing the current direction of the ghost.",
                              "time": "3",
                              "value": "3",
                              "percent": "0.0",
                              "selfTime": "3",
                              "color": "#718096"
                            }
                          ],
                          "methodName": "getPath",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                          "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                          "layer": "Logic",
                          "returns": "A List of Direction objects representing the path from the root node to the current node.",
                          "time": "481",
                          "value": "481",
                          "percent": "0.0",
                          "selfTime": "16",
                          "color": "#718096"
                        },
                        {
                          "id": "226",
                          "children": [],
                          "methodName": "getDirection",
                          "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getDirection()",
                          "packageName": "nl.tudelft.jpacman.npc.ghost",
                          "description": "Returns the current direction of a ghost in the game.",
                          "reason": "This method is necessary for determining the movement direction of a ghost in the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return The direction for this node, or <code>null</code> if this\r\nnode is a root node.\r\n */\r\nprivate nl.tudelft.jpacman.board.Direction getDirection() {\r\n    return this.direction;\r\n}",
                          "layer": "Logic",
                          "returns": "A Direction object representing the current direction of the ghost.",
                          "time": "2",
                          "value": "2",
                          "percent": "0.0",
                          "selfTime": "2",
                          "color": "#718096"
                        }
                      ],
                      "methodName": "getPath",
                      "className": "nl.tudelft.jpacman.npc.ghost.Navigation$Node",
                      "visibility": "private",
                      "label": "nl.tudelft.jpacman.npc.ghost.Navigation$Node.getPath()",
                      "packageName": "nl.tudelft.jpacman.npc.ghost",
                      "description": "Returns the list of directions from the root node to the current node in a navigation tree.",
                      "reason": "This method is used to retrieve the path taken by a ghost in the game, which involves navigating through nodes in a tree structure. It does not interact with the user interface or handle data access directly, making it suitable for the Logic layer.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the list of values from the root of the tree to this node.\r\n *\r\n * @return The list of values from the root of the tree to this node.\r\n */\r\nprivate java.util.List<nl.tudelft.jpacman.board.Direction> getPath() {\r\n    if (this.parent == null) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = this.parent.getPath();\r\n    path.add(this.getDirection());\r\n    return path;\r\n}",
                      "layer": "Logic",
                      "returns": "A List of Direction objects representing the path from the root node to the current node.",
                      "time": "508",
                      "value": "508",
                      "percent": "0.0",
                      "selfTime": "20",
                      "color": "#718096"
                    }
                  ],
                  "methodName": "shortestPath",
                  "className": "nl.tudelft.jpacman.npc.ghost.Navigation",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath()",
                  "packageName": "nl.tudelft.jpacman.npc.ghost",
                  "description": "Calculates the shortest path from one square to another on a board for a given unit.",
                  "reason": "This method is essential for determining how a ghost or other unit should move on the board, which falls under the logic layer as it involves game rules and behavior.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Calculates the shortest path. This is done by BFS. This search ensures\r\n * the traveller is allowed to occupy the squares on the way, or returns the\r\n * shortest path to the square regardless of terrain if no traveller is\r\n * specified.\r\n *\r\n * @param from\r\n * \t\tThe starting square.\r\n * @param to\r\n * \t\tThe destination.\r\n * @param traveller\r\n * \t\tThe traveller attempting to reach the destination. If\r\n * \t\ttraveller is set to <code>null</code>, this method will ignore\r\n * \t\tterrain and find the shortest path whether it can actually be\r\n * \t\treached or not.\r\n * @return The shortest path to the destination or <code>null</code> if no\r\nsuch path could be found. When the destination is the current\r\nsquare, an empty list is returned.\r\n */\r\npublic static java.util.List<nl.tudelft.jpacman.board.Direction> shortestPath(nl.tudelft.jpacman.board.Square from, nl.tudelft.jpacman.board.Square to, nl.tudelft.jpacman.board.Unit traveller) {\r\n    if (from.equals(to)) {\r\n        return new java.util.ArrayList<nl.tudelft.jpacman.board.Direction>();\r\n    }\r\n    java.util.List<nl.tudelft.jpacman.npc.ghost.Navigation.Node> targets = new java.util.ArrayList<nl.tudelft.jpacman.npc.ghost.Navigation.Node>();\r\n    java.util.Set<nl.tudelft.jpacman.board.Square> visited = new java.util.HashSet<nl.tudelft.jpacman.board.Square>();\r\n    targets.add(new nl.tudelft.jpacman.npc.ghost.Navigation.Node(null, from, null));\r\n    while (!targets.isEmpty()) {\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.Node node = targets.remove(0);\r\n        nl.tudelft.jpacman.board.Square square = node.getSquare();\r\n        if (square.equals(to)) {\r\n            return node.getPath();\r\n        }\r\n        visited.add(square);\r\n        nl.tudelft.jpacman.npc.ghost.Navigation.addNewTargets(traveller, targets, visited, node, square);\r\n    } \r\n    return null;\r\n}",
                  "layer": "Logic",
                  "returns": "A list of directions representing the shortest path from 'from' to 'to'. Returns an empty list if the start and end squares are the same.",
                  "time": "34868",
                  "value": "34868",
                  "percent": "0.2",
                  "selfTime": "4383",
                  "color": "#718096"
                },
                {
                  "id": "227",
                  "children": [],
                  "methodName": "getSquare",
                  "className": "nl.tudelft.jpacman.board.Unit",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Retrieves the square that a unit is currently occupying.",
                  "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
                  "time": "49",
                  "value": "49",
                  "percent": "0.0",
                  "selfTime": "49",
                  "color": "#3182CE"
                }
              ],
              "methodName": "nextAiMove",
              "className": "nl.tudelft.jpacman.npc.ghost.Blinky",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.npc.ghost.Blinky.nextAiMove()",
              "packageName": "nl.tudelft.jpacman.npc.ghost",
              "description": "Calculates the next AI move for Blinky in a Pacman game.",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * {@inheritDoc }\r\n *\r\n * <p>\r\n * When the ghosts are not patrolling in their home corners (Blinky:\r\n * top-right, Pinky: top-left, Inky: bottom-right, Clyde: bottom-left),\r\n * Blinky will attempt to shorten the distance between Pac-Man and himself.\r\n * If he has to choose between shortening the horizontal or vertical\r\n * distance, he will choose to shorten whichever is greatest. For example,\r\n * if Pac-Man is four grid spaces to the left, and seven grid spaces above\r\n * Blinky, he'll try to move up towards Pac-Man before he moves to the left.\r\n * </p>\r\n */\r\n@java.lang.Override\r\npublic java.util.Optional<nl.tudelft.jpacman.board.Direction> nextAiMove() {\r\n    assert this.hasSquare();\r\n    // TODO Blinky should patrol his corner every once in a while\r\n    // TODO Implement his actual behaviour instead of simply chasing.\r\n    nl.tudelft.jpacman.board.Unit nearest = nl.tudelft.jpacman.npc.ghost.Navigation.findNearest(nl.tudelft.jpacman.level.Player.class, this.getSquare());\r\n    if (nearest == null) {\r\n        return java.util.Optional.empty();\r\n    }\r\n    assert nearest.hasSquare();\r\n    nl.tudelft.jpacman.board.Square target = nearest.getSquare();\r\n    java.util.List<nl.tudelft.jpacman.board.Direction> path = nl.tudelft.jpacman.npc.ghost.Navigation.shortestPath(this.getSquare(), target, this);\r\n    if ((path != null) && (!path.isEmpty())) {\r\n        return java.util.Optional.ofNullable(path.get(0));\r\n    }\r\n    return java.util.Optional.empty();\r\n}",
              "layer": "",
              "returns": "An Optional containing the next direction for Blinky's AI move, or an empty Optional if no valid move can be determined.",
              "time": "82400",
              "value": "82400",
              "percent": "0.4",
              "selfTime": "217",
              "color": "#718096"
            }
          ],
          "methodName": "nextMove",
          "className": "nl.tudelft.jpacman.npc.Ghost",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.npc.Ghost.nextMove()",
          "packageName": "nl.tudelft.jpacman.npc",
          "description": "Determines the next move for a ghost in the game.",
          "reason": "This method calculates the next AI move for a ghost based on its current state and available moves. It uses another method to determine the AI move and falls back to random movement if no valid move is found.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Calculates the next move for this unit and returns the direction to move\r\n * in.\r\n * <p>\r\n * Precondition: The NPC occupies a square (hasSquare() holds).\r\n *\r\n * @return The direction to move in, or <code>null</code> if no move could\r\nbe devised.\r\n */\r\npublic nl.tudelft.jpacman.board.Direction nextMove() {\r\n    return this.nextAiMove().orElseGet(this::randomMove);\r\n}",
          "layer": "Logic",
          "returns": "An Optional<Direction> representing the next direction the ghost should move, or an empty Optional if no valid move is possible.",
          "time": "18978271",
          "value": "18978271",
          "percent": "86.4",
          "selfTime": "1092",
          "color": "#D53F8C"
        },
        {
          "id": "228",
          "children": [
            {
              "id": "229",
              "children": [
                {
                  "id": "230",
                  "children": [
                    {
                      "id": "231",
                      "children": [],
                      "methodName": "getOccupants",
                      "className": "nl.tudelft.jpacman.board.Square",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the list of units occupying a square in the game board.",
                      "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
                      "layer": "Logic",
                      "returns": "An immutable list of units occupying the square.",
                      "time": "16034",
                      "value": "16034",
                      "percent": "0.1",
                      "selfTime": "10121",
                      "color": "#3182CE"
                    },
                    {
                      "id": "232",
                      "children": [],
                      "methodName": "getHeight",
                      "className": "nl.tudelft.jpacman.board.Board",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Board.getHeight()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Returns the height of the board.",
                      "reason": "This method provides necessary information about the board's dimensions for other game logic operations.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the number of rows.\r\n *\r\n * @return The height of this board.\r\n */\r\npublic int getHeight() {\r\n    return this.board[0].length;\r\n}",
                      "layer": "Logic",
                      "returns": "An integer representing the height of the board.",
                      "time": "5063",
                      "value": "5063",
                      "percent": "0.0",
                      "selfTime": "5063",
                      "color": "#3182CE"
                    },
                    {
                      "id": "233",
                      "children": [],
                      "methodName": "squareAt",
                      "className": "nl.tudelft.jpacman.board.Board",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Board.squareAt()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Retrieves the square at a given position on the board.",
                      "reason": "This method is part of the logic layer as it deals with the game's internal state and rules.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the square at the given <code>x,y</code> position.\r\n *\r\n * Precondition: The <code>(x, y)</code> coordinates are within the\r\n * width and height of the board.\r\n *\r\n * @param x\r\n * \t\tThe <code>x</code> position (column) of the requested square.\r\n * @param y\r\n * \t\tThe <code>y</code> position (row) of the requested square.\r\n * @return The square at the given <code>x,y</code> position (never null).\r\n */\r\npublic nl.tudelft.jpacman.board.Square squareAt(int x, int y) {\r\n    assert this.withinBorders(x, y);\r\n    nl.tudelft.jpacman.board.Square result = this.board[x][y];\r\n    assert result != null : \"Follows from invariant.\";\r\n    return result;\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.board.Square",
                      "time": "4574",
                      "value": "4574",
                      "percent": "0.0",
                      "selfTime": "4574",
                      "color": "#3182CE"
                    },
                    {
                      "id": "234",
                      "children": [],
                      "methodName": "getWidth",
                      "className": "nl.tudelft.jpacman.board.Board",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.board.Board.getWidth()",
                      "packageName": "nl.tudelft.jpacman.board",
                      "description": "Returns the width of the board.",
                      "reason": "This method provides essential information about the game's board dimensions, which is crucial for game logic operations.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the number of columns.\r\n *\r\n * @return The width of this board.\r\n */\r\npublic int getWidth() {\r\n    return this.board.length;\r\n}",
                      "layer": "Logic",
                      "returns": "An integer representing the width of the board.",
                      "time": "248",
                      "value": "248",
                      "percent": "0.0",
                      "selfTime": "248",
                      "color": "#3182CE"
                    },
                    {
                      "id": "235",
                      "children": [],
                      "methodName": "getBoard",
                      "className": "nl.tudelft.jpacman.level.Level",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.level.Level.getBoard()",
                      "packageName": "nl.tudelft.jpacman.level",
                      "description": "Retrieves the board from the level.",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns the board of this level.\r\n *\r\n * @return The board of this level.\r\n */\r\npublic nl.tudelft.jpacman.board.Board getBoard() {\r\n    return this.board;\r\n}",
                      "layer": "Logic",
                      "returns": "",
                      "time": "81",
                      "value": "81",
                      "percent": "0.0",
                      "selfTime": "81",
                      "color": "#38A169"
                    }
                  ],
                  "methodName": "remainingPellets",
                  "className": "nl.tudelft.jpacman.level.Level",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.level.Level.remainingPellets()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "Counts the remaining pellets on a board.",
                  "reason": "This method is necessary to determine if the game has ended, as it checks for the presence of pellets which are the primary objective in Pacman.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Counts the pellets remaining on the board.\r\n *\r\n * @return The amount of pellets remaining on the board.\r\n */\r\npublic int remainingPellets() {\r\n    nl.tudelft.jpacman.board.Board board = this.getBoard();\r\n    int pellets = 0;\r\n    for (int x = 0; x < board.getWidth(); x++) {\r\n        for (int y = 0; y < board.getHeight(); y++) {\r\n            for (nl.tudelft.jpacman.board.Unit unit : board.squareAt(x, y).getOccupants()) {\r\n                if (unit instanceof nl.tudelft.jpacman.level.Pellet) {\r\n                    pellets++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert pellets >= 0;\r\n    return pellets;\r\n}",
                  "layer": "Logic",
                  "returns": "The number of remaining pellets as an integer.",
                  "time": "75399",
                  "value": "75399",
                  "percent": "0.3",
                  "selfTime": "34453",
                  "color": "#38A169"
                },
                {
                  "id": "236",
                  "children": [
                    {
                      "id": "237",
                      "children": [],
                      "methodName": "isHit",
                      "className": "nl.tudelft.jpacman.level.Player",
                      "visibility": "",
                      "label": "nl.tudelft.jpacman.level.Player.isHit()",
                      "packageName": "nl.tudelft.jpacman.level",
                      "description": "",
                      "reason": "",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "",
                      "layer": "",
                      "returns": "",
                      "time": "26",
                      "value": "26",
                      "percent": "0.0",
                      "selfTime": "26",
                      "color": "#38A169"
                    }
                  ],
                  "methodName": "isAnyPlayerHit",
                  "className": "nl.tudelft.jpacman.level.Level",
                  "visibility": "",
                  "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerHit()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "",
                  "reason": "",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "",
                  "layer": "",
                  "returns": "",
                  "time": "335",
                  "value": "335",
                  "percent": "0.0",
                  "selfTime": "178",
                  "color": "#38A169"
                },
                {
                  "id": "238",
                  "children": [
                    {
                      "id": "239",
                      "children": [],
                      "methodName": "isAlive",
                      "className": "nl.tudelft.jpacman.level.Player",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.level.Player.isAlive()",
                      "packageName": "nl.tudelft.jpacman.level",
                      "description": "Checks if the player is alive.",
                      "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
                      "layer": "Logic",
                      "returns": "A boolean indicating whether the player is alive.",
                      "time": "21",
                      "value": "21",
                      "percent": "0.0",
                      "selfTime": "21",
                      "color": "#38A169"
                    }
                  ],
                  "methodName": "isAnyPlayerAlive",
                  "className": "nl.tudelft.jpacman.level.Level",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.level.Level.isAnyPlayerAlive()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "Checks if any player in the game is alive.",
                  "reason": "This method is used to determine if the game should continue running or if all players have been defeated.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns <code>true</code> iff at least one of the players in this level\r\n * is alive.\r\n *\r\n * @return <code>true</code> if at least one of the registered players is\r\nalive.\r\n */\r\npublic boolean isAnyPlayerAlive() {\r\n    for (nl.tudelft.jpacman.level.Player player : this.players) {\r\n        if (player.isAlive()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
                  "layer": "Logic",
                  "returns": "A boolean indicating whether any player is alive.",
                  "time": "318",
                  "value": "318",
                  "percent": "0.0",
                  "selfTime": "150",
                  "color": "#38A169"
                }
              ],
              "methodName": "updateObservers",
              "className": "nl.tudelft.jpacman.level.Level",
              "visibility": "private",
              "label": "nl.tudelft.jpacman.level.Level.updateObservers()",
              "packageName": "nl.tudelft.jpacman.level",
              "description": "Notifies observers about the game's outcome based on player status and remaining pellets.",
              "reason": "This method is responsible for notifying observers about the game's outcome, which is a part of the application logic.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Updates the observers about the state of this level.\r\n */\r\nprivate void updateObservers() {\r\n    java.lang.Iterable<nl.tudelft.jpacman.level.Level.LevelObserver> observers = new java.util.ArrayList<nl.tudelft.jpacman.level.Level.LevelObserver>(this.observers);\r\n    if (!this.isAnyPlayerAlive()) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelLost();\r\n        }\r\n    }\r\n    if (this.remainingPellets() == 0) {\r\n        for (nl.tudelft.jpacman.level.Level.LevelObserver observer : observers) {\r\n            observer.levelWon();\r\n        }\r\n    }\r\n}",
              "layer": "Logic",
              "returns": "void",
              "time": "77174",
              "value": "77174",
              "percent": "0.4",
              "selfTime": "239",
              "color": "#38A169"
            },
            {
              "id": "240",
              "children": [
                {
                  "id": "241",
                  "children": [],
                  "methodName": "remove",
                  "className": "nl.tudelft.jpacman.board.Square",
                  "visibility": "default",
                  "label": "nl.tudelft.jpacman.board.Square.remove()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Removes an occupant from the square.",
                  "reason": "This method ensures that an occupant can be removed from a square, which is essential for managing the state of the game board.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Removes the unit from this square if it was present.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to be removed from this square.\r\n */\r\nvoid remove(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    this.occupants.remove(occupant);\r\n}",
                  "layer": "Logic",
                  "returns": "void",
                  "time": "253",
                  "value": "253",
                  "percent": "0.0",
                  "selfTime": "89",
                  "color": "#3182CE"
                },
                {
                  "id": "242",
                  "children": [],
                  "methodName": "put",
                  "className": "nl.tudelft.jpacman.board.Square",
                  "visibility": "default",
                  "label": "nl.tudelft.jpacman.board.Square.put()",
                  "packageName": "nl.tudelft.jpacman.board",
                  "description": "Adds an occupant to the square.",
                  "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                  "layer": "Logic",
                  "returns": "void",
                  "time": "92",
                  "value": "92",
                  "percent": "0.0",
                  "selfTime": "49",
                  "color": "#3182CE"
                }
              ],
              "methodName": "occupy",
              "className": "nl.tudelft.jpacman.board.Unit",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.Unit.occupy()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "Moves the unit to a new square.",
              "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
              "layer": "Logic",
              "returns": "Void",
              "time": "519",
              "value": "519",
              "percent": "0.0",
              "selfTime": "174",
              "color": "#3182CE"
            },
            {
              "id": "243",
              "children": [],
              "methodName": "isInProgress",
              "className": "nl.tudelft.jpacman.level.Level",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.level.Level.isInProgress()",
              "packageName": "nl.tudelft.jpacman.level",
              "description": "Checks if the level is currently in progress.",
              "reason": "This method provides a way to check the current state of the game level without modifying any data.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Returns whether this level is in progress, i.e. whether moves can be made\r\n * on the board.\r\n *\r\n * @return <code>true</code> iff this level is in progress.\r\n */\r\npublic boolean isInProgress() {\r\n    return this.inProgress;\r\n}",
              "layer": "Logic",
              "returns": "A boolean indicating whether the level is currently in progress.",
              "time": "163",
              "value": "163",
              "percent": "0.0",
              "selfTime": "163",
              "color": "#38A169"
            },
            {
              "id": "244",
              "children": [],
              "methodName": "getOccupants",
              "className": "nl.tudelft.jpacman.board.Square",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.Square.getOccupants()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "Retrieves the list of units occupying a square in the game board.",
              "reason": "This method is necessary for determining the state of the game board, which is a core part of the game logic.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Returns an immutable list of units occupying this square, in the order in\r\n * which they occupied this square (i.e. oldest first.)\r\n *\r\n * @return An immutable list of units occupying this square, in the order in\r\nwhich they occupied this square (i.e. oldest first.)\r\n */\r\npublic java.util.List<nl.tudelft.jpacman.board.Unit> getOccupants() {\r\n    return com.google.common.collect.ImmutableList.copyOf(this.occupants);\r\n}",
              "layer": "Logic",
              "returns": "An immutable list of units occupying the square.",
              "time": "52",
              "value": "52",
              "percent": "0.0",
              "selfTime": "32",
              "color": "#3182CE"
            },
            {
              "id": "245",
              "children": [
                {
                  "id": "246",
                  "children": [],
                  "methodName": "ghostColliding",
                  "className": "nl.tudelft.jpacman.level.PlayerCollisions",
                  "visibility": "private",
                  "label": "nl.tudelft.jpacman.level.PlayerCollisions.ghostColliding()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "Handles the logic for when a ghost collides with another unit in the game.",
                  "reason": "This method is part of the game logic, specifically handling collisions between ghosts and other units in the game. It does not interact directly with the user interface or data access, making it a candidate for the Logic layer.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "private void ghostColliding(nl.tudelft.jpacman.npc.Ghost ghost, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (collidedOn instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerVersusGhost(((nl.tudelft.jpacman.level.Player) (collidedOn)), ghost);\r\n    }\r\n}",
                  "layer": "Logic",
                  "returns": "Void.",
                  "time": "8",
                  "value": "8",
                  "percent": "0.0",
                  "selfTime": "8",
                  "color": "#38A169"
                }
              ],
              "methodName": "collide",
              "className": "nl.tudelft.jpacman.level.PlayerCollisions",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.level.PlayerCollisions.collide()",
              "packageName": "nl.tudelft.jpacman.level",
              "description": "Handles the logic for when two units collide in the game. Depending on the type of unit (player, ghost, or pellet), it calls the appropriate collision handling method.",
              "reason": "This method is part of the game logic, handling different types of collisions between units in the game. It delegates to specific collision handling methods based on the type of unit involved.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "@java.lang.Override\r\npublic void collide(nl.tudelft.jpacman.board.Unit mover, nl.tudelft.jpacman.board.Unit collidedOn) {\r\n    if (mover instanceof nl.tudelft.jpacman.level.Player) {\r\n        this.playerColliding(((nl.tudelft.jpacman.level.Player) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.npc.Ghost) {\r\n        this.ghostColliding(((nl.tudelft.jpacman.npc.Ghost) (mover)), collidedOn);\r\n    } else if (mover instanceof nl.tudelft.jpacman.level.Pellet) {\r\n        this.pelletColliding(((nl.tudelft.jpacman.level.Pellet) (mover)), collidedOn);\r\n    }\r\n}",
              "layer": "Logic",
              "returns": "Void.",
              "time": "48",
              "value": "48",
              "percent": "0.0",
              "selfTime": "40",
              "color": "#38A169"
            },
            {
              "id": "247",
              "children": [],
              "methodName": "getSquareAt",
              "className": "nl.tudelft.jpacman.board.Square",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.Square.getSquareAt()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "Retrieves the square adjacent to the current square in a given direction.",
              "reason": "This method is used to navigate through the game board by retrieving squares in different directions.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Returns the square adjacent to this square.\r\n *\r\n * @param direction\r\n * \t\tThe direction of the adjacent square.\r\n * @return The adjacent square in the given direction.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquareAt(nl.tudelft.jpacman.board.Direction direction) {\r\n    return this.neighbours.get(direction);\r\n}",
              "layer": "Logic",
              "returns": "nl.tudelft.jpacman.board.Square",
              "time": "46",
              "value": "46",
              "percent": "0.0",
              "selfTime": "30",
              "color": "#3182CE"
            },
            {
              "id": "248",
              "children": [],
              "methodName": "setDirection",
              "className": "nl.tudelft.jpacman.board.Unit",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.Unit.setDirection()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "Sets the direction of a unit in the game.",
              "reason": "This method is necessary for controlling the movement of units in the game, which falls under the domain logic.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Sets this unit to face the new direction.\r\n *\r\n * @param newDirection\r\n * \t\tThe new direction this unit is facing.\r\n */\r\npublic void setDirection(nl.tudelft.jpacman.board.Direction newDirection) {\r\n    this.direction = newDirection;\r\n}",
              "layer": "Logic",
              "returns": "void",
              "time": "29",
              "value": "29",
              "percent": "0.0",
              "selfTime": "29",
              "color": "#3182CE"
            },
            {
              "id": "249",
              "children": [],
              "methodName": "getSquare",
              "className": "nl.tudelft.jpacman.board.Unit",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.Unit.getSquare()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "Retrieves the square that a unit is currently occupying.",
              "reason": "This method provides access to the current location of a unit on the board, which is essential for determining interactions and movements within the game logic.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Returns the square this unit is currently occupying.\r\n * Precondition: <code>hasSquare()</code>.\r\n *\r\n * @return The square this unit is currently occupying.\r\n */\r\npublic nl.tudelft.jpacman.board.Square getSquare() {\r\n    assert this.invariant();\r\n    assert this.square != null;\r\n    return this.square;\r\n}",
              "layer": "Logic",
              "returns": "nl.tudelft.jpacman.board.Square - The square where the unit is located.",
              "time": "17",
              "value": "17",
              "percent": "0.0",
              "selfTime": "17",
              "color": "#3182CE"
            },
            {
              "id": "250",
              "children": [],
              "methodName": "isAccessibleTo",
              "className": "nl.tudelft.jpacman.board.BoardFactory$Ground",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.board.BoardFactory$Ground.isAccessibleTo()",
              "packageName": "nl.tudelft.jpacman.board",
              "description": "",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "@java.lang.Override\r\npublic boolean isAccessibleTo(nl.tudelft.jpacman.board.Unit unit) {\r\n    return true;\r\n}",
              "layer": "",
              "returns": "",
              "time": "10",
              "value": "10",
              "percent": "0.0",
              "selfTime": "10",
              "color": "#3182CE"
            }
          ],
          "methodName": "move",
          "className": "nl.tudelft.jpacman.level.Level",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.level.Level.move()",
          "packageName": "nl.tudelft.jpacman.level",
          "description": "(no description)",
          "reason": "",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Moves the unit into the given direction if possible and handles all\r\n * collisions.\r\n *\r\n * @param unit\r\n * \t\tThe unit to move.\r\n * @param direction\r\n * \t\tThe direction to move the unit in.\r\n */\r\npublic void move(nl.tudelft.jpacman.board.Unit unit, nl.tudelft.jpacman.board.Direction direction) {\r\n    assert unit != null;\r\n    assert direction != null;\r\n    assert unit.hasSquare();\r\n    if (!this.isInProgress()) {\r\n        return;\r\n    }\r\n    synchronized(this.moveLock) {\r\n        unit.setDirection(direction);\r\n        nl.tudelft.jpacman.board.Square location = unit.getSquare();\r\n        nl.tudelft.jpacman.board.Square destination = location.getSquareAt(direction);\r\n        if (destination.isAccessibleTo(unit)) {\r\n            java.util.List<nl.tudelft.jpacman.board.Unit> occupants = destination.getOccupants();\r\n            unit.occupy(destination);\r\n            for (nl.tudelft.jpacman.board.Unit occupant : occupants) {\r\n                this.collisions.collide(unit, occupant);\r\n            }\r\n        }\r\n        this.updateObservers();\r\n    }\r\n}",
          "layer": "",
          "returns": "",
          "time": "78993",
          "value": "78993",
          "percent": "0.4",
          "selfTime": "764",
          "color": "#38A169"
        },
        {
          "id": "251",
          "children": [],
          "methodName": "getInterval",
          "className": "nl.tudelft.jpacman.npc.Ghost",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.npc.Ghost.getInterval()",
          "packageName": "nl.tudelft.jpacman.npc",
          "description": "Calculates the interval for ghost movement in Pacman.",
          "reason": "This method adjusts the movement speed of ghosts by adding a random variation, which is part of the game logic.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * The time that should be taken between moves.\r\n *\r\n * @return The suggested delay between moves in milliseconds.\r\n */\r\npublic long getInterval() {\r\n    return this.moveInterval + new java.util.Random().nextInt(this.intervalVariation);\r\n}",
          "layer": "Logic",
          "returns": "A long representing the adjusted movement interval for ghosts.",
          "time": "1042",
          "value": "1042",
          "percent": "0.0",
          "selfTime": "119",
          "color": "#D53F8C"
        }
      ],
      "methodName": "run",
      "className": "nl.tudelft.jpacman.level.Level$NpcMoveTask",
      "visibility": "public",
      "label": "nl.tudelft.jpacman.level.Level$NpcMoveTask.run()",
      "packageName": "nl.tudelft.jpacman.level",
      "description": "Moves a non-player character (NPC) in the game according to its next move and schedules itself to run again after a specified interval.",
      "reason": "This method is responsible for updating the position of an NPC in the game and scheduling itself to run again after a certain interval.",
      "detailedBehavior": "",
      "flowRepresentation": "",
      "briefSummary": "",
      "sourceCode": "@java.lang.Override\r\npublic void run() {\r\n    nl.tudelft.jpacman.board.Direction nextMove = this.npc.nextMove();\r\n    if (nextMove != null) {\r\n        this.move(this.npc, nextMove);\r\n    }\r\n    long interval = this.npc.getInterval();\r\n    this.service.schedule(this, interval, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
      "layer": "Logic",
      "returns": "void",
      "time": "19061459",
      "value": "19061459",
      "percent": "86.7",
      "selfTime": "434",
      "color": "#38A169"
    },
    {
      "id": "252",
      "children": [
        {
          "id": "253",
          "children": [
            {
              "id": "254",
              "children": [
                {
                  "id": "255",
                  "children": [],
                  "methodName": "getScore",
                  "className": "nl.tudelft.jpacman.level.Player",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.level.Player.getScore()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "",
                  "reason": "",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Returns the amount of points accumulated by this player.\r\n *\r\n * @return The amount of points accumulated by this player.\r\n */\r\npublic int getScore() {\r\n    return this.score;\r\n}",
                  "layer": "",
                  "returns": "",
                  "time": "478",
                  "value": "478",
                  "percent": "0.0",
                  "selfTime": "478",
                  "color": "#38A169"
                }
              ],
              "methodName": "lambda$static$0",
              "className": "nl.tudelft.jpacman.ui.ScorePanel",
              "visibility": "",
              "label": "nl.tudelft.jpacman.ui.ScorePanel.lambda$static$0()",
              "packageName": "nl.tudelft.jpacman.ui",
              "description": "",
              "reason": "",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "",
              "layer": "",
              "returns": "",
              "time": "142353",
              "value": "142353",
              "percent": "0.6",
              "selfTime": "2980",
              "color": "#E53E3E"
            },
            {
              "id": "256",
              "children": [],
              "methodName": "isAlive",
              "className": "nl.tudelft.jpacman.level.Player",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.level.Player.isAlive()",
              "packageName": "nl.tudelft.jpacman.level",
              "description": "Checks if the player is alive.",
              "reason": "This method provides a way to check the current state of the player without modifying any data or interacting with the user interface.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Returns whether this player is alive or not.\r\n *\r\n * @return <code>true</code> iff the player is alive.\r\n */\r\npublic boolean isAlive() {\r\n    return this.alive;\r\n}",
              "layer": "Logic",
              "returns": "A boolean indicating whether the player is alive.",
              "time": "447",
              "value": "447",
              "percent": "0.0",
              "selfTime": "447",
              "color": "#38A169"
            }
          ],
          "methodName": "refresh",
          "className": "nl.tudelft.jpacman.ui.ScorePanel",
          "visibility": "protected",
          "label": "nl.tudelft.jpacman.ui.ScorePanel.refresh()",
          "packageName": "nl.tudelft.jpacman.ui",
          "description": "Refreshes the score labels on the ScorePanel based on the current scores of players.",
          "reason": "This method updates the score labels on the ScorePanel to reflect the current scores of players.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Refreshes the scores of the players.\r\n */\r\nprotected void refresh() {\r\n    for (java.util.Map.Entry<nl.tudelft.jpacman.level.Player, javax.swing.JLabel> entry : this.scoreLabels.entrySet()) {\r\n        nl.tudelft.jpacman.level.Player player = entry.getKey();\r\n        java.lang.String score = \"\";\r\n        if (!player.isAlive()) {\r\n            score = \"You died. \";\r\n        }\r\n        score += this.scoreFormatter.format(player);\r\n        entry.getValue().setText(score);\r\n    }\r\n}",
          "layer": "UI",
          "returns": "void",
          "time": "175658",
          "value": "175658",
          "percent": "0.8",
          "selfTime": "14891",
          "color": "#E53E3E"
        }
      ],
      "methodName": "nextFrame",
      "className": "nl.tudelft.jpacman.ui.PacManUI",
      "visibility": "private",
      "label": "nl.tudelft.jpacman.ui.PacManUI.nextFrame()",
      "packageName": "nl.tudelft.jpacman.ui",
      "description": "Repaints the board panel and refreshes the score panel in the PacManUI.",
      "reason": "This method is necessary to keep the UI in sync with the game state, ensuring that players see the correct visual representation of the game.",
      "detailedBehavior": "",
      "flowRepresentation": "",
      "briefSummary": "",
      "sourceCode": "/**\r\n * Draws the next frame, i.e. refreshes the scores and game.\r\n */\r\nprivate void nextFrame() {\r\n    this.boardPanel.repaint();\r\n    this.scorePanel.refresh();\r\n}",
      "layer": "UI",
      "returns": "Void",
      "time": "249125",
      "value": "249125",
      "percent": "1.1",
      "selfTime": "73467",
      "color": "#E53E3E"
    }
  ],
  "methodName": "run",
  "className": "java.util.concurrent.ThreadPoolExecutor$Worker",
  "visibility": "",
  "label": "java.util.concurrent.ThreadPoolExecutor$Worker.run()",
  "packageName": "java.util.concurrent",
  "description": "",
  "reason": "",
  "detailedBehavior": "",
  "flowRepresentation": "",
  "briefSummary": "",
  "sourceCode": "",
  "layer": "",
  "returns": "",
  "time": "19373897",
  "value": "19373897",
  "percent": "88.2",
  "selfTime": "63313",
  "color": "#A0AEC0"
}