{
  "id": "360",
  "children": [
    {
      "id": "361",
      "children": [
        {
          "id": "362",
          "children": [
            {
              "id": "363",
              "children": [],
              "methodName": "addStartButton",
              "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
              "visibility": "private",
              "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStartButton()",
              "packageName": "nl.tudelft.jpacman.ui",
              "description": "Adds a start button to the PacMan UI that starts the game when clicked.",
              "reason": "This method is responsible for adding a start button to the UI, which triggers the game's start action.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Adds a button with the caption {@value #START_CAPTION} that starts the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to start.\r\n */\r\nprivate void addStartButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, game::start);\r\n}",
              "layer": "UI",
              "returns": "void",
              "time": "304",
              "value": "304",
              "percent": "0.0",
              "selfTime": "220",
              "color": "#E53E3E"
            },
            {
              "id": "364",
              "children": [],
              "methodName": "addStopButton",
              "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
              "visibility": "private",
              "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addStopButton()",
              "packageName": "nl.tudelft.jpacman.ui",
              "description": "Adds a stop button to the PacMan UI that stops the game when clicked.",
              "reason": "This method is responsible for adding a stop button to the UI, which allows users to pause or stop the game.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Adds a button with the caption {@value #STOP_CAPTION} that stops the\r\n * game.\r\n *\r\n * @param game\r\n * \t\tThe game to stop.\r\n */\r\nprivate void addStopButton(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, game::stop);\r\n}",
              "layer": "UI",
              "returns": "void",
              "time": "104",
              "value": "104",
              "percent": "0.0",
              "selfTime": "104",
              "color": "#E53E3E"
            }
          ],
          "methodName": "build",
          "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.build()",
          "packageName": "nl.tudelft.jpacman.ui",
          "description": "Builds a PacManUI instance with the provided game object.",
          "reason": "This method is responsible for creating and configuring a user interface for the PacMan game, which involves setting up buttons and other UI components.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Creates a new Pac-Man UI with the set keys and buttons.\r\n *\r\n * @param game\r\n * \t\tThe game to build the UI for.\r\n * @return A new Pac-Man UI with the set keys and buttons.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUI build(final nl.tudelft.jpacman.game.Game game) {\r\n    assert game != null;\r\n    if (this.defaultButtons) {\r\n        this.addStartButton(game);\r\n        this.addStopButton(game);\r\n    }\r\n    return new nl.tudelft.jpacman.ui.PacManUI(game, this.buttons, this.keyMappings, this.scoreFormatter);\r\n}",
          "layer": "UI",
          "returns": "nl.tudelft.jpacman.ui.PacManUI",
          "time": "315699",
          "value": "315699",
          "percent": "1.4",
          "selfTime": "6369",
          "color": "#E53E3E"
        },
        {
          "id": "365",
          "children": [
            {
              "id": "366",
              "children": [
                {
                  "id": "367",
                  "children": [
                    {
                      "id": "368",
                      "children": [
                        {
                          "id": "369",
                          "children": [
                            {
                              "id": "370",
                              "children": [
                                {
                                  "id": "371",
                                  "children": [
                                    {
                                      "id": "372",
                                      "children": [
                                        {
                                          "id": "373",
                                          "children": [
                                            {
                                              "id": "374",
                                              "children": [
                                                {
                                                  "id": "375",
                                                  "children": [
                                                    {
                                                      "id": "376",
                                                      "children": [
                                                        {
                                                          "id": "377",
                                                          "children": [
                                                            {
                                                              "id": "378",
                                                              "children": [],
                                                              "methodName": "newImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Creates a new BufferedImage with the specified width and height.",
                                                              "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                              "layer": "UI",
                                                              "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                              "time": "185093",
                                                              "value": "185093",
                                                              "percent": "0.8",
                                                              "selfTime": "10",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "379",
                                                              "children": [],
                                                              "methodName": "withinImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Checks if a given coordinate is within the bounds of an image.",
                                                              "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                              "time": "9",
                                                              "value": "9",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "split",
                                                          "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                          "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                          "time": "187297",
                                                          "value": "187297",
                                                          "percent": "0.9",
                                                          "selfTime": "12",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "380",
                                                          "children": [
                                                            {
                                                              "id": "381",
                                                              "children": [
                                                                {
                                                                  "id": "382",
                                                                  "children": [],
                                                                  "methodName": "loadSpriteFromResource",
                                                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Loads a sprite from a resource file.",
                                                                  "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                  "time": "1498",
                                                                  "value": "1498",
                                                                  "percent": "0.0",
                                                                  "selfTime": "4",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "loadSprite",
                                                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                              "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                              "time": "1530",
                                                              "value": "1530",
                                                              "percent": "0.0",
                                                              "selfTime": "14",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "loadSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                          "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "1538",
                                                          "value": "1538",
                                                          "percent": "0.0",
                                                          "selfTime": "8",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "383",
                                                          "children": [
                                                            {
                                                              "id": "384",
                                                              "children": [
                                                                {
                                                                  "id": "385",
                                                                  "children": [],
                                                                  "methodName": "newImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                  "layer": "UI",
                                                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                  "time": "114",
                                                                  "value": "114",
                                                                  "percent": "0.0",
                                                                  "selfTime": "5",
                                                                  "color": "#805AD5"
                                                                },
                                                                {
                                                                  "id": "386",
                                                                  "children": [],
                                                                  "methodName": "withinImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                  "time": "6",
                                                                  "value": "6",
                                                                  "percent": "0.0",
                                                                  "selfTime": "5",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "split",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                              "time": "351",
                                                              "value": "351",
                                                              "percent": "0.0",
                                                              "selfTime": "14",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "387",
                                                              "children": [],
                                                              "methodName": "getWidth",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "3",
                                                              "value": "3",
                                                              "percent": "0.0",
                                                              "selfTime": "0",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "createAnimatedSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                          "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                          "time": "1129",
                                                          "value": "1129",
                                                          "percent": "0.0",
                                                          "selfTime": "508",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "directionSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Creates a map of direction sprites from a resource file.",
                                                      "reason": "",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                      "layer": "",
                                                      "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                      "time": "189992",
                                                      "value": "189992",
                                                      "percent": "0.9",
                                                      "selfTime": "20",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "getGhostSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Retrieves the sprite for a given ghost color.",
                                                  "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                  "time": "192838",
                                                  "value": "192838",
                                                  "percent": "0.9",
                                                  "selfTime": "2842",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "createBlinky",
                                              "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createBlinky()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Creates a new Blinky ghost using the sprite factory.",
                                              "reason": "This method is responsible for creating an instance of Blinky, which is a type of ghost in the game. It uses the sprite factory to obtain the appropriate sprite and then creates a new Blinky object with that sprite.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Creates a new Blinky / Shadow, the red Ghost.\r\n *\r\n * @see Blinky\r\n * @return A new Blinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createBlinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Blinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.npc.Ghost",
                                              "time": "193296",
                                              "value": "193296",
                                              "percent": "0.9",
                                              "selfTime": "434",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "388",
                                              "children": [
                                                {
                                                  "id": "389",
                                                  "children": [
                                                    {
                                                      "id": "390",
                                                      "children": [
                                                        {
                                                          "id": "391",
                                                          "children": [
                                                            {
                                                              "id": "392",
                                                              "children": [
                                                                {
                                                                  "id": "393",
                                                                  "children": [],
                                                                  "methodName": "loadSpriteFromResource",
                                                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Loads a sprite from a resource file.",
                                                                  "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                  "time": "1130",
                                                                  "value": "1130",
                                                                  "percent": "0.0",
                                                                  "selfTime": "1",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "loadSprite",
                                                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                              "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                              "time": "1140",
                                                              "value": "1140",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "loadSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                          "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "1140",
                                                          "value": "1140",
                                                          "percent": "0.0",
                                                          "selfTime": "0",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "394",
                                                          "children": [
                                                            {
                                                              "id": "395",
                                                              "children": [
                                                                {
                                                                  "id": "396",
                                                                  "children": [],
                                                                  "methodName": "newImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                  "layer": "UI",
                                                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                  "time": "108",
                                                                  "value": "108",
                                                                  "percent": "0.0",
                                                                  "selfTime": "4",
                                                                  "color": "#805AD5"
                                                                },
                                                                {
                                                                  "id": "397",
                                                                  "children": [],
                                                                  "methodName": "withinImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                  "time": "5",
                                                                  "value": "5",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "split",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                              "time": "286",
                                                              "value": "286",
                                                              "percent": "0.0",
                                                              "selfTime": "9",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "398",
                                                              "children": [],
                                                              "methodName": "getHeight",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "399",
                                                              "children": [],
                                                              "methodName": "getWidth",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "0",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "createAnimatedSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                          "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                          "time": "299",
                                                          "value": "299",
                                                          "percent": "0.0",
                                                          "selfTime": "5",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "400",
                                                          "children": [
                                                            {
                                                              "id": "401",
                                                              "children": [],
                                                              "methodName": "newImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Creates a new BufferedImage with the specified width and height.",
                                                              "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                              "layer": "UI",
                                                              "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                              "time": "60",
                                                              "value": "60",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "402",
                                                              "children": [],
                                                              "methodName": "withinImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Checks if a given coordinate is within the bounds of an image.",
                                                              "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                              "time": "5",
                                                              "value": "5",
                                                              "percent": "0.0",
                                                              "selfTime": "1",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "split",
                                                          "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                          "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                          "time": "180",
                                                          "value": "180",
                                                          "percent": "0.0",
                                                          "selfTime": "3",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "403",
                                                          "children": [],
                                                          "methodName": "setAnimating",
                                                          "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Sets whether the sprite is currently animating.",
                                                          "reason": "This method allows control over the animation state of a sprite, which is essential for rendering in the UI layer.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Starts or stops the animation of this sprite.\r\n *\r\n * @param isAnimating\r\n * \t\t<code>true</code> to animate this sprite or <code>false</code>\r\n * \t\tto stop animating this sprite.\r\n */\r\npublic void setAnimating(boolean isAnimating) {\r\n    this.animating = isAnimating;\r\n}",
                                                          "layer": "UI",
                                                          "returns": "void",
                                                          "time": "1",
                                                          "value": "1",
                                                          "percent": "0.0",
                                                          "selfTime": "1",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "directionSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Creates a map of direction sprites from a resource file.",
                                                      "reason": "",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                      "layer": "",
                                                      "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                      "time": "1624",
                                                      "value": "1624",
                                                      "percent": "0.0",
                                                      "selfTime": "3",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "getGhostSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Retrieves the sprite for a given ghost color.",
                                                  "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                  "time": "1638",
                                                  "value": "1638",
                                                  "percent": "0.0",
                                                  "selfTime": "11",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "createInky",
                                              "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createInky()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Creates an instance of the Inky ghost using a sprite from the GhostFactory.",
                                              "reason": "This method is necessary for initializing the game by creating an Inky ghost, which is part of the game's logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Creates a new Inky / Bashful, the cyan Ghost.\r\n *\r\n * @see Inky\r\n * @return A new Inky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createInky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Inky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.CYAN));\r\n}",
                                              "layer": "Logic",
                                              "returns": "A new instance of the Inky ghost.",
                                              "time": "1679",
                                              "value": "1679",
                                              "percent": "0.0",
                                              "selfTime": "36",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "404",
                                              "children": [
                                                {
                                                  "id": "405",
                                                  "children": [
                                                    {
                                                      "id": "406",
                                                      "children": [
                                                        {
                                                          "id": "407",
                                                          "children": [
                                                            {
                                                              "id": "408",
                                                              "children": [
                                                                {
                                                                  "id": "409",
                                                                  "children": [],
                                                                  "methodName": "loadSpriteFromResource",
                                                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Loads a sprite from a resource file.",
                                                                  "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                  "time": "906",
                                                                  "value": "906",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "loadSprite",
                                                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                              "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                              "time": "908",
                                                              "value": "908",
                                                              "percent": "0.0",
                                                              "selfTime": "0",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "loadSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                          "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "908",
                                                          "value": "908",
                                                          "percent": "0.0",
                                                          "selfTime": "0",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "410",
                                                          "children": [
                                                            {
                                                              "id": "411",
                                                              "children": [
                                                                {
                                                                  "id": "412",
                                                                  "children": [],
                                                                  "methodName": "newImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                  "layer": "UI",
                                                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                  "time": "101",
                                                                  "value": "101",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#805AD5"
                                                                },
                                                                {
                                                                  "id": "413",
                                                                  "children": [],
                                                                  "methodName": "withinImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                  "time": "9",
                                                                  "value": "9",
                                                                  "percent": "0.0",
                                                                  "selfTime": "4",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "split",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                              "time": "274",
                                                              "value": "274",
                                                              "percent": "0.0",
                                                              "selfTime": "8",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "414",
                                                              "children": [],
                                                              "methodName": "getHeight",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "3",
                                                              "value": "3",
                                                              "percent": "0.0",
                                                              "selfTime": "1",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "415",
                                                              "children": [],
                                                              "methodName": "getWidth",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "1",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "createAnimatedSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                          "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                          "time": "287",
                                                          "value": "287",
                                                          "percent": "0.0",
                                                          "selfTime": "3",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "416",
                                                          "children": [
                                                            {
                                                              "id": "417",
                                                              "children": [],
                                                              "methodName": "newImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Creates a new BufferedImage with the specified width and height.",
                                                              "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                              "layer": "UI",
                                                              "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                              "time": "59",
                                                              "value": "59",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "418",
                                                              "children": [],
                                                              "methodName": "withinImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Checks if a given coordinate is within the bounds of an image.",
                                                              "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                              "time": "5",
                                                              "value": "5",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "split",
                                                          "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                          "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                          "time": "161",
                                                          "value": "161",
                                                          "percent": "0.0",
                                                          "selfTime": "2",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "directionSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Creates a map of direction sprites from a resource file.",
                                                      "reason": "",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                      "layer": "",
                                                      "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                      "time": "1369",
                                                      "value": "1369",
                                                      "percent": "0.0",
                                                      "selfTime": "6",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "getGhostSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Retrieves the sprite for a given ghost color.",
                                                  "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                  "time": "1375",
                                                  "value": "1375",
                                                  "percent": "0.0",
                                                  "selfTime": "3",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "createClyde",
                                              "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createClyde()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Creates a new Clyde ghost object.",
                                              "reason": "This method is responsible for creating an instance of the Clyde ghost, which is part of the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Creates a new Clyde / Pokey, the orange Ghost.\r\n *\r\n * @see Clyde\r\n * @return A new Clyde.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createClyde() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Clyde(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.ORANGE));\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.npc.Ghost",
                                              "time": "1410",
                                              "value": "1410",
                                              "percent": "0.0",
                                              "selfTime": "29",
                                              "color": "#718096"
                                            },
                                            {
                                              "id": "419",
                                              "children": [
                                                {
                                                  "id": "420",
                                                  "children": [
                                                    {
                                                      "id": "421",
                                                      "children": [
                                                        {
                                                          "id": "422",
                                                          "children": [
                                                            {
                                                              "id": "423",
                                                              "children": [
                                                                {
                                                                  "id": "424",
                                                                  "children": [],
                                                                  "methodName": "loadSpriteFromResource",
                                                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Loads a sprite from a resource file.",
                                                                  "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                                  "time": "771",
                                                                  "value": "771",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "loadSprite",
                                                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                              "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                              "time": "774",
                                                              "value": "774",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "loadSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                          "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "774",
                                                          "value": "774",
                                                          "percent": "0.0",
                                                          "selfTime": "0",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "425",
                                                          "children": [
                                                            {
                                                              "id": "426",
                                                              "children": [
                                                                {
                                                                  "id": "427",
                                                                  "children": [],
                                                                  "methodName": "newImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                                  "layer": "UI",
                                                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                                  "time": "100",
                                                                  "value": "100",
                                                                  "percent": "0.0",
                                                                  "selfTime": "4",
                                                                  "color": "#805AD5"
                                                                },
                                                                {
                                                                  "id": "428",
                                                                  "children": [],
                                                                  "methodName": "withinImage",
                                                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                                  "visibility": "private",
                                                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                                  "detailedBehavior": "",
                                                                  "flowRepresentation": "",
                                                                  "briefSummary": "",
                                                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                                  "layer": "Logic",
                                                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                                  "time": "6",
                                                                  "value": "6",
                                                                  "percent": "0.0",
                                                                  "selfTime": "3",
                                                                  "color": "#805AD5"
                                                                }
                                                              ],
                                                              "methodName": "split",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                              "time": "280",
                                                              "value": "280",
                                                              "percent": "0.0",
                                                              "selfTime": "9",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "429",
                                                              "children": [],
                                                              "methodName": "getHeight",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "430",
                                                              "children": [],
                                                              "methodName": "getWidth",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "public",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "",
                                                              "reason": "",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                                              "layer": "",
                                                              "returns": "",
                                                              "time": "2",
                                                              "value": "2",
                                                              "percent": "0.0",
                                                              "selfTime": "1",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "createAnimatedSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                                                          "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                                                          "time": "293",
                                                          "value": "293",
                                                          "percent": "0.0",
                                                          "selfTime": "4",
                                                          "color": "#805AD5"
                                                        },
                                                        {
                                                          "id": "431",
                                                          "children": [
                                                            {
                                                              "id": "432",
                                                              "children": [],
                                                              "methodName": "newImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Creates a new BufferedImage with the specified width and height.",
                                                              "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                                              "layer": "UI",
                                                              "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                                              "time": "57",
                                                              "value": "57",
                                                              "percent": "0.0",
                                                              "selfTime": "2",
                                                              "color": "#805AD5"
                                                            },
                                                            {
                                                              "id": "433",
                                                              "children": [],
                                                              "methodName": "withinImage",
                                                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                              "visibility": "private",
                                                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                                              "packageName": "nl.tudelft.jpacman.sprite",
                                                              "description": "Checks if a given coordinate is within the bounds of an image.",
                                                              "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                                              "detailedBehavior": "",
                                                              "flowRepresentation": "",
                                                              "briefSummary": "",
                                                              "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                                              "layer": "Logic",
                                                              "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                                              "time": "5",
                                                              "value": "5",
                                                              "percent": "0.0",
                                                              "selfTime": "3",
                                                              "color": "#805AD5"
                                                            }
                                                          ],
                                                          "methodName": "split",
                                                          "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                                          "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                                          "time": "167",
                                                          "value": "167",
                                                          "percent": "0.0",
                                                          "selfTime": "3",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "directionSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                      "visibility": "private",
                                                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Creates a map of direction sprites from a resource file.",
                                                      "reason": "",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                                                      "layer": "",
                                                      "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                      "time": "1242",
                                                      "value": "1242",
                                                      "percent": "0.0",
                                                      "selfTime": "5",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "getGhostSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGhostSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Retrieves the sprite for a given ghost color.",
                                                  "reason": "This method is responsible for fetching the sprite images for different directions of a ghost based on its color. It ensures that the correct resource file is loaded and then uses another method to create direction sprites.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Returns a map of animated ghost sprites for all directions.\r\n *\r\n * @param color\r\n * \t\tThe colour of the ghost.\r\n * @return The Sprite for the ghost.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor color) {\r\n    assert color != null;\r\n    java.lang.String resource = (\"/sprite/ghost_\" + color.name().toLowerCase()) + \".png\";\r\n    return this.directionSprite(resource, nl.tudelft.jpacman.sprite.PacManSprites.GHOST_ANIMATION_FRAMES);\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                                                  "time": "1249",
                                                  "value": "1249",
                                                  "percent": "0.0",
                                                  "selfTime": "4",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "createPinky",
                                              "className": "nl.tudelft.jpacman.npc.ghost.GhostFactory",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.npc.ghost.GhostFactory.createPinky()",
                                              "packageName": "nl.tudelft.jpacman.npc.ghost",
                                              "description": "Creates a Pinky ghost using the provided sprite factory.",
                                              "reason": "This method is necessary for creating a Pinky ghost, which is an essential part of the game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Creates a new Pinky / Speedy, the pink Ghost.\r\n *\r\n * @see Pinky\r\n * @return A new Pinky.\r\n */\r\npublic nl.tudelft.jpacman.npc.Ghost createPinky() {\r\n    return new nl.tudelft.jpacman.npc.ghost.Pinky(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.PINK));\r\n}",
                                              "layer": "Logic",
                                              "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a Pinky ghost.",
                                              "time": "1276",
                                              "value": "1276",
                                              "percent": "0.0",
                                              "selfTime": "21",
                                              "color": "#718096"
                                            }
                                          ],
                                          "methodName": "createGhost",
                                          "className": "nl.tudelft.jpacman.level.LevelFactory",
                                          "visibility": "default",
                                          "label": "nl.tudelft.jpacman.level.LevelFactory.createGhost()",
                                          "packageName": "nl.tudelft.jpacman.level",
                                          "description": "Creates a ghost using the provided sprite factory.",
                                          "reason": "This method is responsible for creating different types of ghosts in the game, which falls under the logic layer as it involves application and domain logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Creates a new ghost.\r\n *\r\n * @return The new ghost.\r\n */\r\nnl.tudelft.jpacman.npc.Ghost createGhost() {\r\n    this.ghostIndex++;\r\n    this.ghostIndex %= nl.tudelft.jpacman.level.LevelFactory.GHOSTS;\r\n    switch (this.ghostIndex) {\r\n        case nl.tudelft.jpacman.level.LevelFactory.BLINKY :\r\n            return this.ghostFact.createBlinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.INKY :\r\n            return this.ghostFact.createInky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.PINKY :\r\n            return this.ghostFact.createPinky();\r\n        case nl.tudelft.jpacman.level.LevelFactory.CLYDE :\r\n            return this.ghostFact.createClyde();\r\n        default :\r\n            return new nl.tudelft.jpacman.level.LevelFactory.RandomGhost(this.sprites.getGhostSprite(nl.tudelft.jpacman.npc.ghost.GhostColor.RED));\r\n    }\r\n}",
                                          "layer": "",
                                          "returns": "A new instance of nl.tudelft.jpacman.npc.Ghost representing a ghost.",
                                          "time": "197671",
                                          "value": "197671",
                                          "percent": "0.9",
                                          "selfTime": "10",
                                          "color": "#38A169"
                                        },
                                        {
                                          "id": "434",
                                          "children": [
                                            {
                                              "id": "435",
                                              "children": [
                                                {
                                                  "id": "436",
                                                  "children": [
                                                    {
                                                      "id": "437",
                                                      "children": [
                                                        {
                                                          "id": "438",
                                                          "children": [],
                                                          "methodName": "loadSpriteFromResource",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file.",
                                                          "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "71370",
                                                          "value": "71370",
                                                          "percent": "0.3",
                                                          "selfTime": "555",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "loadSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                      "visibility": "public",
                                                      "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                      "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                      "time": "71439",
                                                      "value": "71439",
                                                      "percent": "0.3",
                                                      "selfTime": "29",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "loadSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                  "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                  "time": "71479",
                                                  "value": "71479",
                                                  "percent": "0.3",
                                                  "selfTime": "40",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "getWallSprite",
                                              "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.sprite.PacManSprites.getWallSprite()",
                                              "packageName": "nl.tudelft.jpacman.sprite",
                                              "description": "Loads a sprite representing a wall in Pacman.",
                                              "reason": "This method is responsible for loading a specific sprite, which is part of the game's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The sprite for the wall.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getWallSprite() {\r\n    return this.loadSprite(\"/sprite/wall.png\");\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                              "time": "71522",
                                              "value": "71522",
                                              "percent": "0.3",
                                              "selfTime": "43",
                                              "color": "#805AD5"
                                            }
                                          ],
                                          "methodName": "createWall",
                                          "className": "nl.tudelft.jpacman.board.BoardFactory",
                                          "visibility": "public",
                                          "label": "nl.tudelft.jpacman.board.BoardFactory.createWall()",
                                          "packageName": "nl.tudelft.jpacman.board",
                                          "description": "Creates a wall in the Pacman game board.",
                                          "reason": "This method is responsible for creating a wall object, which is part of the game's logic layer. It uses a sprite to represent the wall visually.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Creates a new square that cannot be occupied by any unit.\r\n *\r\n * @return A new square that cannot be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createWall() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Wall(this.sprites.getWallSprite());\r\n}",
                                          "layer": "Logic",
                                          "returns": "nl.tudelft.jpacman.board.Square",
                                          "time": "72106",
                                          "value": "72106",
                                          "percent": "0.3",
                                          "selfTime": "233",
                                          "color": "#3182CE"
                                        },
                                        {
                                          "id": "439",
                                          "children": [
                                            {
                                              "id": "440",
                                              "children": [
                                                {
                                                  "id": "441",
                                                  "children": [
                                                    {
                                                      "id": "442",
                                                      "children": [
                                                        {
                                                          "id": "443",
                                                          "children": [],
                                                          "methodName": "loadSpriteFromResource",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file.",
                                                          "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "1299",
                                                          "value": "1299",
                                                          "percent": "0.0",
                                                          "selfTime": "2",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "loadSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                      "visibility": "public",
                                                      "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                      "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                      "time": "1362",
                                                      "value": "1362",
                                                      "percent": "0.0",
                                                      "selfTime": "35",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "loadSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                  "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                  "time": "1393",
                                                  "value": "1393",
                                                  "percent": "0.0",
                                                  "selfTime": "31",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "getGroundSprite",
                                              "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                              "packageName": "nl.tudelft.jpacman.sprite",
                                              "description": "Loads a sprite representing the ground from a resource file.",
                                              "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                              "time": "1438",
                                              "value": "1438",
                                              "percent": "0.0",
                                              "selfTime": "45",
                                              "color": "#805AD5"
                                            }
                                          ],
                                          "methodName": "createGround",
                                          "className": "nl.tudelft.jpacman.board.BoardFactory",
                                          "visibility": "public",
                                          "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                          "packageName": "nl.tudelft.jpacman.board",
                                          "description": "Creates a ground square in the board.",
                                          "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                          "layer": "Logic",
                                          "returns": "nl.tudelft.jpacman.board.Square",
                                          "time": "1725",
                                          "value": "1725",
                                          "percent": "0.0",
                                          "selfTime": "54",
                                          "color": "#3182CE"
                                        },
                                        {
                                          "id": "444",
                                          "children": [
                                            {
                                              "id": "445",
                                              "children": [
                                                {
                                                  "id": "446",
                                                  "children": [
                                                    {
                                                      "id": "447",
                                                      "children": [
                                                        {
                                                          "id": "448",
                                                          "children": [],
                                                          "methodName": "loadSpriteFromResource",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "private",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file.",
                                                          "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "1005",
                                                          "value": "1005",
                                                          "percent": "0.0",
                                                          "selfTime": "2",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "loadSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                      "visibility": "public",
                                                      "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                      "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                      "time": "1045",
                                                      "value": "1045",
                                                      "percent": "0.0",
                                                      "selfTime": "20",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "loadSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                  "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                  "time": "1065",
                                                  "value": "1065",
                                                  "percent": "0.0",
                                                  "selfTime": "20",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "getPelletSprite",
                                              "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPelletSprite()",
                                              "packageName": "nl.tudelft.jpacman.sprite",
                                              "description": "Loads a sprite for pellets in Pacman.",
                                              "reason": "This method is responsible for loading the sprite image for pellets, which is part of the game's visual representation. It does not interact with user input or data access, making it a candidate for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The sprite for the\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getPelletSprite() {\r\n    return this.loadSprite(\"/sprite/pellet.png\");\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                              "time": "1096",
                                              "value": "1096",
                                              "percent": "0.0",
                                              "selfTime": "31",
                                              "color": "#805AD5"
                                            }
                                          ],
                                          "methodName": "createPellet",
                                          "className": "nl.tudelft.jpacman.level.LevelFactory",
                                          "visibility": "public",
                                          "label": "nl.tudelft.jpacman.level.LevelFactory.createPellet()",
                                          "packageName": "nl.tudelft.jpacman.level",
                                          "description": "Creates a new pellet in the game.",
                                          "reason": "This method is responsible for creating pellets, which are collectible items in Pacman. It needs to be part of the logic layer as it involves game mechanics and object creation.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Creates a new pellet.\r\n *\r\n * @return The new pellet.\r\n */\r\npublic nl.tudelft.jpacman.level.Pellet createPellet() {\r\n    return new nl.tudelft.jpacman.level.Pellet(nl.tudelft.jpacman.level.LevelFactory.PELLET_VALUE, this.sprites.getPelletSprite());\r\n}",
                                          "layer": "Logic",
                                          "returns": "nl.tudelft.jpacman.level.Pellet",
                                          "time": "1644",
                                          "value": "1644",
                                          "percent": "0.0",
                                          "selfTime": "476",
                                          "color": "#38A169"
                                        },
                                        {
                                          "id": "449",
                                          "children": [
                                            {
                                              "id": "450",
                                              "children": [],
                                              "methodName": "put",
                                              "className": "nl.tudelft.jpacman.board.Square",
                                              "visibility": "default",
                                              "label": "nl.tudelft.jpacman.board.Square.put()",
                                              "packageName": "nl.tudelft.jpacman.board",
                                              "description": "Adds an occupant to the square.",
                                              "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                                              "layer": "Logic",
                                              "returns": "void",
                                              "time": "61",
                                              "value": "61",
                                              "percent": "0.0",
                                              "selfTime": "40",
                                              "color": "#3182CE"
                                            }
                                          ],
                                          "methodName": "occupy",
                                          "className": "nl.tudelft.jpacman.board.Unit",
                                          "visibility": "public",
                                          "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                                          "packageName": "nl.tudelft.jpacman.board",
                                          "description": "Moves the unit to a new square.",
                                          "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                                          "layer": "Logic",
                                          "returns": "Void",
                                          "time": "92",
                                          "value": "92",
                                          "percent": "0.0",
                                          "selfTime": "31",
                                          "color": "#3182CE"
                                        },
                                        {
                                          "id": "451",
                                          "children": [
                                            {
                                              "id": "452",
                                              "children": [
                                                {
                                                  "id": "453",
                                                  "children": [
                                                    {
                                                      "id": "454",
                                                      "children": [
                                                        {
                                                          "id": "455",
                                                          "children": [],
                                                          "methodName": "loadSprite",
                                                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                          "visibility": "public",
                                                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                          "packageName": "nl.tudelft.jpacman.sprite",
                                                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                          "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                          "detailedBehavior": "",
                                                          "flowRepresentation": "",
                                                          "briefSummary": "",
                                                          "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                          "layer": "Logic",
                                                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                          "time": "8",
                                                          "value": "8",
                                                          "percent": "0.0",
                                                          "selfTime": "5",
                                                          "color": "#805AD5"
                                                        }
                                                      ],
                                                      "methodName": "loadSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                      "visibility": "public",
                                                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                      "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                      "time": "11",
                                                      "value": "11",
                                                      "percent": "0.0",
                                                      "selfTime": "3",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "getGroundSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Loads a sprite representing the ground from a resource file.",
                                                  "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                  "time": "13",
                                                  "value": "13",
                                                  "percent": "0.0",
                                                  "selfTime": "2",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "createGround",
                                              "className": "nl.tudelft.jpacman.board.BoardFactory",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                              "packageName": "nl.tudelft.jpacman.board",
                                              "description": "Creates a ground square in the board.",
                                              "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.board.Square",
                                              "time": "31",
                                              "value": "31",
                                              "percent": "0.0",
                                              "selfTime": "2",
                                              "color": "#3182CE"
                                            },
                                            {
                                              "id": "456",
                                              "children": [
                                                {
                                                  "id": "457",
                                                  "children": [],
                                                  "methodName": "put",
                                                  "className": "nl.tudelft.jpacman.board.Square",
                                                  "visibility": "default",
                                                  "label": "nl.tudelft.jpacman.board.Square.put()",
                                                  "packageName": "nl.tudelft.jpacman.board",
                                                  "description": "Adds an occupant to the square.",
                                                  "reason": "Ensures that an occupant can only be added to a square if it is not null and not already present, maintaining the integrity of the game state.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Adds a new occupant to this square.\r\n *\r\n * @param occupant\r\n * \t\tThe unit to occupy this square.\r\n */\r\nvoid put(nl.tudelft.jpacman.board.Unit occupant) {\r\n    assert occupant != null;\r\n    assert !this.occupants.contains(occupant);\r\n    this.occupants.add(occupant);\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "void",
                                                  "time": "1",
                                                  "value": "1",
                                                  "percent": "0.0",
                                                  "selfTime": "0",
                                                  "color": "#3182CE"
                                                }
                                              ],
                                              "methodName": "occupy",
                                              "className": "nl.tudelft.jpacman.board.Unit",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.board.Unit.occupy()",
                                              "packageName": "nl.tudelft.jpacman.board",
                                              "description": "Moves the unit to a new square.",
                                              "reason": "This method is responsible for moving a unit within the game board, which is part of the core game logic.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n * Occupies the target square iff this unit is allowed to as decided by\r\n * {@link Square#isAccessibleTo(Unit)}.\r\n *\r\n * @param target\r\n * \t\tThe square to occupy.\r\n */\r\npublic void occupy(nl.tudelft.jpacman.board.Square target) {\r\n    assert target != null;\r\n    if (this.square != null) {\r\n        this.square.remove(this);\r\n    }\r\n    this.square = target;\r\n    target.put(this);\r\n    assert this.invariant();\r\n}",
                                              "layer": "Logic",
                                              "returns": "Void",
                                              "time": "3",
                                              "value": "3",
                                              "percent": "0.0",
                                              "selfTime": "2",
                                              "color": "#3182CE"
                                            }
                                          ],
                                          "methodName": "makeGhostSquare",
                                          "className": "nl.tudelft.jpacman.level.MapParser",
                                          "visibility": "protected",
                                          "label": "nl.tudelft.jpacman.level.MapParser.makeGhostSquare()",
                                          "packageName": "nl.tudelft.jpacman.level",
                                          "description": "Creates a square for a ghost in the game board.",
                                          "reason": "This method is responsible for creating a square where a ghost can occupy, which involves setting up the square and adding the ghost to it.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * creates a Square with the specified ghost on it\r\n * and appends the placed ghost into the ghost list.\r\n *\r\n * @param ghosts\r\n * \t\tall the ghosts in the level so far, the new ghost will be appended\r\n * @param ghost\r\n * \t\tthe newly created ghost to be placed\r\n * @return a square with the ghost on it.\r\n */\r\nprotected nl.tudelft.jpacman.board.Square makeGhostSquare(java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, nl.tudelft.jpacman.npc.Ghost ghost) {\r\n    nl.tudelft.jpacman.board.Square ghostSquare = this.boardCreator.createGround();\r\n    ghosts.add(ghost);\r\n    ghost.occupy(ghostSquare);\r\n    return ghostSquare;\r\n}",
                                          "layer": "Logic",
                                          "returns": "nl.tudelft.jpacman.board.Square",
                                          "time": "43",
                                          "value": "43",
                                          "percent": "0.0",
                                          "selfTime": "7",
                                          "color": "#38A169"
                                        },
                                        {
                                          "id": "458",
                                          "children": [
                                            {
                                              "id": "459",
                                              "children": [
                                                {
                                                  "id": "460",
                                                  "children": [
                                                    {
                                                      "id": "461",
                                                      "children": [],
                                                      "methodName": "loadSprite",
                                                      "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                                      "visibility": "public",
                                                      "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                                      "packageName": "nl.tudelft.jpacman.sprite",
                                                      "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                      "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                                      "detailedBehavior": "",
                                                      "flowRepresentation": "",
                                                      "briefSummary": "",
                                                      "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                                      "layer": "Logic",
                                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                      "time": "1",
                                                      "value": "1",
                                                      "percent": "0.0",
                                                      "selfTime": "1",
                                                      "color": "#805AD5"
                                                    }
                                                  ],
                                                  "methodName": "loadSprite",
                                                  "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                                  "visibility": "public",
                                                  "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                                                  "packageName": "nl.tudelft.jpacman.sprite",
                                                  "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                                  "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                                                  "detailedBehavior": "",
                                                  "flowRepresentation": "",
                                                  "briefSummary": "",
                                                  "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                                                  "layer": "Logic",
                                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                                  "time": "1",
                                                  "value": "1",
                                                  "percent": "0.0",
                                                  "selfTime": "0",
                                                  "color": "#805AD5"
                                                }
                                              ],
                                              "methodName": "getGroundSprite",
                                              "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                                              "visibility": "public",
                                              "label": "nl.tudelft.jpacman.sprite.PacManSprites.getGroundSprite()",
                                              "packageName": "nl.tudelft.jpacman.sprite",
                                              "description": "Loads a sprite representing the ground from a resource file.",
                                              "reason": "This method is responsible for loading a specific sprite, which is part of the application's visual representation. It does not interact with user input or data access, making it suitable for the Logic layer.",
                                              "detailedBehavior": "",
                                              "flowRepresentation": "",
                                              "briefSummary": "",
                                              "sourceCode": "/**\r\n *\r\n * @return The sprite for the ground.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite getGroundSprite() {\r\n    return this.loadSprite(\"/sprite/floor.png\");\r\n}",
                                              "layer": "Logic",
                                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                              "time": "1",
                                              "value": "1",
                                              "percent": "0.0",
                                              "selfTime": "0",
                                              "color": "#805AD5"
                                            }
                                          ],
                                          "methodName": "createGround",
                                          "className": "nl.tudelft.jpacman.board.BoardFactory",
                                          "visibility": "public",
                                          "label": "nl.tudelft.jpacman.board.BoardFactory.createGround()",
                                          "packageName": "nl.tudelft.jpacman.board",
                                          "description": "Creates a ground square in the board.",
                                          "reason": "This method is responsible for creating a ground square, which is part of the game's logic layer. It uses a sprite to represent the ground, indicating that it deals with visual elements but also has logical implications.",
                                          "detailedBehavior": "",
                                          "flowRepresentation": "",
                                          "briefSummary": "",
                                          "sourceCode": "/**\r\n * Creates a new square that can be occupied by any unit.\r\n *\r\n * @return A new square that can be occupied by any unit.\r\n */\r\npublic nl.tudelft.jpacman.board.Square createGround() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory.Ground(this.sprites.getGroundSprite());\r\n}",
                                          "layer": "Logic",
                                          "returns": "nl.tudelft.jpacman.board.Square",
                                          "time": "5",
                                          "value": "5",
                                          "percent": "0.0",
                                          "selfTime": "0",
                                          "color": "#3182CE"
                                        }
                                      ],
                                      "methodName": "addSquare",
                                      "className": "nl.tudelft.jpacman.level.MapParser",
                                      "visibility": "protected",
                                      "label": "nl.tudelft.jpacman.level.MapParser.addSquare()",
                                      "packageName": "nl.tudelft.jpacman.level",
                                      "description": "(no description)",
                                      "reason": "",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Adds a square to the grid based on a given character. These\r\n * character come from the map files and describe the type\r\n * of square.\r\n *\r\n * @param grid\r\n * \t\tThe grid of squares with board[x][y] being the\r\n * \t\tsquare at column x, row y.\r\n * @param ghosts\r\n * \t\tList of all ghosts that were added to the map.\r\n * @param startPositions\r\n * \t\tList of all start positions that were added\r\n * \t\tto the map.\r\n * @param x\r\n * \t\tx coordinate of the square.\r\n * @param y\r\n * \t\ty coordinate of the square.\r\n * @param c\r\n * \t\tCharacter describing the square type.\r\n */\r\nprotected void addSquare(nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions, int x, int y, char c) {\r\n    switch (c) {\r\n        case ' ' :\r\n            grid[x][y] = this.boardCreator.createGround();\r\n            break;\r\n        case '#' :\r\n            grid[x][y] = this.boardCreator.createWall();\r\n            break;\r\n        case '.' :\r\n            nl.tudelft.jpacman.board.Square pelletSquare = this.boardCreator.createGround();\r\n            grid[x][y] = pelletSquare;\r\n            this.levelCreator.createPellet().occupy(pelletSquare);\r\n            break;\r\n        case 'G' :\r\n            nl.tudelft.jpacman.board.Square ghostSquare = this.makeGhostSquare(ghosts, this.levelCreator.createGhost());\r\n            grid[x][y] = ghostSquare;\r\n            break;\r\n        case 'P' :\r\n            nl.tudelft.jpacman.board.Square playerSquare = this.boardCreator.createGround();\r\n            grid[x][y] = playerSquare;\r\n            startPositions.add(playerSquare);\r\n            break;\r\n        default :\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(((((\"Invalid character at \" + x) + \",\") + y) + \": \") + c);\r\n    }\r\n}",
                                      "layer": "",
                                      "returns": "",
                                      "time": "273808",
                                      "value": "273808",
                                      "percent": "1.2",
                                      "selfTime": "521",
                                      "color": "#38A169"
                                    }
                                  ],
                                  "methodName": "makeGrid",
                                  "className": "nl.tudelft.jpacman.level.MapParser",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.level.MapParser.makeGrid()",
                                  "packageName": "nl.tudelft.jpacman.level",
                                  "description": "Adds squares to the grid based on a given character from a map file.",
                                  "reason": "This method is responsible for populating the game board with squares based on a character map, which is part of the game logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "private void makeGrid(char[][] map, int width, int height, nl.tudelft.jpacman.board.Square[][] grid, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            char c = map[x][y];\r\n            this.addSquare(grid, ghosts, startPositions, x, y, c);\r\n        }\r\n    }\r\n}",
                                  "layer": "Logic",
                                  "returns": "void",
                                  "time": "273876",
                                  "value": "273876",
                                  "percent": "1.2",
                                  "selfTime": "68",
                                  "color": "#38A169"
                                },
                                {
                                  "id": "462",
                                  "children": [
                                    {
                                      "id": "463",
                                      "children": [],
                                      "methodName": "link",
                                      "className": "nl.tudelft.jpacman.board.Square",
                                      "visibility": "public",
                                      "label": "nl.tudelft.jpacman.board.Square.link()",
                                      "packageName": "nl.tudelft.jpacman.board",
                                      "description": "Links a neighboring square in a specific direction.",
                                      "reason": "This method is used to establish connections between squares in a grid, which is essential for the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Links this square to a neighbour in the given direction. Note that this\r\n * is a one-way connection.\r\n *\r\n * @param neighbour\r\n * \t\tThe neighbour to link.\r\n * @param direction\r\n * \t\tThe direction the new neighbour is in, as seen from this cell.\r\n */\r\npublic void link(nl.tudelft.jpacman.board.Square neighbour, nl.tudelft.jpacman.board.Direction direction) {\r\n    this.neighbours.put(direction, neighbour);\r\n    assert this.invariant();\r\n}",
                                      "layer": "Logic",
                                      "returns": "void",
                                      "time": "557",
                                      "value": "557",
                                      "percent": "0.0",
                                      "selfTime": "198",
                                      "color": "#3182CE"
                                    },
                                    {
                                      "id": "464",
                                      "children": [],
                                      "methodName": "values",
                                      "className": "nl.tudelft.jpacman.board.Direction",
                                      "visibility": "",
                                      "label": "nl.tudelft.jpacman.board.Direction.values()",
                                      "packageName": "nl.tudelft.jpacman.board",
                                      "description": "",
                                      "reason": "",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "",
                                      "layer": "",
                                      "returns": "",
                                      "time": "127",
                                      "value": "127",
                                      "percent": "0.0",
                                      "selfTime": "55",
                                      "color": "#3182CE"
                                    },
                                    {
                                      "id": "465",
                                      "children": [],
                                      "methodName": "getDeltaX",
                                      "className": "nl.tudelft.jpacman.board.Direction",
                                      "visibility": "public",
                                      "label": "nl.tudelft.jpacman.board.Direction.getDeltaX()",
                                      "packageName": "nl.tudelft.jpacman.board",
                                      "description": "Returns the horizontal movement delta for a direction.",
                                      "reason": "This method is necessary for determining how a character should move horizontally on the board based on its current direction.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The delta x (width difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaX() {\r\n    return this.deltaX;\r\n}",
                                      "layer": "Logic",
                                      "returns": "An integer representing the horizontal movement delta for the direction.",
                                      "time": "98",
                                      "value": "98",
                                      "percent": "0.0",
                                      "selfTime": "98",
                                      "color": "#3182CE"
                                    },
                                    {
                                      "id": "466",
                                      "children": [],
                                      "methodName": "getDeltaY",
                                      "className": "nl.tudelft.jpacman.board.Direction",
                                      "visibility": "public",
                                      "label": "nl.tudelft.jpacman.board.Direction.getDeltaY()",
                                      "packageName": "nl.tudelft.jpacman.board",
                                      "description": "Returns the vertical movement delta for a direction.",
                                      "reason": "This method is necessary for determining vertical movement based on a direction, which is part of the game logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n *\r\n * @return The delta y (height difference) for a single step in this\r\ndirection, in a matrix with 0,0 (x,y) as its top-left element.\r\n */\r\npublic int getDeltaY() {\r\n    return this.deltaY;\r\n}",
                                      "layer": "Logic",
                                      "returns": "An integer representing the vertical movement delta for the direction.",
                                      "time": "92",
                                      "value": "92",
                                      "percent": "0.0",
                                      "selfTime": "92",
                                      "color": "#3182CE"
                                    }
                                  ],
                                  "methodName": "createBoard",
                                  "className": "nl.tudelft.jpacman.board.BoardFactory",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.board.BoardFactory.createBoard()",
                                  "packageName": "nl.tudelft.jpacman.board",
                                  "description": "Creates a board in the Pacman game using a given grid of squares.",
                                  "reason": "This method initializes a new board with the provided grid and sets up the connections between adjacent squares.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Creates a new board from a grid of cells and connects it.\r\n *\r\n * @param grid\r\n * \t\tThe square grid of cells, in which grid[x][y] corresponds to\r\n * \t\tthe square at position x,y.\r\n * @return A new board, wrapping a grid of connected cells.\r\n */\r\npublic nl.tudelft.jpacman.board.Board createBoard(nl.tudelft.jpacman.board.Square[][] grid) {\r\n    assert grid != null;\r\n    nl.tudelft.jpacman.board.Board board = new nl.tudelft.jpacman.board.Board(grid);\r\n    int width = board.getWidth();\r\n    int height = board.getHeight();\r\n    for (int x = 0; x < width; x++) {\r\n        for (int y = 0; y < height; y++) {\r\n            nl.tudelft.jpacman.board.Square square = grid[x][y];\r\n            for (nl.tudelft.jpacman.board.Direction dir : nl.tudelft.jpacman.board.Direction.values()) {\r\n                int dirX = ((width + x) + dir.getDeltaX()) % width;\r\n                int dirY = ((height + y) + dir.getDeltaY()) % height;\r\n                nl.tudelft.jpacman.board.Square neighbour = grid[dirX][dirY];\r\n                square.link(neighbour, dir);\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}",
                                  "layer": "Logic",
                                  "returns": "nl.tudelft.jpacman.board.Board",
                                  "time": "1828",
                                  "value": "1828",
                                  "percent": "0.0",
                                  "selfTime": "948",
                                  "color": "#3182CE"
                                },
                                {
                                  "id": "467",
                                  "children": [],
                                  "methodName": "createLevel",
                                  "className": "nl.tudelft.jpacman.level.LevelFactory",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.level.LevelFactory.createLevel()",
                                  "packageName": "nl.tudelft.jpacman.level",
                                  "description": "Creates a new level in the game Pacman.",
                                  "reason": "This method is responsible for creating a new level in the game, setting up the board, placing ghosts and defining their starting positions.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Creates a new level from the provided data.\r\n *\r\n * @param board\r\n * \t\tThe board with all ghosts and pellets occupying their squares.\r\n * @param ghosts\r\n * \t\tA list of all ghosts on the board.\r\n * @param startPositions\r\n * \t\tA list of squares from which players may start the game.\r\n * @return A new level for the board.\r\n */\r\npublic nl.tudelft.jpacman.level.Level createLevel(nl.tudelft.jpacman.board.Board board, java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts, java.util.List<nl.tudelft.jpacman.board.Square> startPositions) {\r\n    // We'll adopt the simple collision map for now.\r\n    nl.tudelft.jpacman.level.CollisionMap collisionMap = new nl.tudelft.jpacman.level.PlayerCollisions(this.pointCalculator);\r\n    return new nl.tudelft.jpacman.level.Level(board, ghosts, startPositions, collisionMap);\r\n}",
                                  "layer": "Logic",
                                  "returns": "nl.tudelft.jpacman.level.Level",
                                  "time": "565",
                                  "value": "565",
                                  "percent": "0.0",
                                  "selfTime": "534",
                                  "color": "#38A169"
                                }
                              ],
                              "methodName": "parseMap",
                              "className": "nl.tudelft.jpacman.level.MapParser",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                              "packageName": "nl.tudelft.jpacman.level",
                              "description": "Parses a character map to create a game level in Pacman.",
                              "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                              "layer": "Logic",
                              "returns": "nl.tudelft.jpacman.level.Level",
                              "time": "276382",
                              "value": "276382",
                              "percent": "1.3",
                              "selfTime": "109",
                              "color": "#38A169"
                            },
                            {
                              "id": "468",
                              "children": [],
                              "methodName": "checkMapFormat",
                              "className": "nl.tudelft.jpacman.level.MapParser",
                              "visibility": "private",
                              "label": "nl.tudelft.jpacman.level.MapParser.checkMapFormat()",
                              "packageName": "nl.tudelft.jpacman.level",
                              "description": "Checks the format of a map text input for a Pacman game.",
                              "reason": "Ensures that the input map text is properly formatted to avoid runtime errors during game initialization.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Check the correctness of the map lines in the text.\r\n *\r\n * @param text\r\n * \t\tMap to be checked\r\n * @throws PacmanConfigurationException\r\n * \t\tif map is not OK.\r\n */\r\nprivate void checkMapFormat(java.util.List<java.lang.String> text) {\r\n    if (text == null) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text cannot be null.\");\r\n    }\r\n    if (text.isEmpty()) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text must consist of at least 1 row.\");\r\n    }\r\n    int width = text.get(0).length();\r\n    if (width == 0) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines cannot be empty.\");\r\n    }\r\n    for (java.lang.String line : text) {\r\n        if (line.length() != width) {\r\n            throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Input text lines are not of equal width.\");\r\n        }\r\n    }\r\n}",
                              "layer": "Logic",
                              "returns": "void",
                              "time": "87",
                              "value": "87",
                              "percent": "0.0",
                              "selfTime": "36",
                              "color": "#38A169"
                            }
                          ],
                          "methodName": "parseMap",
                          "className": "nl.tudelft.jpacman.level.MapParser",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                          "packageName": "nl.tudelft.jpacman.level",
                          "description": "Parses a character map to create a game level in Pacman.",
                          "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.level.Level",
                          "time": "278071",
                          "value": "278071",
                          "percent": "1.3",
                          "selfTime": "833",
                          "color": "#38A169"
                        }
                      ],
                      "methodName": "parseMap",
                      "className": "nl.tudelft.jpacman.level.MapParser",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                      "packageName": "nl.tudelft.jpacman.level",
                      "description": "Parses a character map to create a game level in Pacman.",
                      "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.level.Level",
                      "time": "280022",
                      "value": "280022",
                      "percent": "1.3",
                      "selfTime": "501",
                      "color": "#38A169"
                    }
                  ],
                  "methodName": "parseMap",
                  "className": "nl.tudelft.jpacman.level.MapParser",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.level.MapParser.parseMap()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "Parses a character map to create a game level in Pacman.",
                  "reason": "This method is responsible for converting a textual representation of the game level into an actual game board and level object.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Parses the text representation of the board into an actual level.\r\n *\r\n * <ul>\r\n * <li>Supported characters:\r\n * <li>' ' (space) an empty square.\r\n * <li>'#' (bracket) a wall.\r\n * <li>'.' (period) a square with a pellet.\r\n * <li>'P' (capital P) a starting square for players.\r\n * <li>'G' (capital G) a square with a ghost.\r\n * </ul>\r\n *\r\n * @param map\r\n * \t\tThe text representation of the board, with map[x][y]\r\n * \t\trepresenting the square at position x,y.\r\n * @return The level as represented by this text.\r\n */\r\npublic nl.tudelft.jpacman.level.Level parseMap(char[][] map) {\r\n    int width = map.length;\r\n    int height = map[0].length;\r\n    nl.tudelft.jpacman.board.Square[][] grid = new nl.tudelft.jpacman.board.Square[width][height];\r\n    java.util.List<nl.tudelft.jpacman.npc.Ghost> ghosts = new java.util.ArrayList<nl.tudelft.jpacman.npc.Ghost>();\r\n    java.util.List<nl.tudelft.jpacman.board.Square> startPositions = new java.util.ArrayList<nl.tudelft.jpacman.board.Square>();\r\n    this.makeGrid(map, width, height, grid, ghosts, startPositions);\r\n    nl.tudelft.jpacman.board.Board board = this.boardCreator.createBoard(grid);\r\n    return this.levelCreator.createLevel(board, ghosts, startPositions);\r\n}",
                  "layer": "Logic",
                  "returns": "nl.tudelft.jpacman.level.Level",
                  "time": "280457",
                  "value": "280457",
                  "percent": "1.3",
                  "selfTime": "3",
                  "color": "#38A169"
                },
                {
                  "id": "469",
                  "children": [
                    {
                      "id": "470",
                      "children": [
                        {
                          "id": "471",
                          "children": [
                            {
                              "id": "472",
                              "children": [
                                {
                                  "id": "473",
                                  "children": [
                                    {
                                      "id": "474",
                                      "children": [],
                                      "methodName": "getCalculatorClassName",
                                      "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.getCalculatorClassName()",
                                      "packageName": "nl.tudelft.jpacman.points",
                                      "description": "Retrieves the class name of the point calculator from a properties file.",
                                      "reason": "This method is used to dynamically load the point calculator based on configuration, which is part of the application logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "private java.lang.String getCalculatorClassName() throws java.io.IOException {\r\n    java.util.Properties properties = new java.util.Properties();\r\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"scorecalc.properties\"));\r\n    return properties.getProperty(\"scorecalculator.name\");\r\n}",
                                      "layer": "Logic",
                                      "returns": "A string representing the fully qualified name of the point calculator class.",
                                      "time": "3483",
                                      "value": "3483",
                                      "percent": "0.0",
                                      "selfTime": "410",
                                      "color": "#ECC94B"
                                    }
                                  ],
                                  "methodName": "loadClassFromFile",
                                  "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.loadClassFromFile()",
                                  "packageName": "nl.tudelft.jpacman.points",
                                  "description": "Loads a class from a file based on the strategy to load.",
                                  "reason": "This method is responsible for dynamically loading a point calculator class based on a configuration strategy, which falls under application logic as it involves decision-making and dynamic behavior.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "private java.lang.Class loadClassFromFile() throws java.io.IOException, java.lang.ClassNotFoundException {\r\n    java.lang.String strategyToLoad = this.getCalculatorClassName();\r\n    if (\"DefaultPointCalculator\".equals(strategyToLoad)) {\r\n        return nl.tudelft.jpacman.points.DefaultPointCalculator.class;\r\n    }\r\n    java.net.URL[] urls = new java.net.URL[]{ this.getClass().getClassLoader().getResource(\"scoreplugins/\") };\r\n    try (java.net.URLClassLoader classLoader = new java.net.URLClassLoader(urls, this.getClass().getClassLoader())) {\r\n        return classLoader.loadClass(strategyToLoad);\r\n    }\r\n}",
                                  "layer": "Logic",
                                  "returns": "A Class object representing the loaded class.",
                                  "time": "3959",
                                  "value": "3959",
                                  "percent": "0.0",
                                  "selfTime": "474",
                                  "color": "#ECC94B"
                                }
                              ],
                              "methodName": "load",
                              "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                              "packageName": "nl.tudelft.jpacman.points",
                              "description": "Loads a PointCalculator instance dynamically from a file.",
                              "reason": "This method is responsible for loading a specific implementation of the PointCalculator interface, which is crucial for calculating points in the game. It ensures that the correct calculator is instantiated based on the strategy defined in the application.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Load a points calculator and return it.\r\n *\r\n * @return The (dynamically loaded) points calculator.\r\n */\r\npublic nl.tudelft.jpacman.points.PointCalculator load() {\r\n    try {\r\n        if (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz == null) {\r\n            nl.tudelft.jpacman.points.PointCalculatorLoader.clazz = this.loadClassFromFile();\r\n        }\r\n        return ((nl.tudelft.jpacman.points.PointCalculator) (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz.newInstance()));\r\n    } catch (java.lang.Exception e) {\r\n        throw new java.lang.RuntimeException(\"Could not dynamically load the points calculator.\", e);\r\n    }\r\n}",
                              "layer": "Logic",
                              "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                              "time": "4013",
                              "value": "4013",
                              "percent": "0.0",
                              "selfTime": "3",
                              "color": "#ECC94B"
                            }
                          ],
                          "methodName": "loadPointCalculator",
                          "className": "nl.tudelft.jpacman.Launcher",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
                          "packageName": "nl.tudelft.jpacman",
                          "description": "Loads a PointCalculator instance dynamically from a file.",
                          "reason": "This method is responsible for loading a PointCalculator, which is part of the application logic. It does not interact with the user interface or handle data access directly.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "private nl.tudelft.jpacman.points.PointCalculator loadPointCalculator() {\r\n    return new nl.tudelft.jpacman.points.PointCalculatorLoader().load();\r\n}",
                          "layer": "Logic",
                          "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                          "time": "4307",
                          "value": "4307",
                          "percent": "0.0",
                          "selfTime": "291",
                          "color": "#2C7A7B"
                        },
                        {
                          "id": "475",
                          "children": [
                            {
                              "id": "476",
                              "children": [],
                              "methodName": "getSpriteStore",
                              "className": "nl.tudelft.jpacman.Launcher",
                              "visibility": "protected",
                              "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                              "packageName": "nl.tudelft.jpacman",
                              "description": "Retrieves the sprite store used in the game.",
                              "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                              "layer": "UI",
                              "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                              "time": "2",
                              "value": "2",
                              "percent": "0.0",
                              "selfTime": "2",
                              "color": "#2C7A7B"
                            }
                          ],
                          "methodName": "getGhostFactory",
                          "className": "nl.tudelft.jpacman.Launcher",
                          "visibility": "protected",
                          "label": "nl.tudelft.jpacman.Launcher.getGhostFactory()",
                          "packageName": "nl.tudelft.jpacman",
                          "description": "Retrieves the ghost factory used in the game.",
                          "reason": "This method is responsible for creating ghost objects, which are a key component of the game logic.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.npc.ghost.GhostFactory getGhostFactory() {\r\n    return new nl.tudelft.jpacman.npc.ghost.GhostFactory(this.getSpriteStore());\r\n}",
                          "layer": "Logic",
                          "returns": "An instance of nl.tudelft.jpacman.npc.ghost.GhostFactory.",
                          "time": "2005",
                          "value": "2005",
                          "percent": "0.0",
                          "selfTime": "2001",
                          "color": "#2C7A7B"
                        },
                        {
                          "id": "477",
                          "children": [],
                          "methodName": "getSpriteStore",
                          "className": "nl.tudelft.jpacman.Launcher",
                          "visibility": "protected",
                          "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                          "packageName": "nl.tudelft.jpacman",
                          "description": "Retrieves the sprite store used in the game.",
                          "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                          "layer": "UI",
                          "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                          "time": "2",
                          "value": "2",
                          "percent": "0.0",
                          "selfTime": "2",
                          "color": "#2C7A7B"
                        }
                      ],
                      "methodName": "getLevelFactory",
                      "className": "nl.tudelft.jpacman.Launcher",
                      "visibility": "protected",
                      "label": "nl.tudelft.jpacman.Launcher.getLevelFactory()",
                      "packageName": "nl.tudelft.jpacman",
                      "description": "Retrieves the level factory used in the game.",
                      "reason": "This method is responsible for creating the level factory, which is essential for setting up levels in the game. It depends on other components like sprite store, ghost factory, and point calculator to provide a complete level setup.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}\r\nand the ghosts from {@link #getGhostFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.LevelFactory getLevelFactory() {\r\n    return new nl.tudelft.jpacman.level.LevelFactory(this.getSpriteStore(), this.getGhostFactory(), this.loadPointCalculator());\r\n}",
                      "layer": "Logic",
                      "returns": "An instance of nl.tudelft.jpacman.level.LevelFactory.",
                      "time": "8194",
                      "value": "8194",
                      "percent": "0.0",
                      "selfTime": "1874",
                      "color": "#2C7A7B"
                    },
                    {
                      "id": "478",
                      "children": [],
                      "methodName": "getBoardFactory",
                      "className": "nl.tudelft.jpacman.Launcher",
                      "visibility": "protected",
                      "label": "nl.tudelft.jpacman.Launcher.getBoardFactory()",
                      "packageName": "nl.tudelft.jpacman",
                      "description": "Retrieves the board factory used in the game.",
                      "reason": "This method is responsible for creating a board factory, which is essential for setting up the game's board. It depends on the sprite store to provide necessary visual elements.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return A new board factory using the sprite store from\r\n{@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.board.BoardFactory getBoardFactory() {\r\n    return new nl.tudelft.jpacman.board.BoardFactory(this.getSpriteStore());\r\n}",
                      "layer": "Logic",
                      "returns": "An instance of nl.tudelft.jpacman.board.BoardFactory.",
                      "time": "1575",
                      "value": "1575",
                      "percent": "0.0",
                      "selfTime": "1565",
                      "color": "#2C7A7B"
                    }
                  ],
                  "methodName": "getMapParser",
                  "className": "nl.tudelft.jpacman.Launcher",
                  "visibility": "protected",
                  "label": "nl.tudelft.jpacman.Launcher.getMapParser()",
                  "packageName": "nl.tudelft.jpacman",
                  "description": "Retrieves the MapParser used in the game.",
                  "reason": "This method is responsible for creating a MapParser, which is essential for parsing levels in the game. It uses other factory methods to obtain necessary components like LevelFactory and BoardFactory.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n *\r\n * @return A new map parser object using the factories from\r\n{@link #getLevelFactory()} and {@link #getBoardFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.MapParser getMapParser() {\r\n    return new nl.tudelft.jpacman.level.MapParser(this.getLevelFactory(), this.getBoardFactory());\r\n}",
                  "layer": "Logic",
                  "returns": "An instance of nl.tudelft.jpacman.level.MapParser.",
                  "time": "11374",
                  "value": "11374",
                  "percent": "0.1",
                  "selfTime": "1602",
                  "color": "#2C7A7B"
                }
              ],
              "methodName": "makeLevel",
              "className": "nl.tudelft.jpacman.Launcher",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.Launcher.makeLevel()",
              "packageName": "nl.tudelft.jpacman",
              "description": "Creates a game level by parsing a map string.",
              "reason": "This method is responsible for creating a game level using the provided map data. It delegates to other methods to retrieve the necessary components and handle exceptions.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Creates a new level. By default this method will use the map parser to\r\n * parse the default board stored in the <code>board.txt</code> resource.\r\n *\r\n * @return A new level.\r\n */\r\npublic nl.tudelft.jpacman.level.Level makeLevel() {\r\n    try {\r\n        return this.getMapParser().parseMap(this.getLevelMap());\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to create level, name = \" + this.getLevelMap(), e);\r\n    }\r\n}",
              "layer": "Logic",
              "returns": "nl.tudelft.jpacman.level.Level",
              "time": "291834",
              "value": "291834",
              "percent": "1.3",
              "selfTime": "3",
              "color": "#2C7A7B"
            },
            {
              "id": "479",
              "children": [
                {
                  "id": "480",
                  "children": [
                    {
                      "id": "481",
                      "children": [
                        {
                          "id": "482",
                          "children": [
                            {
                              "id": "483",
                              "children": [
                                {
                                  "id": "484",
                                  "children": [
                                    {
                                      "id": "485",
                                      "children": [],
                                      "methodName": "loadSpriteFromResource",
                                      "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                      "packageName": "nl.tudelft.jpacman.sprite",
                                      "description": "Loads a sprite from a resource file.",
                                      "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                      "layer": "Logic",
                                      "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                      "time": "880",
                                      "value": "880",
                                      "percent": "0.0",
                                      "selfTime": "1",
                                      "color": "#805AD5"
                                    }
                                  ],
                                  "methodName": "loadSprite",
                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Loads a sprite from a resource file if it's not already in the cache.",
                                  "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                                  "layer": "Logic",
                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                  "time": "882",
                                  "value": "882",
                                  "percent": "0.0",
                                  "selfTime": "1",
                                  "color": "#805AD5"
                                }
                              ],
                              "methodName": "loadSprite",
                              "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                              "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                              "layer": "Logic",
                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                              "time": "883",
                              "value": "883",
                              "percent": "0.0",
                              "selfTime": "1",
                              "color": "#805AD5"
                            },
                            {
                              "id": "486",
                              "children": [
                                {
                                  "id": "487",
                                  "children": [
                                    {
                                      "id": "488",
                                      "children": [],
                                      "methodName": "newImage",
                                      "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                      "packageName": "nl.tudelft.jpacman.sprite",
                                      "description": "Creates a new BufferedImage with the specified width and height.",
                                      "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                      "layer": "UI",
                                      "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                      "time": "198",
                                      "value": "198",
                                      "percent": "0.0",
                                      "selfTime": "5",
                                      "color": "#805AD5"
                                    },
                                    {
                                      "id": "489",
                                      "children": [],
                                      "methodName": "withinImage",
                                      "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                      "visibility": "private",
                                      "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                      "packageName": "nl.tudelft.jpacman.sprite",
                                      "description": "Checks if a given coordinate is within the bounds of an image.",
                                      "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                      "detailedBehavior": "",
                                      "flowRepresentation": "",
                                      "briefSummary": "",
                                      "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                      "layer": "Logic",
                                      "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                      "time": "14",
                                      "value": "14",
                                      "percent": "0.0",
                                      "selfTime": "6",
                                      "color": "#805AD5"
                                    }
                                  ],
                                  "methodName": "split",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                                  "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                                  "layer": "Logic",
                                  "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                                  "time": "553",
                                  "value": "553",
                                  "percent": "0.0",
                                  "selfTime": "14",
                                  "color": "#805AD5"
                                },
                                {
                                  "id": "490",
                                  "children": [],
                                  "methodName": "getHeight",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "",
                                  "reason": "",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                                  "layer": "",
                                  "returns": "",
                                  "time": "5",
                                  "value": "5",
                                  "percent": "0.0",
                                  "selfTime": "2",
                                  "color": "#805AD5"
                                },
                                {
                                  "id": "491",
                                  "children": [],
                                  "methodName": "getWidth",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "public",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.getWidth()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "",
                                  "reason": "",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "@java.lang.Override\r\npublic int getWidth() {\r\n    return this.image.getWidth(null);\r\n}",
                                  "layer": "",
                                  "returns": "",
                                  "time": "2",
                                  "value": "2",
                                  "percent": "0.0",
                                  "selfTime": "2",
                                  "color": "#805AD5"
                                }
                              ],
                              "methodName": "createAnimatedSprite",
                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                              "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                              "layer": "Logic",
                              "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                              "time": "574",
                              "value": "574",
                              "percent": "0.0",
                              "selfTime": "8",
                              "color": "#805AD5"
                            },
                            {
                              "id": "492",
                              "children": [
                                {
                                  "id": "493",
                                  "children": [],
                                  "methodName": "newImage",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                  "layer": "UI",
                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                  "time": "63",
                                  "value": "63",
                                  "percent": "0.0",
                                  "selfTime": "3",
                                  "color": "#805AD5"
                                },
                                {
                                  "id": "494",
                                  "children": [],
                                  "methodName": "withinImage",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                  "layer": "Logic",
                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                  "time": "2",
                                  "value": "2",
                                  "percent": "0.0",
                                  "selfTime": "1",
                                  "color": "#805AD5"
                                }
                              ],
                              "methodName": "split",
                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                              "layer": "Logic",
                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                              "time": "223",
                              "value": "223",
                              "percent": "0.0",
                              "selfTime": "3",
                              "color": "#805AD5"
                            },
                            {
                              "id": "495",
                              "children": [],
                              "methodName": "setAnimating",
                              "className": "nl.tudelft.jpacman.sprite.AnimatedSprite",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.AnimatedSprite.setAnimating()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Sets whether the sprite is currently animating.",
                              "reason": "This method allows control over the animation state of a sprite, which is essential for rendering in the UI layer.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Starts or stops the animation of this sprite.\r\n *\r\n * @param isAnimating\r\n * \t\t<code>true</code> to animate this sprite or <code>false</code>\r\n * \t\tto stop animating this sprite.\r\n */\r\npublic void setAnimating(boolean isAnimating) {\r\n    this.animating = isAnimating;\r\n}",
                              "layer": "UI",
                              "returns": "void",
                              "time": "1",
                              "value": "1",
                              "percent": "0.0",
                              "selfTime": "1",
                              "color": "#805AD5"
                            }
                          ],
                          "methodName": "directionSprite",
                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                          "visibility": "private",
                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.directionSprite()",
                          "packageName": "nl.tudelft.jpacman.sprite",
                          "description": "Creates a map of direction sprites from a resource file.",
                          "reason": "",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Returns a new map with animations for all directions.\r\n *\r\n * @param resource\r\n * \t\tThe resource name of the sprite.\r\n * @param frames\r\n * \t\tThe number of frames in this sprite.\r\n * @return The animated sprite facing the given direction.\r\n */\r\nprivate java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> directionSprite(java.lang.String resource, int frames) {\r\n    java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> sprite = new java.util.HashMap<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>();\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    for (int i = 0; i < nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS.length; i++) {\r\n        nl.tudelft.jpacman.sprite.Sprite directionSprite = baseImage.split(0, i * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, frames * nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE, nl.tudelft.jpacman.sprite.PacManSprites.SPRITE_SIZE);\r\n        nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(directionSprite, frames, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, true);\r\n        animation.setAnimating(true);\r\n        sprite.put(nl.tudelft.jpacman.sprite.PacManSprites.DIRECTIONS[i], animation);\r\n    }\r\n    return sprite;\r\n}",
                          "layer": "",
                          "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                          "time": "1685",
                          "value": "1685",
                          "percent": "0.0",
                          "selfTime": "2",
                          "color": "#805AD5"
                        }
                      ],
                      "methodName": "getPacmanSprites",
                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPacmanSprites()",
                      "packageName": "nl.tudelft.jpacman.sprite",
                      "description": "Creates a map of direction sprites for PacMan from a resource file.",
                      "reason": "This method is responsible for loading and creating direction-specific sprites for PacMan, which are essential for rendering the game's visual elements.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return A map of animated Pac-Man sprites for all directions.\r\n */\r\npublic java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite> getPacmanSprites() {\r\n    return this.directionSprite(\"/sprite/pacman.png\", nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_ANIMATION_FRAMES);\r\n}",
                      "layer": "Logic",
                      "returns": "java.util.Map<nl.tudelft.jpacman.board.Direction, nl.tudelft.jpacman.sprite.Sprite>",
                      "time": "1687",
                      "value": "1687",
                      "percent": "0.0",
                      "selfTime": "2",
                      "color": "#805AD5"
                    },
                    {
                      "id": "496",
                      "children": [
                        {
                          "id": "497",
                          "children": [
                            {
                              "id": "498",
                              "children": [
                                {
                                  "id": "499",
                                  "children": [],
                                  "methodName": "loadSpriteFromResource",
                                  "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSpriteFromResource()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Loads a sprite from a resource file.",
                                  "reason": "This method is responsible for loading a sprite from a resource file, which falls under the logic layer as it handles application and domain logic.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return A new sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\n@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\", justification = \"false positive in java 11\")\r\nprivate nl.tudelft.jpacman.sprite.Sprite loadSpriteFromResource(java.lang.String resource) throws java.io.IOException {\r\n    try (java.io.InputStream input = nl.tudelft.jpacman.sprite.SpriteStore.class.getResourceAsStream(resource)) {\r\n        if (input == null) {\r\n            throw new java.io.IOException((\"Unable to load \" + resource) + \", resource does not exist.\");\r\n        }\r\n        java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(input);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(image);\r\n    }\r\n}",
                                  "layer": "Logic",
                                  "returns": "nl.tudelft.jpacman.sprite.Sprite",
                                  "time": "811",
                                  "value": "811",
                                  "percent": "0.0",
                                  "selfTime": "0",
                                  "color": "#805AD5"
                                }
                              ],
                              "methodName": "loadSprite",
                              "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.SpriteStore.loadSprite()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Loads a sprite from a resource file if it's not already in the cache.",
                              "reason": "This method is responsible for loading sprites, which involves application logic rather than user interface or data access.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "/**\r\n * Loads a sprite from a resource on the class path.\r\n * Sprites are loaded once, and then stored in the store\r\n * so that they can be efficiently retrieved.\r\n *\r\n * @param resource\r\n * \t\tThe resource path.\r\n * @return The sprite for the resource.\r\n * @throws IOException\r\n * \t\tWhen the resource could not be loaded.\r\n */\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) throws java.io.IOException {\r\n    nl.tudelft.jpacman.sprite.Sprite result = this.spriteMap.get(resource);\r\n    if (result == null) {\r\n        result = this.loadSpriteFromResource(resource);\r\n        this.spriteMap.put(resource, result);\r\n    }\r\n    return result;\r\n}",
                              "layer": "Logic",
                              "returns": "nl.tudelft.jpacman.sprite.Sprite",
                              "time": "813",
                              "value": "813",
                              "percent": "0.0",
                              "selfTime": "0",
                              "color": "#805AD5"
                            }
                          ],
                          "methodName": "loadSprite",
                          "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.sprite.PacManSprites.loadSprite()",
                          "packageName": "nl.tudelft.jpacman.sprite",
                          "description": "Loads a sprite from a resource file if it's not already in the cache.",
                          "reason": "This method is part of the sprite loading process, which is a core functionality of the game. It ensures that sprites are loaded efficiently by caching them.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Overloads the default sprite loading, ignoring the exception. This class\r\n * assumes all sprites are provided, hence the exception will be thrown as a\r\n * {@link RuntimeException}.\r\n *\r\n * {@inheritDoc }\r\n */\r\n@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite loadSprite(java.lang.String resource) {\r\n    try {\r\n        return super.loadSprite(resource);\r\n    } catch (java.io.IOException e) {\r\n        throw new nl.tudelft.jpacman.PacmanConfigurationException(\"Unable to load sprite: \" + resource, e);\r\n    }\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.sprite.Sprite",
                          "time": "813",
                          "value": "813",
                          "percent": "0.0",
                          "selfTime": "0",
                          "color": "#805AD5"
                        },
                        {
                          "id": "500",
                          "children": [
                            {
                              "id": "501",
                              "children": [
                                {
                                  "id": "502",
                                  "children": [],
                                  "methodName": "newImage",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.newImage()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Creates a new BufferedImage with the specified width and height.",
                                  "reason": "This method is necessary for creating images that will be displayed in the game's user interface.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "/**\r\n * Creates a new, empty image of the given width and height. Its\r\n * transparency will be a bitmask, so no try ARGB image.\r\n *\r\n * @param width\r\n * \t\tThe width of the new image.\r\n * @param height\r\n * \t\tThe height of the new image.\r\n * @return The new, empty image.\r\n */\r\nprivate java.awt.image.BufferedImage newImage(int width, int height) {\r\n    java.awt.GraphicsConfiguration gc = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\r\n    return gc.createCompatibleImage(width, height, java.awt.Transparency.BITMASK);\r\n}",
                                  "layer": "UI",
                                  "returns": "A new BufferedImage object with the specified width, height, and transparency type.",
                                  "time": "130",
                                  "value": "130",
                                  "percent": "0.0",
                                  "selfTime": "4",
                                  "color": "#805AD5"
                                },
                                {
                                  "id": "503",
                                  "children": [],
                                  "methodName": "withinImage",
                                  "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                                  "visibility": "private",
                                  "label": "nl.tudelft.jpacman.sprite.ImageSprite.withinImage()",
                                  "packageName": "nl.tudelft.jpacman.sprite",
                                  "description": "Checks if a given coordinate is within the bounds of an image.",
                                  "reason": "This method is used to ensure that sprite positions are valid within the image dimensions, preventing out-of-bounds errors.",
                                  "detailedBehavior": "",
                                  "flowRepresentation": "",
                                  "briefSummary": "",
                                  "sourceCode": "private boolean withinImage(int x, int y) {\r\n    return (((x < this.image.getWidth(null)) && (x >= 0)) && (y < this.image.getHeight(null))) && (y >= 0);\r\n}",
                                  "layer": "Logic",
                                  "returns": "A boolean indicating whether the coordinates are within the image bounds.",
                                  "time": "8",
                                  "value": "8",
                                  "percent": "0.0",
                                  "selfTime": "3",
                                  "color": "#805AD5"
                                }
                              ],
                              "methodName": "split",
                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.split()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "Splits the current sprite into a new sub-sprite based on specified coordinates and dimensions.",
                              "reason": "This method is necessary for creating smaller sprites from a larger sprite, which is useful in rendering different parts of the game world.",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "@java.lang.Override\r\npublic nl.tudelft.jpacman.sprite.Sprite split(int x, int y, int width, int height) {\r\n    if (this.withinImage(x, y) && this.withinImage((x + width) - 1, (y + height) - 1)) {\r\n        java.awt.image.BufferedImage newImage = this.newImage(width, height);\r\n        newImage.createGraphics().drawImage(this.image, 0, 0, width, height, x, y, x + width, y + height, null);\r\n        return new nl.tudelft.jpacman.sprite.ImageSprite(newImage);\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.EmptySprite();\r\n}",
                              "layer": "Logic",
                              "returns": "A new ImageSprite representing the sub-sprite, or an EmptySprite if the specified coordinates are out of bounds.",
                              "time": "354",
                              "value": "354",
                              "percent": "0.0",
                              "selfTime": "7",
                              "color": "#805AD5"
                            },
                            {
                              "id": "504",
                              "children": [],
                              "methodName": "getHeight",
                              "className": "nl.tudelft.jpacman.sprite.ImageSprite",
                              "visibility": "public",
                              "label": "nl.tudelft.jpacman.sprite.ImageSprite.getHeight()",
                              "packageName": "nl.tudelft.jpacman.sprite",
                              "description": "",
                              "reason": "",
                              "detailedBehavior": "",
                              "flowRepresentation": "",
                              "briefSummary": "",
                              "sourceCode": "@java.lang.Override\r\npublic int getHeight() {\r\n    return this.image.getHeight(null);\r\n}",
                              "layer": "",
                              "returns": "",
                              "time": "3",
                              "value": "3",
                              "percent": "0.0",
                              "selfTime": "2",
                              "color": "#805AD5"
                            }
                          ],
                          "methodName": "createAnimatedSprite",
                          "className": "nl.tudelft.jpacman.sprite.SpriteStore",
                          "visibility": "public",
                          "label": "nl.tudelft.jpacman.sprite.SpriteStore.createAnimatedSprite()",
                          "packageName": "nl.tudelft.jpacman.sprite",
                          "description": "Creates an animated sprite from a base image by splitting it into multiple frames.",
                          "reason": "This method is responsible for creating an animated sprite, which involves splitting a base image into multiple frames and setting up the animation properties. It fits well in the Logic layer as it deals with application logic rather than user interface or data access.",
                          "detailedBehavior": "",
                          "flowRepresentation": "",
                          "briefSummary": "",
                          "sourceCode": "/**\r\n * Creates a new {@link AnimatedSprite} from a base image.\r\n *\r\n * @param baseImage\r\n * \t\tThe base image to convert into an animation.\r\n * @param frames\r\n * \t\tThe amount of frames of the animation.\r\n * @param delay\r\n * \t\tThe delay between frames.\r\n * @param loop\r\n * \t\tWhether this sprite is a looping animation or not.\r\n * @return The animated sprite.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite createAnimatedSprite(nl.tudelft.jpacman.sprite.Sprite baseImage, int frames, int delay, boolean loop) {\r\n    assert baseImage != null;\r\n    assert frames > 0;\r\n    int frameWidth = baseImage.getWidth() / frames;\r\n    nl.tudelft.jpacman.sprite.Sprite[] animation = new nl.tudelft.jpacman.sprite.Sprite[frames];\r\n    for (int i = 0; i < frames; i++) {\r\n        animation[i] = baseImage.split(i * frameWidth, 0, frameWidth, baseImage.getHeight());\r\n    }\r\n    return new nl.tudelft.jpacman.sprite.AnimatedSprite(animation, delay, loop);\r\n}",
                          "layer": "Logic",
                          "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The newly created animated sprite.",
                          "time": "365",
                          "value": "365",
                          "percent": "0.0",
                          "selfTime": "7",
                          "color": "#805AD5"
                        }
                      ],
                      "methodName": "getPacManDeathAnimation",
                      "className": "nl.tudelft.jpacman.sprite.PacManSprites",
                      "visibility": "public",
                      "label": "nl.tudelft.jpacman.sprite.PacManSprites.getPacManDeathAnimation()",
                      "packageName": "nl.tudelft.jpacman.sprite",
                      "description": "Loads the death animation for PacMan.",
                      "reason": "This method is responsible for creating and returning an animated sprite that represents PacMan's death animation, which is part of the game logic rather than UI or data access.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The animation of a dying Pac-Man.\r\n */\r\npublic nl.tudelft.jpacman.sprite.AnimatedSprite getPacManDeathAnimation() {\r\n    java.lang.String resource = \"/sprite/dead.png\";\r\n    nl.tudelft.jpacman.sprite.Sprite baseImage = this.loadSprite(resource);\r\n    nl.tudelft.jpacman.sprite.AnimatedSprite animation = this.createAnimatedSprite(baseImage, nl.tudelft.jpacman.sprite.PacManSprites.PACMAN_DEATH_FRAMES, nl.tudelft.jpacman.sprite.PacManSprites.ANIMATION_DELAY, false);\r\n    animation.setAnimating(false);\r\n    return animation;\r\n}",
                      "layer": "Logic",
                      "returns": "nl.tudelft.jpacman.sprite.AnimatedSprite - The animated sprite representing PacMan's death animation.",
                      "time": "1180",
                      "value": "1180",
                      "percent": "0.0",
                      "selfTime": "2",
                      "color": "#805AD5"
                    },
                    {
                      "id": "505",
                      "children": [],
                      "methodName": "getSprites",
                      "className": "nl.tudelft.jpacman.level.PlayerFactory",
                      "visibility": "protected",
                      "label": "nl.tudelft.jpacman.level.PlayerFactory.getSprites()",
                      "packageName": "nl.tudelft.jpacman.level",
                      "description": "Returns the PacManSprites instance used by the PlayerFactory.",
                      "reason": "This method provides a way to access the sprite resources needed for rendering Pacman and other game elements, which is part of the core game logic.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n * The sprites created by the factory.\r\n *\r\n * @return The sprites for the player created.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSprites() {\r\n    return this.sprites;\r\n}",
                      "layer": "Logic",
                      "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                      "time": "1",
                      "value": "1",
                      "percent": "0.0",
                      "selfTime": "1",
                      "color": "#38A169"
                    }
                  ],
                  "methodName": "createPacMan",
                  "className": "nl.tudelft.jpacman.level.PlayerFactory",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.level.PlayerFactory.createPacMan()",
                  "packageName": "nl.tudelft.jpacman.level",
                  "description": "Creates a new PacMan player instance.",
                  "reason": "This method is responsible for creating a new PacMan player, which involves setting up the necessary sprites and death animation.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Creates a new player with the classic Pac-Man sprites.\r\n *\r\n * @return A new player.\r\n */\r\npublic nl.tudelft.jpacman.level.Player createPacMan() {\r\n    return new nl.tudelft.jpacman.level.Player(this.getSprites().getPacmanSprites(), this.getSprites().getPacManDeathAnimation());\r\n}",
                  "layer": "Logic",
                  "returns": "A newly created instance of nl.tudelft.jpacman.level.Player.",
                  "time": "2903",
                  "value": "2903",
                  "percent": "0.0",
                  "selfTime": "29",
                  "color": "#38A169"
                }
              ],
              "methodName": "createSinglePlayerGame",
              "className": "nl.tudelft.jpacman.game.GameFactory",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.game.GameFactory.createSinglePlayerGame()",
              "packageName": "nl.tudelft.jpacman.game",
              "description": "Creates a single-player game instance.",
              "reason": "This method is responsible for setting up a single-player game environment, which involves creating a PacMan player and combining it with a level and point calculator to form a complete game instance.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Creates a game for a single level with one player.\r\n *\r\n * @param level\r\n * \t\tThe level to create a game for.\r\n * @param pointCalculator\r\n * \t\tThe way to calculate points upon collisions.\r\n * @return A new single player game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game createSinglePlayerGame(nl.tudelft.jpacman.level.Level level, nl.tudelft.jpacman.points.PointCalculator pointCalculator) {\r\n    return new nl.tudelft.jpacman.game.SinglePlayerGame(this.playerFactory.createPacMan(), level, pointCalculator);\r\n}",
              "layer": "Logic",
              "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
              "time": "2972",
              "value": "2972",
              "percent": "0.0",
              "selfTime": "46",
              "color": "#DD6B20"
            },
            {
              "id": "506",
              "children": [
                {
                  "id": "507",
                  "children": [
                    {
                      "id": "508",
                      "children": [],
                      "methodName": "getSpriteStore",
                      "className": "nl.tudelft.jpacman.Launcher",
                      "visibility": "protected",
                      "label": "nl.tudelft.jpacman.Launcher.getSpriteStore()",
                      "packageName": "nl.tudelft.jpacman",
                      "description": "Retrieves the sprite store used in the game.",
                      "reason": "This method provides a centralized way to access sprite resources, ensuring consistency and reducing redundancy in the UI layer.",
                      "detailedBehavior": "",
                      "flowRepresentation": "",
                      "briefSummary": "",
                      "sourceCode": "/**\r\n *\r\n * @return The default {@link PacManSprites}.\r\n */\r\nprotected nl.tudelft.jpacman.sprite.PacManSprites getSpriteStore() {\r\n    return nl.tudelft.jpacman.Launcher.SPRITE_STORE;\r\n}",
                      "layer": "UI",
                      "returns": "An instance of nl.tudelft.jpacman.sprite.PacManSprites.",
                      "time": "1",
                      "value": "1",
                      "percent": "0.0",
                      "selfTime": "1",
                      "color": "#2C7A7B"
                    }
                  ],
                  "methodName": "getPlayerFactory",
                  "className": "nl.tudelft.jpacman.Launcher",
                  "visibility": "protected",
                  "label": "nl.tudelft.jpacman.Launcher.getPlayerFactory()",
                  "packageName": "nl.tudelft.jpacman",
                  "description": "Retrieves the player factory used in the game.",
                  "reason": "This method is responsible for creating player objects, which are essential for gameplay. It encapsulates the logic for player creation and retrieval, ensuring that all players share the same sprite store.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n *\r\n * @return A new factory using the sprites from {@link #getSpriteStore()}.\r\n */\r\nprotected nl.tudelft.jpacman.level.PlayerFactory getPlayerFactory() {\r\n    return new nl.tudelft.jpacman.level.PlayerFactory(this.getSpriteStore());\r\n}",
                  "layer": "Logic",
                  "returns": "An instance of nl.tudelft.jpacman.level.PlayerFactory.",
                  "time": "992",
                  "value": "992",
                  "percent": "0.0",
                  "selfTime": "989",
                  "color": "#2C7A7B"
                }
              ],
              "methodName": "getGameFactory",
              "className": "nl.tudelft.jpacman.Launcher",
              "visibility": "protected",
              "label": "nl.tudelft.jpacman.Launcher.getGameFactory()",
              "packageName": "nl.tudelft.jpacman",
              "description": "Retrieves the game factory used in the game.",
              "reason": "This method is responsible for creating a GameFactory, which is essential for setting up the game logic. It depends on the PlayerFactory to be created first, indicating it's part of the application logic rather than data access or user interface.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n *\r\n * @return A new factory using the players from {@link #getPlayerFactory()}.\r\n */\r\nprotected nl.tudelft.jpacman.game.GameFactory getGameFactory() {\r\n    return new nl.tudelft.jpacman.game.GameFactory(this.getPlayerFactory());\r\n}",
              "layer": "Logic",
              "returns": "An instance of nl.tudelft.jpacman.game.GameFactory.",
              "time": "2305",
              "value": "2305",
              "percent": "0.0",
              "selfTime": "1311",
              "color": "#2C7A7B"
            },
            {
              "id": "509",
              "children": [
                {
                  "id": "510",
                  "children": [],
                  "methodName": "load",
                  "className": "nl.tudelft.jpacman.points.PointCalculatorLoader",
                  "visibility": "public",
                  "label": "nl.tudelft.jpacman.points.PointCalculatorLoader.load()",
                  "packageName": "nl.tudelft.jpacman.points",
                  "description": "Loads a PointCalculator instance dynamically from a file.",
                  "reason": "This method is responsible for loading a specific implementation of the PointCalculator interface, which is crucial for calculating points in the game. It ensures that the correct calculator is instantiated based on the strategy defined in the application.",
                  "detailedBehavior": "",
                  "flowRepresentation": "",
                  "briefSummary": "",
                  "sourceCode": "/**\r\n * Load a points calculator and return it.\r\n *\r\n * @return The (dynamically loaded) points calculator.\r\n */\r\npublic nl.tudelft.jpacman.points.PointCalculator load() {\r\n    try {\r\n        if (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz == null) {\r\n            nl.tudelft.jpacman.points.PointCalculatorLoader.clazz = this.loadClassFromFile();\r\n        }\r\n        return ((nl.tudelft.jpacman.points.PointCalculator) (nl.tudelft.jpacman.points.PointCalculatorLoader.clazz.newInstance()));\r\n    } catch (java.lang.Exception e) {\r\n        throw new java.lang.RuntimeException(\"Could not dynamically load the points calculator.\", e);\r\n    }\r\n}",
                  "layer": "Logic",
                  "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
                  "time": "6",
                  "value": "6",
                  "percent": "0.0",
                  "selfTime": "1",
                  "color": "#ECC94B"
                }
              ],
              "methodName": "loadPointCalculator",
              "className": "nl.tudelft.jpacman.Launcher",
              "visibility": "private",
              "label": "nl.tudelft.jpacman.Launcher.loadPointCalculator()",
              "packageName": "nl.tudelft.jpacman",
              "description": "Loads a PointCalculator instance dynamically from a file.",
              "reason": "This method is responsible for loading a PointCalculator, which is part of the application logic. It does not interact with the user interface or handle data access directly.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "private nl.tudelft.jpacman.points.PointCalculator loadPointCalculator() {\r\n    return new nl.tudelft.jpacman.points.PointCalculatorLoader().load();\r\n}",
              "layer": "Logic",
              "returns": "A nl.tudelft.jpacman.points.PointCalculator object.",
              "time": "7",
              "value": "7",
              "percent": "0.0",
              "selfTime": "1",
              "color": "#2C7A7B"
            }
          ],
          "methodName": "makeGame",
          "className": "nl.tudelft.jpacman.Launcher",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.Launcher.makeGame()",
          "packageName": "nl.tudelft.jpacman",
          "description": "Creates a single-player game instance.",
          "reason": "This method is responsible for creating a game with a single player and a specific level, which falls under the Logic layer as it involves application logic rather than user interface or data access.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Creates a new game using the level from {@link #makeLevel()}.\r\n *\r\n * @return a new Game.\r\n */\r\npublic nl.tudelft.jpacman.game.Game makeGame() {\r\n    nl.tudelft.jpacman.game.GameFactory gf = this.getGameFactory();\r\n    nl.tudelft.jpacman.level.Level level = this.makeLevel();\r\n    this.game = gf.createSinglePlayerGame(level, this.loadPointCalculator());\r\n    return this.game;\r\n}",
          "layer": "Logic",
          "returns": "A newly created instance of nl.tudelft.jpacman.game.Game.",
          "time": "297124",
          "value": "297124",
          "percent": "1.4",
          "selfTime": "6",
          "color": "#2C7A7B"
        },
        {
          "id": "511",
          "children": [],
          "methodName": "start",
          "className": "nl.tudelft.jpacman.ui.PacManUI",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.ui.PacManUI.start()",
          "packageName": "nl.tudelft.jpacman.ui",
          "description": "Sets the PacManUI to be visible and schedules a task to update the frame at fixed intervals.",
          "reason": "This method initializes the user interface and sets up the game loop, which are core responsibilities of a UI component.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Starts the \"engine\", the thread that redraws the interface at set\r\n * intervals.\r\n */\r\npublic void start() {\r\n    this.setVisible(true);\r\n    java.util.concurrent.ScheduledExecutorService service = java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\r\n    service.scheduleAtFixedRate(this::nextFrame, 0, nl.tudelft.jpacman.ui.PacManUI.FRAME_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS);\r\n}",
          "layer": "UI",
          "returns": "void",
          "time": "21683",
          "value": "21683",
          "percent": "0.1",
          "selfTime": "19598",
          "color": "#E53E3E"
        },
        {
          "id": "512",
          "children": [
            {
              "id": "513",
              "children": [],
              "methodName": "moveTowardsDirection",
              "className": "nl.tudelft.jpacman.Launcher",
              "visibility": "private",
              "label": "nl.tudelft.jpacman.Launcher.moveTowardsDirection()",
              "packageName": "nl.tudelft.jpacman",
              "description": "Moves a Pacman player in a given direction if the game is in progress.",
              "reason": "This method is part of the game logic layer, as it involves moving a player in the game based on user input or other events.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "private nl.tudelft.jpacman.ui.Action moveTowardsDirection(nl.tudelft.jpacman.board.Direction direction) {\r\n    return () -> {\r\n        assert this.game != null;\r\n        this.getGame().move(this.getSinglePlayer(this.getGame()), direction);\r\n    };\r\n}",
              "layer": "Logic",
              "returns": "A nl.tudelft.jpacman.ui.Action object representing an action that moves the player.",
              "time": "414",
              "value": "414",
              "percent": "0.0",
              "selfTime": "414",
              "color": "#2C7A7B"
            },
            {
              "id": "514",
              "children": [],
              "methodName": "addKey",
              "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
              "visibility": "public",
              "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.addKey()",
              "packageName": "nl.tudelft.jpacman.ui",
              "description": "Adds a key mapping to the PacManUiBuilder.",
              "reason": "This method allows for customizing user input handling in the Pacman game.",
              "detailedBehavior": "",
              "flowRepresentation": "",
              "briefSummary": "",
              "sourceCode": "/**\r\n * Adds a key listener to the UI.\r\n *\r\n * @param keyCode\r\n * \t\tThe key code of the key as used by {@link java.awt.event.KeyEvent}.\r\n * @param action\r\n * \t\tThe action to perform when the key is pressed.\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder addKey(java.lang.Integer keyCode, nl.tudelft.jpacman.ui.Action action) {\r\n    assert keyCode != null;\r\n    assert action != null;\r\n    this.keyMappings.put(keyCode, action);\r\n    return this;\r\n}",
              "layer": "UI",
              "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
              "time": "2",
              "value": "2",
              "percent": "0.0",
              "selfTime": "1",
              "color": "#E53E3E"
            }
          ],
          "methodName": "addSinglePlayerKeys",
          "className": "nl.tudelft.jpacman.Launcher",
          "visibility": "protected",
          "label": "nl.tudelft.jpacman.Launcher.addSinglePlayerKeys()",
          "packageName": "nl.tudelft.jpacman",
          "description": "Adds key mappings for single player controls in the Pacman game.",
          "reason": "This method is responsible for setting up the keyboard controls for a single player game in Pacman.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Adds key events UP, DOWN, LEFT and RIGHT to a game.\r\n *\r\n * @param builder\r\n * \t\tThe {@link PacManUiBuilder} that will provide the UI.\r\n */\r\nprotected void addSinglePlayerKeys(final nl.tudelft.jpacman.ui.PacManUiBuilder builder) {\r\n    builder.addKey(java.awt.event.KeyEvent.VK_UP, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.NORTH)).addKey(java.awt.event.KeyEvent.VK_DOWN, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.SOUTH)).addKey(java.awt.event.KeyEvent.VK_LEFT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.WEST)).addKey(java.awt.event.KeyEvent.VK_RIGHT, this.moveTowardsDirection(nl.tudelft.jpacman.board.Direction.EAST));\r\n}",
          "layer": "UI",
          "returns": "void",
          "time": "426",
          "value": "426",
          "percent": "0.0",
          "selfTime": "5",
          "color": "#2C7A7B"
        },
        {
          "id": "515",
          "children": [],
          "methodName": "withDefaultButtons",
          "className": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "visibility": "public",
          "label": "nl.tudelft.jpacman.ui.PacManUiBuilder.withDefaultButtons()",
          "packageName": "nl.tudelft.jpacman.ui",
          "description": "Enables the default buttons in the PacManUiBuilder.",
          "reason": "This method is used to configure the user interface by enabling default buttons.",
          "detailedBehavior": "",
          "flowRepresentation": "",
          "briefSummary": "",
          "sourceCode": "/**\r\n * Adds a start and stop button to the UI. The actual actions for these\r\n * buttons will be added upon building the UI.\r\n *\r\n * @return The builder.\r\n */\r\npublic nl.tudelft.jpacman.ui.PacManUiBuilder withDefaultButtons() {\r\n    this.defaultButtons = true;\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.START_CAPTION, null);\r\n    this.buttons.put(nl.tudelft.jpacman.ui.PacManUiBuilder.STOP_CAPTION, null);\r\n    return this;\r\n}",
          "layer": "UI",
          "returns": "nl.tudelft.jpacman.ui.PacManUiBuilder",
          "time": "13",
          "value": "13",
          "percent": "0.0",
          "selfTime": "1",
          "color": "#E53E3E"
        }
      ],
      "methodName": "launch",
      "className": "nl.tudelft.jpacman.Launcher",
      "visibility": "public",
      "label": "nl.tudelft.jpacman.Launcher.launch()",
      "packageName": "nl.tudelft.jpacman",
      "description": "Initializes and starts a single-player Pac-Man game.",
      "reason": "This method is responsible for setting up the game environment, creating the UI, and starting the game loop.",
      "detailedBehavior": "",
      "flowRepresentation": "",
      "briefSummary": "",
      "sourceCode": "/**\r\n * Creates and starts a JPac-Man game.\r\n */\r\npublic void launch() {\r\n    this.makeGame();\r\n    nl.tudelft.jpacman.ui.PacManUiBuilder builder = new nl.tudelft.jpacman.ui.PacManUiBuilder().withDefaultButtons();\r\n    this.addSinglePlayerKeys(builder);\r\n    this.pacManUI = builder.build(this.getGame());\r\n    this.pacManUI.start();\r\n}",
      "layer": "UI",
      "returns": "void",
      "time": "635465",
      "value": "635465",
      "percent": "2.9",
      "selfTime": "506",
      "color": "#2C7A7B"
    }
  ],
  "methodName": "main",
  "className": "nl.tudelft.jpacman.Launcher",
  "visibility": "public",
  "label": "nl.tudelft.jpacman.Launcher.main()",
  "packageName": "nl.tudelft.jpacman",
  "description": "Initializes and starts a single-player Pac-Man game.",
  "reason": "This method is responsible for starting the game, which involves both application logic and user interface elements.",
  "detailedBehavior": "",
  "flowRepresentation": "",
  "briefSummary": "",
  "sourceCode": "/**\r\n * Main execution method for the Launcher.\r\n *\r\n * @param args\r\n * \t\tThe command line arguments - which are ignored.\r\n * @throws IOException\r\n * \t\tWhen a resource could not be read.\r\n */\r\npublic static void main(java.lang.String[] args) throws java.io.IOException {\r\n    new nl.tudelft.jpacman.Launcher().launch();\r\n}",
  "layer": "UI",
  "returns": "Void.",
  "time": "635474",
  "value": "635474",
  "percent": "2.9",
  "selfTime": "5",
  "color": "#2C7A7B"
}